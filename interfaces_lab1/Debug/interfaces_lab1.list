
interfaces_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007328  08007328  00017328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000000  08007550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000288  20000224  08007774  00020224  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004ac  08007774  000204ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a964  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019d5  00000000  00000000  0002abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a58  00000000  00000000  0002c590  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c0  00000000  00000000  0002cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004341  00000000  00000000  0002d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003925  00000000  00000000  00031ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003560e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000337c  00000000  00000000  0003568c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007310 	.word	0x08007310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	08007310 	.word	0x08007310

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MPU_begin>:
int whoAmIAK8963();

//-------------------------------------------

/* starts communication with the MPU-9250 */
int MPU_begin(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8000ec4:	236b      	movs	r3, #107	; 0x6b
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f934 	bl	8001138 <writeRegister>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da02      	bge.n	8000edc <MPU_begin+0x1c>
    return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eda:	e101      	b.n	80010e0 <MPU_begin+0x220>
  }
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8000edc:	236a      	movs	r3, #106	; 0x6a
 8000ede:	2220      	movs	r2, #32
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f928 	bl	8001138 <writeRegister>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da02      	bge.n	8000ef4 <MPU_begin+0x34>
    return -2;
 8000eee:	f06f 0301 	mvn.w	r3, #1
 8000ef2:	e0f5      	b.n	80010e0 <MPU_begin+0x220>
  }
  // set the I2C bus speed to 400 kHz
  if(writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 8000ef4:	2324      	movs	r3, #36	; 0x24
 8000ef6:	220d      	movs	r2, #13
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f91c 	bl	8001138 <writeRegister>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da02      	bge.n	8000f0c <MPU_begin+0x4c>
    return -3;
 8000f06:	f06f 0302 	mvn.w	r3, #2
 8000f0a:	e0e9      	b.n	80010e0 <MPU_begin+0x220>
  }
  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f9d0 	bl	80012b8 <writeAK8963Register>
  // reset the MPU9250
  writeRegister(PWR_MGMNT_1,PWR_RESET);
 8000f18:	236b      	movs	r3, #107	; 0x6b
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f90a 	bl	8001138 <writeRegister>
  // wait for MPU-9250 to come back up
  HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f001 fbb9 	bl	800269c <HAL_Delay>
  // reset the AK8963
  writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f9c1 	bl	80012b8 <writeAK8963Register>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8000f36:	236b      	movs	r3, #107	; 0x6b
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f8fb 	bl	8001138 <writeRegister>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da02      	bge.n	8000f4e <MPU_begin+0x8e>
    return -4;
 8000f48:	f06f 0303 	mvn.w	r3, #3
 8000f4c:	e0c8      	b.n	80010e0 <MPU_begin+0x220>
  }
  // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
  if((whoAmI() != 113)&&(whoAmI() != 115)){
 8000f4e:	f000 f8cb 	bl	80010e8 <whoAmI>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b71      	cmp	r3, #113	; 0x71
 8000f56:	d007      	beq.n	8000f68 <MPU_begin+0xa8>
 8000f58:	f000 f8c6 	bl	80010e8 <whoAmI>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b73      	cmp	r3, #115	; 0x73
 8000f60:	d002      	beq.n	8000f68 <MPU_begin+0xa8>
    return -5;
 8000f62:	f06f 0304 	mvn.w	r3, #4
 8000f66:	e0bb      	b.n	80010e0 <MPU_begin+0x220>
  }
  // enable accelerometer and gyro
  if(writeRegister(PWR_MGMNT_2,SEN_ENABLE) < 0){
 8000f68:	236c      	movs	r3, #108	; 0x6c
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f8e2 	bl	8001138 <writeRegister>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	da02      	bge.n	8000f80 <MPU_begin+0xc0>
    return -6;
 8000f7a:	f06f 0305 	mvn.w	r3, #5
 8000f7e:	e0af      	b.n	80010e0 <MPU_begin+0x220>
  }
  // setting accel range to 16G as default
  if(writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
 8000f80:	231c      	movs	r3, #28
 8000f82:	2218      	movs	r2, #24
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f8d6 	bl	8001138 <writeRegister>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da02      	bge.n	8000f98 <MPU_begin+0xd8>
    return -7;
 8000f92:	f06f 0306 	mvn.w	r3, #6
 8000f96:	e0a3      	b.n	80010e0 <MPU_begin+0x220>
  }

  // setting the gyro range to 2000DPS as default
  if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
 8000f98:	231b      	movs	r3, #27
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f8ca 	bl	8001138 <writeRegister>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da02      	bge.n	8000fb0 <MPU_begin+0xf0>
    return -8;
 8000faa:	f06f 0307 	mvn.w	r3, #7
 8000fae:	e097      	b.n	80010e0 <MPU_begin+0x220>
  }

  // setting bandwidth to 184Hz as default
  if(writeRegister(ACCEL_CONFIG2,DLPF_184) < 0){
 8000fb0:	231d      	movs	r3, #29
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f8be 	bl	8001138 <writeRegister>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da02      	bge.n	8000fc8 <MPU_begin+0x108>
    return -9;
 8000fc2:	f06f 0308 	mvn.w	r3, #8
 8000fc6:	e08b      	b.n	80010e0 <MPU_begin+0x220>
  }
  if(writeRegister(CONFIG,DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
 8000fc8:	231a      	movs	r3, #26
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8b2 	bl	8001138 <writeRegister>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da02      	bge.n	8000fe0 <MPU_begin+0x120>
    return -10;
 8000fda:	f06f 0309 	mvn.w	r3, #9
 8000fde:	e07f      	b.n	80010e0 <MPU_begin+0x220>
  }

  // setting the sample rate divider to 0 as default
  if(writeRegister(SMPDIV,0x00) < 0){
 8000fe0:	2319      	movs	r3, #25
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f8a7 	bl	8001138 <writeRegister>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da02      	bge.n	8000ff6 <MPU_begin+0x136>
    return -11;
 8000ff0:	f06f 030a 	mvn.w	r3, #10
 8000ff4:	e074      	b.n	80010e0 <MPU_begin+0x220>
  }

  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8000ff6:	236a      	movs	r3, #106	; 0x6a
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f89b 	bl	8001138 <writeRegister>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	da02      	bge.n	800100e <MPU_begin+0x14e>
  	return -12;
 8001008:	f06f 030b 	mvn.w	r3, #11
 800100c:	e068      	b.n	80010e0 <MPU_begin+0x220>
  }
	// set the I2C bus speed to 400 kHz
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 800100e:	2324      	movs	r3, #36	; 0x24
 8001010:	220d      	movs	r2, #13
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f88f 	bl	8001138 <writeRegister>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	da02      	bge.n	8001026 <MPU_begin+0x166>
		return -13;
 8001020:	f06f 030c 	mvn.w	r3, #12
 8001024:	e05c      	b.n	80010e0 <MPU_begin+0x220>
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 72 ){
 8001026:	f000 f873 	bl	8001110 <whoAmIAK8963>
 800102a:	4603      	mov	r3, r0
 800102c:	2b48      	cmp	r3, #72	; 0x48
 800102e:	d002      	beq.n	8001036 <MPU_begin+0x176>
    return -14;
 8001030:	f06f 030d 	mvn.w	r3, #13
 8001034:	e054      	b.n	80010e0 <MPU_begin+0x220>
	}

  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8001036:	230a      	movs	r3, #10
 8001038:	2200      	movs	r2, #0
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f93b 	bl	80012b8 <writeAK8963Register>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	da02      	bge.n	800104e <MPU_begin+0x18e>
    return -15;
 8001048:	f06f 030e 	mvn.w	r3, #14
 800104c:	e048      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f001 fb24 	bl	800269c <HAL_Delay>
  // set AK8963 to FUSE ROM access
  if(writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM) < 0){
 8001054:	230a      	movs	r3, #10
 8001056:	220f      	movs	r2, #15
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f92c 	bl	80012b8 <writeAK8963Register>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	da02      	bge.n	800106c <MPU_begin+0x1ac>
    return -16;
 8001066:	f06f 030f 	mvn.w	r3, #15
 800106a:	e039      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f001 fb15 	bl	800269c <HAL_Delay>
  // read the AK8963 ASA registers and compute magnetometer scale factors
  readAK8963Registers(AK8963_ASA,3,_buffer);
 8001072:	2310      	movs	r3, #16
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <MPU_begin+0x224>)
 8001076:	2103      	movs	r1, #3
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f973 	bl	8001364 <readAK8963Registers>

  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 800107e:	230a      	movs	r3, #10
 8001080:	2200      	movs	r2, #0
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f917 	bl	80012b8 <writeAK8963Register>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	da02      	bge.n	8001096 <MPU_begin+0x1d6>
    return -17;
 8001090:	f06f 0310 	mvn.w	r3, #16
 8001094:	e024      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f001 fb00 	bl	800269c <HAL_Delay>
  // set AK8963 to 16 bit resolution, 100 Hz update rate
  if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 800109c:	230a      	movs	r3, #10
 800109e:	2216      	movs	r2, #22
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f908 	bl	80012b8 <writeAK8963Register>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da02      	bge.n	80010b4 <MPU_begin+0x1f4>
    return -18;
 80010ae:	f06f 0311 	mvn.w	r3, #17
 80010b2:	e015      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f001 faf1 	bl	800269c <HAL_Delay>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 80010ba:	236b      	movs	r3, #107	; 0x6b
 80010bc:	2201      	movs	r2, #1
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f839 	bl	8001138 <writeRegister>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da02      	bge.n	80010d2 <MPU_begin+0x212>
    return -19;
 80010cc:	f06f 0312 	mvn.w	r3, #18
 80010d0:	e006      	b.n	80010e0 <MPU_begin+0x220>
  }
  // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
  readAK8963Registers(AK8963_HXL,7,_buffer);
 80010d2:	2303      	movs	r3, #3
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <MPU_begin+0x224>)
 80010d6:	2107      	movs	r1, #7
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f943 	bl	8001364 <readAK8963Registers>

  // successful init, return 1
  return 1;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000310 	.word	0x20000310

080010e8 <whoAmI>:


/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
int whoAmI(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (readRegisters(WHO_AM_I,1,_buffer) < 0) {
 80010ec:	2375      	movs	r3, #117	; 0x75
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <whoAmI+0x24>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f848 	bl	8001188 <readRegisters>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da02      	bge.n	8001104 <whoAmI+0x1c>
    return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	e001      	b.n	8001108 <whoAmI+0x20>
  }
  // return the register value
  return _buffer[0];
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <whoAmI+0x24>)
 8001106:	781b      	ldrb	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000310 	.word	0x20000310

08001110 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
int whoAmIAK8963(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (readAK8963Registers(AK8963_WHO_AM_I,1,_buffer) < 0) {
 8001114:	2300      	movs	r3, #0
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <whoAmIAK8963+0x24>)
 8001118:	2101      	movs	r1, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f922 	bl	8001364 <readAK8963Registers>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	da02      	bge.n	800112c <whoAmIAK8963+0x1c>
    return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112a:	e001      	b.n	8001130 <whoAmIAK8963+0x20>
  }
  // return the register value
  return _buffer[0];
 800112c:	4b01      	ldr	r3, [pc, #4]	; (8001134 <whoAmIAK8963+0x24>)
 800112e:	781b      	ldrb	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000310 	.word	0x20000310

08001138 <writeRegister>:


/* writes a byte to MPU9250 register given a register address and data */
int writeRegister(uint8_t subAddress, uint8_t data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
  /* write data to device */
	HAL_StatusTypeDef status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
	//status = HAL_I2C_Mem_Write(&hi2c1, _address, subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x10000);
	MPU_SPI_Write(&data, subAddress, 1);
 800114c:	79f9      	ldrb	r1, [r7, #7]
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	2201      	movs	r2, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f884 	bl	8001260 <MPU_SPI_Write>
	HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f001 fa9f 	bl	800269c <HAL_Delay>

  /* read back the register */
  readRegisters(subAddress,1,_buffer);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <writeRegister+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f80f 	bl	8001188 <readRegisters>
  /* check the read back register against the written register */
  if(_buffer[0] == data) {
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <writeRegister+0x4c>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	429a      	cmp	r2, r3
 8001172:	d101      	bne.n	8001178 <writeRegister+0x40>
    return 1;
 8001174:	2301      	movs	r3, #1
 8001176:	e001      	b.n	800117c <writeRegister+0x44>
  }
  else{
    return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000310 	.word	0x20000310

08001188 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	603a      	str	r2, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	460b      	mov	r3, r1
 8001196:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
//	status = HAL_I2C_Mem_Read(&hi2c1, _address, subAddress, I2C_MEMADD_SIZE_8BIT, dest, count, 0x10000);
	MPU_SPI_Read(dest, subAddress, count);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	79ba      	ldrb	r2, [r7, #6]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f000 f82a 	bl	80011fc <MPU_SPI_Read>
	if (status == HAL_OK) {
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <readRegisters+0x2a>
      return 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e001      	b.n	80011b6 <readRegisters+0x2e>
    } else {
      return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80011ce:	f107 020f 	add.w	r2, r7, #15
 80011d2:	1df9      	adds	r1, r7, #7
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <SPIx_WriteRead+0x38>)
 80011de:	f002 fe35 	bl	8003e4c <HAL_SPI_TransmitReceive>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SPIx_WriteRead+0x2c>
	{
		return -1;
 80011e8:	23ff      	movs	r3, #255	; 0xff
 80011ea:	e000      	b.n	80011ee <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200003f8 	.word	0x200003f8

080011fc <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
 8001208:	4613      	mov	r3, r2
 800120a:	803b      	strh	r3, [r7, #0]
	ReadAddr |= (uint8_t)READWRITE_CMD;
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	4313      	orrs	r3, r2
 8001212:	70fb      	strb	r3, [r7, #3]
	CS_ON;
 8001214:	2200      	movs	r2, #0
 8001216:	2101      	movs	r1, #1
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <MPU_SPI_Read+0x60>)
 800121a:	f002 f8f3 	bl	8003404 <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffcd 	bl	80011c0 <SPIx_WriteRead>
	while(NumByteToRead>0x00)
 8001226:	e00d      	b.n	8001244 <MPU_SPI_Read+0x48>
	{
		*pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8001228:	2300      	movs	r3, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffc8 	bl	80011c0 <SPIx_WriteRead>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 8001238:	883b      	ldrh	r3, [r7, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3301      	adds	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
	while(NumByteToRead>0x00)
 8001244:	883b      	ldrh	r3, [r7, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ee      	bne.n	8001228 <MPU_SPI_Read+0x2c>
	}
	CS_OFF;
 800124a:	2201      	movs	r2, #1
 800124c:	2101      	movs	r1, #1
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MPU_SPI_Read+0x60>)
 8001250:	f002 f8d8 	bl	8003404 <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020400 	.word	0x40020400

08001260 <MPU_SPI_Write>:
//--------------------------------------
void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
 800126c:	4613      	mov	r3, r2
 800126e:	803b      	strh	r3, [r7, #0]
	CS_ON;
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MPU_SPI_Write+0x54>)
 8001276:	f002 f8c5 	bl	8003404 <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff9f 	bl	80011c0 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8001282:	e00a      	b.n	800129a <MPU_SPI_Write+0x3a>
	{
		SPIx_WriteRead(*pBuffer);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff99 	bl	80011c0 <SPIx_WriteRead>
		NumByteToWrite--;
 800128e:	883b      	ldrh	r3, [r7, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 800129a:	883b      	ldrh	r3, [r7, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f1      	bne.n	8001284 <MPU_SPI_Write+0x24>
	}
	CS_OFF;
 80012a0:	2201      	movs	r2, #1
 80012a2:	2101      	movs	r1, #1
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MPU_SPI_Write+0x54>)
 80012a6:	f002 f8ad 	bl	8003404 <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020400 	.word	0x40020400

080012b8 <writeAK8963Register>:


/* writes a register to the AK8963 given a register address and data */
int writeAK8963Register(uint8_t subAddress, uint8_t data){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for write
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
 80012c8:	2325      	movs	r3, #37	; 0x25
 80012ca:	220c      	movs	r2, #12
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff32 	bl	8001138 <writeRegister>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da02      	bge.n	80012e0 <writeAK8963Register+0x28>
    return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012de:	e03b      	b.n	8001358 <writeAK8963Register+0xa0>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 80012e0:	2226      	movs	r2, #38	; 0x26
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f7ff ff26 	bl	8001138 <writeRegister>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da02      	bge.n	80012f8 <writeAK8963Register+0x40>
    return -2;
 80012f2:	f06f 0301 	mvn.w	r3, #1
 80012f6:	e02f      	b.n	8001358 <writeAK8963Register+0xa0>
  }
  // store the data for write
	if (writeRegister(I2C_SLV0_DO,data) < 0) {
 80012f8:	2263      	movs	r2, #99	; 0x63
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f7ff ff1a 	bl	8001138 <writeRegister>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	da02      	bge.n	8001310 <writeAK8963Register+0x58>
    return -3;
 800130a:	f06f 0302 	mvn.w	r3, #2
 800130e:	e023      	b.n	8001358 <writeAK8963Register+0xa0>
  }
  // enable I2C and send 1 byte
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1) < 0) {
 8001310:	2227      	movs	r2, #39	; 0x27
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f7ff ff0b 	bl	8001138 <writeRegister>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	da02      	bge.n	800132e <writeAK8963Register+0x76>
    return -4;
 8001328:	f06f 0303 	mvn.w	r3, #3
 800132c:	e014      	b.n	8001358 <writeAK8963Register+0xa0>
  }
	// read the register and confirm
	if (readAK8963Registers(subAddress,1,_buffer) < 0) {
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <writeAK8963Register+0xa8>)
 8001332:	2101      	movs	r1, #1
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f815 	bl	8001364 <readAK8963Registers>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	da02      	bge.n	8001346 <writeAK8963Register+0x8e>
    return -5;
 8001340:	f06f 0304 	mvn.w	r3, #4
 8001344:	e008      	b.n	8001358 <writeAK8963Register+0xa0>
  }
	if(_buffer[0] == data) {
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <writeAK8963Register+0xa8>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	79ba      	ldrb	r2, [r7, #6]
 800134c:	429a      	cmp	r2, r3
 800134e:	d101      	bne.n	8001354 <writeAK8963Register+0x9c>
  	return 1;
 8001350:	2301      	movs	r3, #1
 8001352:	e001      	b.n	8001358 <writeAK8963Register+0xa0>
  } else{
  	return -6;
 8001354:	f06f 0305 	mvn.w	r3, #5
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000310 	.word	0x20000310

08001364 <readAK8963Registers>:

/* reads registers from the AK8963 */
int readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	603a      	str	r2, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	460b      	mov	r3, r1
 8001372:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
 8001374:	2025      	movs	r0, #37	; 0x25
 8001376:	220c      	movs	r2, #12
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	4313      	orrs	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff feda 	bl	8001138 <writeRegister>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	da02      	bge.n	8001390 <readAK8963Registers+0x2c>
    return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138e:	e027      	b.n	80013e0 <readAK8963Registers+0x7c>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 8001390:	2226      	movs	r2, #38	; 0x26
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff fece 	bl	8001138 <writeRegister>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <readAK8963Registers+0x44>
    return -2;
 80013a2:	f06f 0301 	mvn.w	r3, #1
 80013a6:	e01b      	b.n	80013e0 <readAK8963Registers+0x7c>
  }
  // enable I2C and request the bytes
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count) < 0) {
 80013a8:	2027      	movs	r0, #39	; 0x27
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fec0 	bl	8001138 <writeRegister>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da02      	bge.n	80013c4 <readAK8963Registers+0x60>
    return -3;
 80013be:	f06f 0302 	mvn.w	r3, #2
 80013c2:	e00d      	b.n	80013e0 <readAK8963Registers+0x7c>
  }
	HAL_Delay(1); // takes some time for these registers to fill
 80013c4:	2001      	movs	r0, #1
 80013c6:	f001 f969 	bl	800269c <HAL_Delay>
  // read the bytes off the MPU9250 EXT_SENS_DATA registers
	_status = readRegisters(EXT_SENS_DATA_00,count,dest);
 80013ca:	2049      	movs	r0, #73	; 0x49
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fed9 	bl	8001188 <readRegisters>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <readAK8963Registers+0x84>)
 80013da:	601a      	str	r2, [r3, #0]
  return _status;
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <readAK8963Registers+0x84>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000498 	.word	0x20000498

080013ec <setSrd>:
  }
 return 1;
}

/* sets the sample rate divider to values other than default */
int setSrd(uint8_t srd) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]

  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
 80013f6:	2319      	movs	r3, #25
 80013f8:	2113      	movs	r1, #19
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe9c 	bl	8001138 <writeRegister>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	da02      	bge.n	800140c <setSrd+0x20>
    return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140a:	e058      	b.n	80014be <setSrd+0xd2>
  }
  if(srd > 9){
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b09      	cmp	r3, #9
 8001410:	d924      	bls.n	800145c <setSrd+0x70>
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8001412:	230a      	movs	r3, #10
 8001414:	2200      	movs	r2, #0
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff4d 	bl	80012b8 <writeAK8963Register>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	da02      	bge.n	800142a <setSrd+0x3e>
      return -2;
 8001424:	f06f 0301 	mvn.w	r3, #1
 8001428:	e049      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	f001 f936 	bl	800269c <HAL_Delay>
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
 8001430:	230a      	movs	r3, #10
 8001432:	2212      	movs	r2, #18
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff3e 	bl	80012b8 <writeAK8963Register>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	da02      	bge.n	8001448 <setSrd+0x5c>
      return -3;
 8001442:	f06f 0302 	mvn.w	r3, #2
 8001446:	e03a      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8001448:	2064      	movs	r0, #100	; 0x64
 800144a:	f001 f927 	bl	800269c <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 800144e:	2303      	movs	r3, #3
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <setSrd+0xdc>)
 8001452:	2107      	movs	r1, #7
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff85 	bl	8001364 <readAK8963Registers>
 800145a:	e023      	b.n	80014a4 <setSrd+0xb8>
  } else {
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 800145c:	230a      	movs	r3, #10
 800145e:	2200      	movs	r2, #0
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff28 	bl	80012b8 <writeAK8963Register>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	da02      	bge.n	8001474 <setSrd+0x88>
      return -2;
 800146e:	f06f 0301 	mvn.w	r3, #1
 8001472:	e024      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8001474:	2064      	movs	r0, #100	; 0x64
 8001476:	f001 f911 	bl	800269c <HAL_Delay>
    // set AK8963 to 16 bit resolution, 100 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 800147a:	230a      	movs	r3, #10
 800147c:	2216      	movs	r2, #22
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff19 	bl	80012b8 <writeAK8963Register>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	da02      	bge.n	8001492 <setSrd+0xa6>
      return -3;
 800148c:	f06f 0302 	mvn.w	r3, #2
 8001490:	e015      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f001 f902 	bl	800269c <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 8001498:	2303      	movs	r3, #3
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <setSrd+0xdc>)
 800149c:	2107      	movs	r1, #7
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff60 	bl	8001364 <readAK8963Registers>
  }
  /* setting the sample rate divider */
  if(writeRegister(SMPDIV,srd) < 0){ // setting the sample rate divider
 80014a4:	2219      	movs	r2, #25
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff fe44 	bl	8001138 <writeRegister>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da02      	bge.n	80014bc <setSrd+0xd0>
    return -4;
 80014b6:	f06f 0303 	mvn.w	r3, #3
 80014ba:	e000      	b.n	80014be <setSrd+0xd2>
  }
  return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000310 	.word	0x20000310

080014cc <enableDataReadyInterrupt>:


/* enables the data ready interrupt */
int enableDataReadyInterrupt() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* setting the interrupt */
  if (writeRegister(INT_PIN_CFG,INT_PULSE_50US) < 0){ // setup interrupt, 50 us pulse
 80014d0:	2337      	movs	r3, #55	; 0x37
 80014d2:	2200      	movs	r2, #0
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe2e 	bl	8001138 <writeRegister>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da02      	bge.n	80014e8 <enableDataReadyInterrupt+0x1c>
    return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e6:	e00c      	b.n	8001502 <enableDataReadyInterrupt+0x36>
  }
  if (writeRegister(INT_ENABLE,INT_RAW_RDY_EN) < 0){ // set to data ready
 80014e8:	2338      	movs	r3, #56	; 0x38
 80014ea:	2201      	movs	r2, #1
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe22 	bl	8001138 <writeRegister>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da02      	bge.n	8001500 <enableDataReadyInterrupt+0x34>
    return -2;
 80014fa:	f06f 0301 	mvn.w	r3, #1
 80014fe:	e000      	b.n	8001502 <enableDataReadyInterrupt+0x36>
  }
  return 1;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <readSensor>:
  return 1;
}


/* reads the most current data from MPU9250 and stores in buffer */
int readSensor() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
 800150c:	233b      	movs	r3, #59	; 0x3b
 800150e:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <readSensor+0x100>)
 8001510:	2115      	movs	r1, #21
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fe38 	bl	8001188 <readRegisters>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	da02      	bge.n	8001524 <readSensor+0x1c>
    return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001522:	e06e      	b.n	8001602 <readSensor+0xfa>
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <readSensor+0x100>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <readSensor+0x100>)
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	4b35      	ldr	r3, [pc, #212]	; (800160c <readSensor+0x104>)
 8001538:	801a      	strh	r2, [r3, #0]
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <readSensor+0x100>)
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <readSensor+0x100>)
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <readSensor+0x108>)
 800154e:	801a      	strh	r2, [r3, #0]
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <readSensor+0x100>)
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <readSensor+0x100>)
 800155a:	795b      	ldrb	r3, [r3, #5]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <readSensor+0x10c>)
 8001564:	801a      	strh	r2, [r3, #0]
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <readSensor+0x100>)
 8001568:	799b      	ldrb	r3, [r3, #6]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <readSensor+0x100>)
 8001570:	79db      	ldrb	r3, [r3, #7]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <readSensor+0x110>)
 800157a:	801a      	strh	r2, [r3, #0]
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <readSensor+0x100>)
 800157e:	7a1b      	ldrb	r3, [r3, #8]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <readSensor+0x100>)
 8001586:	7a5b      	ldrb	r3, [r3, #9]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <readSensor+0x114>)
 8001590:	801a      	strh	r2, [r3, #0]
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <readSensor+0x100>)
 8001594:	7a9b      	ldrb	r3, [r3, #10]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <readSensor+0x100>)
 800159c:	7adb      	ldrb	r3, [r3, #11]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <readSensor+0x118>)
 80015a6:	801a      	strh	r2, [r3, #0]
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <readSensor+0x100>)
 80015aa:	7b1b      	ldrb	r3, [r3, #12]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <readSensor+0x100>)
 80015b2:	7b5b      	ldrb	r3, [r3, #13]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <readSensor+0x11c>)
 80015bc:	801a      	strh	r2, [r3, #0]
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <readSensor+0x100>)
 80015c0:	7bdb      	ldrb	r3, [r3, #15]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <readSensor+0x100>)
 80015c8:	7b9b      	ldrb	r3, [r3, #14]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <readSensor+0x120>)
 80015d2:	801a      	strh	r2, [r3, #0]
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <readSensor+0x100>)
 80015d6:	7c5b      	ldrb	r3, [r3, #17]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <readSensor+0x100>)
 80015de:	7c1b      	ldrb	r3, [r3, #16]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <readSensor+0x124>)
 80015e8:	801a      	strh	r2, [r3, #0]
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <readSensor+0x100>)
 80015ec:	7cdb      	ldrb	r3, [r3, #19]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <readSensor+0x100>)
 80015f4:	7c9b      	ldrb	r3, [r3, #18]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <readSensor+0x128>)
 80015fe:	801a      	strh	r2, [r3, #0]
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000310 	.word	0x20000310
 800160c:	20000388 	.word	0x20000388
 8001610:	20000326 	.word	0x20000326
 8001614:	200004a0 	.word	0x200004a0
 8001618:	2000049e 	.word	0x2000049e
 800161c:	20000390 	.word	0x20000390
 8001620:	200002ec 	.word	0x200002ec
 8001624:	2000049c 	.word	0x2000049c
 8001628:	200004a2 	.word	0x200004a2
 800162c:	20000268 	.word	0x20000268
 8001630:	20000450 	.word	0x20000450

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163a:	f000 ffbd 	bl	80025b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163e:	f000 f85f 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001642:	f000 f963 	bl	800190c <MX_GPIO_Init>
  MX_DMA_Init();
 8001646:	f000 f939 	bl	80018bc <MX_DMA_Init>
  MX_SPI1_Init();
 800164a:	f000 f8d7 	bl	80017fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800164e:	f000 f90b 	bl	8001868 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001652:	f000 f8bf 	bl	80017d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE); //Enble IDLE IRQs
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <main+0xb8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a24      	ldr	r2, [pc, #144]	; (80016ec <main+0xb8>)
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	68d2      	ldr	r2, [r2, #12]
 8001660:	f042 0210 	orr.w	r2, r2, #16
 8001664:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, UART_recv_buff, RECV_BUFF_SIZE); //Start DMA
 8001666:	221e      	movs	r2, #30
 8001668:	4921      	ldr	r1, [pc, #132]	; (80016f0 <main+0xbc>)
 800166a:	4820      	ldr	r0, [pc, #128]	; (80016ec <main+0xb8>)
 800166c:	f002 ffa2 	bl	80045b4 <HAL_UART_Receive_DMA>

  int st;
  st = MPU_begin();
 8001670:	f7ff fc26 	bl	8000ec0 <MPU_begin>
 8001674:	6078      	str	r0, [r7, #4]
  HAL_Delay(100);
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f001 f810 	bl	800269c <HAL_Delay>
  enableDataReadyInterrupt();
 800167c:	f7ff ff26 	bl	80014cc <enableDataReadyInterrupt>
  HAL_Delay(100);
 8001680:	2064      	movs	r0, #100	; 0x64
 8001682:	f001 f80b 	bl	800269c <HAL_Delay>
  setSrd(0);
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff feb0 	bl	80013ec <setSrd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(irq_mcu9250 == 1) {
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <main+0xc0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d1fb      	bne.n	800168c <main+0x58>
		  irq_mcu9250 = 0;
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <main+0xc0>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]

		  ClearBuff(&UART_recv_buff);
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <main+0xbc>)
 800169c:	f000 fdb6 	bl	800220c <ClearBuff>
		  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <main+0xb8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <main+0xb8>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	f042 0210 	orr.w	r2, r2, #16
 80016ae:	60da      	str	r2, [r3, #12]
		  HAL_UART_Receive_DMA(&huart2, UART_recv_buff, RECV_BUFF_SIZE-1);
 80016b0:	221d      	movs	r2, #29
 80016b2:	490f      	ldr	r1, [pc, #60]	; (80016f0 <main+0xbc>)
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <main+0xb8>)
 80016b6:	f002 ff7d 	bl	80045b4 <HAL_UART_Receive_DMA>

		  if(flag == 1) {
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <main+0xc4>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <main+0x9e>
			//Cycle print Accel
			HAL_Delay(command_delay);
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <main+0xc8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 ffe8 	bl	800269c <HAL_Delay>
			GetAccel();
 80016cc:	f000 fc12 	bl	8001ef4 <GetAccel>
 80016d0:	e7dc      	b.n	800168c <main+0x58>
		  } else if (flag == 2) {
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <main+0xc4>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d1d8      	bne.n	800168c <main+0x58>
			//Cycle print Agel
			HAL_Delay(command_delay);
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <main+0xc8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 ffdc 	bl	800269c <HAL_Delay>
			GetAngel();
 80016e4:	f000 fc20 	bl	8001f28 <GetAngel>
	  if(irq_mcu9250 == 1) {
 80016e8:	e7d0      	b.n	800168c <main+0x58>
 80016ea:	bf00      	nop
 80016ec:	20000454 	.word	0x20000454
 80016f0:	200002f0 	.word	0x200002f0
 80016f4:	20000240 	.word	0x20000240
 80016f8:	20000241 	.word	0x20000241
 80016fc:	20000040 	.word	0x20000040

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	; 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	; 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f003 feba 	bl	8005488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4a28      	ldr	r2, [pc, #160]	; (80017cc <SystemClock_Config+0xcc>)
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <SystemClock_Config+0xcc>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <SystemClock_Config+0xcc>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <SystemClock_Config+0xd0>)
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <SystemClock_Config+0xd0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <SystemClock_Config+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001770:	2308      	movs	r3, #8
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001774:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800177a:	2304      	movs	r3, #4
 800177c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800177e:	2304      	movs	r3, #4
 8001780:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	4618      	mov	r0, r3
 8001788:	f001 fe6e 	bl	8003468 <HAL_RCC_OscConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001792:	f000 fd53 	bl	800223c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001796:	230f      	movs	r3, #15
 8001798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2302      	movs	r3, #2
 800179c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2102      	movs	r1, #2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 f8d0 	bl	8003958 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017be:	f000 fd3d 	bl	800223c <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3750      	adds	r7, #80	; 0x50
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2007      	movs	r0, #7
 80017de:	f001 f858 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017e2:	2007      	movs	r0, #7
 80017e4:	f001 f871 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2008      	movs	r0, #8
 80017ee:	f001 f850 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017f2:	2008      	movs	r0, #8
 80017f4:	f001 f869 	bl	80028ca <HAL_NVIC_EnableIRQ>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_SPI1_Init+0x64>)
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <MX_SPI1_Init+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_SPI1_Init+0x64>)
 8001808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800180c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_SPI1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_SPI1_Init+0x64>)
 8001828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_SPI1_Init+0x64>)
 8001830:	2218      	movs	r2, #24
 8001832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_SPI1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_SPI1_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_SPI1_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SPI1_Init+0x64>)
 8001848:	220a      	movs	r2, #10
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_SPI1_Init+0x64>)
 800184e:	f002 fa75 	bl	8003d3c <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001858:	f000 fcf0 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200003f8 	.word	0x200003f8
 8001864:	40013000 	.word	0x40013000

08001868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART2_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001874:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f002 fd3e 	bl	8004320 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 fcc7 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000454 	.word	0x20000454
 80018b8:	40004400 	.word	0x40004400

080018bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <MX_DMA_Init+0x4c>)
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_DMA_Init+0x4c>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <MX_DMA_Init+0x4c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2010      	movs	r0, #16
 80018e4:	f000 ffd5 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018e8:	2010      	movs	r0, #16
 80018ea:	f000 ffee 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2011      	movs	r0, #17
 80018f4:	f000 ffcd 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018f8:	2011      	movs	r0, #17
 80018fa:	f000 ffe6 	bl	80028ca <HAL_NVIC_EnableIRQ>

}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4a2f      	ldr	r2, [pc, #188]	; (80019e4 <MX_GPIO_Init+0xd8>)
 8001928:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <MX_GPIO_Init+0xd8>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <MX_GPIO_Init+0xd8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <MX_GPIO_Init+0xd8>)
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <MX_GPIO_Init+0xd8>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <MX_GPIO_Init+0xd8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <MX_GPIO_Init+0xd8>)
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <MX_GPIO_Init+0xd8>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <MX_GPIO_Init+0xd8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2110      	movs	r1, #16
 800197a:	481b      	ldr	r0, [pc, #108]	; (80019e8 <MX_GPIO_Init+0xdc>)
 800197c:	f001 fd42 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2101      	movs	r1, #1
 8001984:	4819      	ldr	r0, [pc, #100]	; (80019ec <MX_GPIO_Init+0xe0>)
 8001986:	f001 fd3d 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800198a:	2310      	movs	r3, #16
 800198c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	4811      	ldr	r0, [pc, #68]	; (80019e8 <MX_GPIO_Init+0xdc>)
 80019a2:	f001 fbad 	bl	8003100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019a6:	2301      	movs	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <MX_GPIO_Init+0xe0>)
 80019be:	f001 fb9f 	bl	8003100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80019c2:	2306      	movs	r3, #6
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_GPIO_Init+0xe4>)
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_GPIO_Init+0xe0>)
 80019d6:	f001 fb93 	bl	8003100 <HAL_GPIO_Init>

}
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	10110000 	.word	0x10110000

080019f4 <PhysVectorsToAccel>:

/* USER CODE BEGIN 4 */
void PhysVectorsToAccel() {
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	 ACCEL_X = _axcounts * 256 + _gxcounts;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <PhysVectorsToAccel+0x4c>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <PhysVectorsToAccel+0x50>)
 8001a02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <PhysVectorsToAccel+0x54>)
 8001a0a:	6013      	str	r3, [r2, #0]
	 ACCEL_Y = _aycounts * 256 + _gycounts;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <PhysVectorsToAccel+0x58>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <PhysVectorsToAccel+0x5c>)
 8001a16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <PhysVectorsToAccel+0x60>)
 8001a1e:	6013      	str	r3, [r2, #0]
	 ACCEL_Z = _azcounts * 256 + _gzcounts;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <PhysVectorsToAccel+0x64>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <PhysVectorsToAccel+0x68>)
 8001a2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <PhysVectorsToAccel+0x6c>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000388 	.word	0x20000388
 8001a44:	20000390 	.word	0x20000390
 8001a48:	20000244 	.word	0x20000244
 8001a4c:	20000326 	.word	0x20000326
 8001a50:	200002ec 	.word	0x200002ec
 8001a54:	20000248 	.word	0x20000248
 8001a58:	200004a0 	.word	0x200004a0
 8001a5c:	2000049c 	.word	0x2000049c
 8001a60:	2000024c 	.word	0x2000024c
 8001a64:	00000000 	.word	0x00000000

08001a68 <AccelToAngel>:

void AccelToAngel() {
 8001a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a6c:	af00      	add	r7, sp, #0
	 ACCEL_XANGLE = 57.295* atan((float)-ACCEL_X/ sqrt(pow((float)ACCEL_Y, 2)+ pow((float)ACCEL_Z, 2)));
 8001a6e:	4b9a      	ldr	r3, [pc, #616]	; (8001cd8 <AccelToAngel+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	425b      	negs	r3, r3
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7c:	ee17 0a90 	vmov	r0, s15
 8001a80:	f7fe fd6a 	bl	8000558 <__aeabi_f2d>
 8001a84:	4604      	mov	r4, r0
 8001a86:	460d      	mov	r5, r1
 8001a88:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <AccelToAngel+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	ee17 0a90 	vmov	r0, s15
 8001a98:	f7fe fd5e 	bl	8000558 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001cc8 <AccelToAngel+0x260>
 8001aa4:	ec43 2b10 	vmov	d0, r2, r3
 8001aa8:	f004 fb7a 	bl	80061a0 <pow>
 8001aac:	ec59 8b10 	vmov	r8, r9, d0
 8001ab0:	4b8b      	ldr	r3, [pc, #556]	; (8001ce0 <AccelToAngel+0x278>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abc:	ee17 0a90 	vmov	r0, s15
 8001ac0:	f7fe fd4a 	bl	8000558 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8001cc8 <AccelToAngel+0x260>
 8001acc:	ec43 2b10 	vmov	d0, r2, r3
 8001ad0:	f004 fb66 	bl	80061a0 <pow>
 8001ad4:	ec53 2b10 	vmov	r2, r3, d0
 8001ad8:	4640      	mov	r0, r8
 8001ada:	4649      	mov	r1, r9
 8001adc:	f7fe fbde 	bl	800029c <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	ec43 2b17 	vmov	d7, r2, r3
 8001ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aec:	eef0 0a67 	vmov.f32	s1, s15
 8001af0:	f004 fcce 	bl	8006490 <sqrt>
 8001af4:	ec53 2b10 	vmov	r2, r3, d0
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe feaa 	bl	8000854 <__aeabi_ddiv>
 8001b00:	4603      	mov	r3, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	ec44 3b17 	vmov	d7, r3, r4
 8001b08:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0c:	eef0 0a67 	vmov.f32	s1, s15
 8001b10:	f004 f996 	bl	8005e40 <atan>
 8001b14:	ec51 0b10 	vmov	r0, r1, d0
 8001b18:	a36d      	add	r3, pc, #436	; (adr r3, 8001cd0 <AccelToAngel+0x268>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fd6f 	bl	8000600 <__aeabi_dmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f819 	bl	8000b60 <__aeabi_d2iz>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <AccelToAngel+0x27c>)
 8001b32:	601a      	str	r2, [r3, #0]
	 ACCEL_YANGLE = 57.295* atan((float)-ACCEL_Y/ sqrt(pow((float)ACCEL_X, 2)+ pow((float)ACCEL_Z, 2)));
 8001b34:	4b69      	ldr	r3, [pc, #420]	; (8001cdc <AccelToAngel+0x274>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	425b      	negs	r3, r3
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b42:	ee17 0a90 	vmov	r0, s15
 8001b46:	f7fe fd07 	bl	8000558 <__aeabi_f2d>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <AccelToAngel+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	ee17 0a90 	vmov	r0, s15
 8001b5e:	f7fe fcfb 	bl	8000558 <__aeabi_f2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001cc8 <AccelToAngel+0x260>
 8001b6a:	ec43 2b10 	vmov	d0, r2, r3
 8001b6e:	f004 fb17 	bl	80061a0 <pow>
 8001b72:	ec59 8b10 	vmov	r8, r9, d0
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <AccelToAngel+0x278>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	ee17 0a90 	vmov	r0, s15
 8001b86:	f7fe fce7 	bl	8000558 <__aeabi_f2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001cc8 <AccelToAngel+0x260>
 8001b92:	ec43 2b10 	vmov	d0, r2, r3
 8001b96:	f004 fb03 	bl	80061a0 <pow>
 8001b9a:	ec53 2b10 	vmov	r2, r3, d0
 8001b9e:	4640      	mov	r0, r8
 8001ba0:	4649      	mov	r1, r9
 8001ba2:	f7fe fb7b 	bl	800029c <__adddf3>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ec43 2b17 	vmov	d7, r2, r3
 8001bae:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb2:	eef0 0a67 	vmov.f32	s1, s15
 8001bb6:	f004 fc6b 	bl	8006490 <sqrt>
 8001bba:	ec53 2b10 	vmov	r2, r3, d0
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	f7fe fe47 	bl	8000854 <__aeabi_ddiv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	ec44 3b17 	vmov	d7, r3, r4
 8001bce:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd2:	eef0 0a67 	vmov.f32	s1, s15
 8001bd6:	f004 f933 	bl	8005e40 <atan>
 8001bda:	ec51 0b10 	vmov	r0, r1, d0
 8001bde:	a33c      	add	r3, pc, #240	; (adr r3, 8001cd0 <AccelToAngel+0x268>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fd0c 	bl	8000600 <__aeabi_dmul>
 8001be8:	4603      	mov	r3, r0
 8001bea:	460c      	mov	r4, r1
 8001bec:	4618      	mov	r0, r3
 8001bee:	4621      	mov	r1, r4
 8001bf0:	f7fe ffb6 	bl	8000b60 <__aeabi_d2iz>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	; (8001ce8 <AccelToAngel+0x280>)
 8001bf8:	601a      	str	r2, [r3, #0]
	 ACCEL_ZANGLE = 57.295* atan((float)-ACCEL_Z/ sqrt(pow((float)ACCEL_X, 2)+ pow((float)ACCEL_Y, 2)));
 8001bfa:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <AccelToAngel+0x278>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	425b      	negs	r3, r3
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c08:	ee17 0a90 	vmov	r0, s15
 8001c0c:	f7fe fca4 	bl	8000558 <__aeabi_f2d>
 8001c10:	4604      	mov	r4, r0
 8001c12:	460d      	mov	r5, r1
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <AccelToAngel+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c20:	ee17 0a90 	vmov	r0, s15
 8001c24:	f7fe fc98 	bl	8000558 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001cc8 <AccelToAngel+0x260>
 8001c30:	ec43 2b10 	vmov	d0, r2, r3
 8001c34:	f004 fab4 	bl	80061a0 <pow>
 8001c38:	ec59 8b10 	vmov	r8, r9, d0
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <AccelToAngel+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c48:	ee17 0a90 	vmov	r0, s15
 8001c4c:	f7fe fc84 	bl	8000558 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001cc8 <AccelToAngel+0x260>
 8001c58:	ec43 2b10 	vmov	d0, r2, r3
 8001c5c:	f004 faa0 	bl	80061a0 <pow>
 8001c60:	ec53 2b10 	vmov	r2, r3, d0
 8001c64:	4640      	mov	r0, r8
 8001c66:	4649      	mov	r1, r9
 8001c68:	f7fe fb18 	bl	800029c <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	ec43 2b17 	vmov	d7, r2, r3
 8001c74:	eeb0 0a47 	vmov.f32	s0, s14
 8001c78:	eef0 0a67 	vmov.f32	s1, s15
 8001c7c:	f004 fc08 	bl	8006490 <sqrt>
 8001c80:	ec53 2b10 	vmov	r2, r3, d0
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7fe fde4 	bl	8000854 <__aeabi_ddiv>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	ec44 3b17 	vmov	d7, r3, r4
 8001c94:	eeb0 0a47 	vmov.f32	s0, s14
 8001c98:	eef0 0a67 	vmov.f32	s1, s15
 8001c9c:	f004 f8d0 	bl	8005e40 <atan>
 8001ca0:	ec51 0b10 	vmov	r0, r1, d0
 8001ca4:	a30a      	add	r3, pc, #40	; (adr r3, 8001cd0 <AccelToAngel+0x268>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fca9 	bl	8000600 <__aeabi_dmul>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	f7fe ff53 	bl	8000b60 <__aeabi_d2iz>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <AccelToAngel+0x284>)
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40000000 	.word	0x40000000
 8001cd0:	8f5c28f6 	.word	0x8f5c28f6
 8001cd4:	404ca5c2 	.word	0x404ca5c2
 8001cd8:	20000244 	.word	0x20000244
 8001cdc:	20000248 	.word	0x20000248
 8001ce0:	2000024c 	.word	0x2000024c
 8001ce4:	20000250 	.word	0x20000250
 8001ce8:	20000254 	.word	0x20000254
 8001cec:	20000258 	.word	0x20000258

08001cf0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_1) //PB1 EXTI1 (from MPU9250)
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d102      	bne.n	8001d06 <HAL_GPIO_EXTI_Callback+0x16>
	{
		irq_mcu9250 = 1;
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x24>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
	}
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000240 	.word	0x20000240

08001d18 <UARTPrintError>:

//Print error about invalid command
void UARTPrintError() {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2,(unsigned char*)return_err, strlen(return_err), 1000);
 8001d1c:	4806      	ldr	r0, [pc, #24]	; (8001d38 <UARTPrintError+0x20>)
 8001d1e:	f7fe fa5f 	bl	80001e0 <strlen>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	4903      	ldr	r1, [pc, #12]	; (8001d38 <UARTPrintError+0x20>)
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <UARTPrintError+0x24>)
 8001d2e:	f002 fb44 	bl	80043ba <HAL_UART_Transmit>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000020 	.word	0x20000020
 8001d3c:	20000454 	.word	0x20000454

08001d40 <UARTPrint>:

//Determine state machine with 2^3-1 combinations and print results
//for GetAccel() and GetAngel()
void UARTPrint(uint32_t x_val, uint32_t y_val, uint32_t z_val) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	char X = ' ';
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	75fb      	strb	r3, [r7, #23]
	char Y = ' ';
 8001d50:	2320      	movs	r3, #32
 8001d52:	75bb      	strb	r3, [r7, #22]
	char Z = ' ';
 8001d54:	2320      	movs	r3, #32
 8001d56:	757b      	strb	r3, [r7, #21]

	X = args_buff[0];
 8001d58:	4b60      	ldr	r3, [pc, #384]	; (8001edc <UARTPrint+0x19c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	75fb      	strb	r3, [r7, #23]
	Y = args_buff[1];
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <UARTPrint+0x19c>)
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	75bb      	strb	r3, [r7, #22]
	Z = args_buff[2];
 8001d64:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <UARTPrint+0x19c>)
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	757b      	strb	r3, [r7, #21]

	//State machine with 2^3-1 combinations
	if(X == 'X' && Y == '\n' && Z == '\n') {
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b58      	cmp	r3, #88	; 0x58
 8001d6e:	d115      	bne.n	8001d9c <UARTPrint+0x5c>
 8001d70:	7dbb      	ldrb	r3, [r7, #22]
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d112      	bne.n	8001d9c <UARTPrint+0x5c>
 8001d76:	7d7b      	ldrb	r3, [r7, #21]
 8001d78:	2b0a      	cmp	r3, #10
 8001d7a:	d10f      	bne.n	8001d9c <UARTPrint+0x5c>
		//X
		sprintf(response, "%08d\r\n", x_val);
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4958      	ldr	r1, [pc, #352]	; (8001ee0 <UARTPrint+0x1a0>)
 8001d80:	4858      	ldr	r0, [pc, #352]	; (8001ee4 <UARTPrint+0x1a4>)
 8001d82:	f003 fb89 	bl	8005498 <siprintf>
		//TODO Form new string every iteration. Not global!
		HAL_UART_Transmit_DMA(&huart2,(unsigned char*)response, strlen(response));
 8001d86:	4857      	ldr	r0, [pc, #348]	; (8001ee4 <UARTPrint+0x1a4>)
 8001d88:	f7fe fa2a 	bl	80001e0 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	4954      	ldr	r1, [pc, #336]	; (8001ee4 <UARTPrint+0x1a4>)
 8001d94:	4854      	ldr	r0, [pc, #336]	; (8001ee8 <UARTPrint+0x1a8>)
 8001d96:	f002 fba1 	bl	80044dc <HAL_UART_Transmit_DMA>
	if(X == 'X' && Y == '\n' && Z == '\n') {
 8001d9a:	e09b      	b.n	8001ed4 <UARTPrint+0x194>

	} else if (X == '\n' && Y == 'Y' && Z == '\n') {
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b0a      	cmp	r3, #10
 8001da0:	d115      	bne.n	8001dce <UARTPrint+0x8e>
 8001da2:	7dbb      	ldrb	r3, [r7, #22]
 8001da4:	2b59      	cmp	r3, #89	; 0x59
 8001da6:	d112      	bne.n	8001dce <UARTPrint+0x8e>
 8001da8:	7d7b      	ldrb	r3, [r7, #21]
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d10f      	bne.n	8001dce <UARTPrint+0x8e>
		//Y
		sprintf(response, "%08d\r\n", y_val);
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	494b      	ldr	r1, [pc, #300]	; (8001ee0 <UARTPrint+0x1a0>)
 8001db2:	484c      	ldr	r0, [pc, #304]	; (8001ee4 <UARTPrint+0x1a4>)
 8001db4:	f003 fb70 	bl	8005498 <siprintf>
		HAL_UART_Transmit_DMA(&huart2,(unsigned char*)response, strlen(response));
 8001db8:	484a      	ldr	r0, [pc, #296]	; (8001ee4 <UARTPrint+0x1a4>)
 8001dba:	f7fe fa11 	bl	80001e0 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4947      	ldr	r1, [pc, #284]	; (8001ee4 <UARTPrint+0x1a4>)
 8001dc6:	4848      	ldr	r0, [pc, #288]	; (8001ee8 <UARTPrint+0x1a8>)
 8001dc8:	f002 fb88 	bl	80044dc <HAL_UART_Transmit_DMA>
	} else if (X == '\n' && Y == 'Y' && Z == '\n') {
 8001dcc:	e082      	b.n	8001ed4 <UARTPrint+0x194>

	} else if (X == '\n' && Y == '\n' && Z == 'Z') {
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b0a      	cmp	r3, #10
 8001dd2:	d115      	bne.n	8001e00 <UARTPrint+0xc0>
 8001dd4:	7dbb      	ldrb	r3, [r7, #22]
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d112      	bne.n	8001e00 <UARTPrint+0xc0>
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	2b5a      	cmp	r3, #90	; 0x5a
 8001dde:	d10f      	bne.n	8001e00 <UARTPrint+0xc0>
		//Z
		sprintf(response, "%08d\r\n", z_val);
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	493f      	ldr	r1, [pc, #252]	; (8001ee0 <UARTPrint+0x1a0>)
 8001de4:	483f      	ldr	r0, [pc, #252]	; (8001ee4 <UARTPrint+0x1a4>)
 8001de6:	f003 fb57 	bl	8005498 <siprintf>
		HAL_UART_Transmit_DMA(&huart2,(unsigned char*)response, strlen(response));
 8001dea:	483e      	ldr	r0, [pc, #248]	; (8001ee4 <UARTPrint+0x1a4>)
 8001dec:	f7fe f9f8 	bl	80001e0 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	493b      	ldr	r1, [pc, #236]	; (8001ee4 <UARTPrint+0x1a4>)
 8001df8:	483b      	ldr	r0, [pc, #236]	; (8001ee8 <UARTPrint+0x1a8>)
 8001dfa:	f002 fb6f 	bl	80044dc <HAL_UART_Transmit_DMA>
	} else if (X == '\n' && Y == '\n' && Z == 'Z') {
 8001dfe:	e069      	b.n	8001ed4 <UARTPrint+0x194>

	} else if (X == 'X' && Y == 'Y' && Z == '\n') {
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b58      	cmp	r3, #88	; 0x58
 8001e04:	d116      	bne.n	8001e34 <UARTPrint+0xf4>
 8001e06:	7dbb      	ldrb	r3, [r7, #22]
 8001e08:	2b59      	cmp	r3, #89	; 0x59
 8001e0a:	d113      	bne.n	8001e34 <UARTPrint+0xf4>
 8001e0c:	7d7b      	ldrb	r3, [r7, #21]
 8001e0e:	2b0a      	cmp	r3, #10
 8001e10:	d110      	bne.n	8001e34 <UARTPrint+0xf4>
		//XY
		sprintf(response, "%08d;%08d\r\n", x_val, y_val);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4935      	ldr	r1, [pc, #212]	; (8001eec <UARTPrint+0x1ac>)
 8001e18:	4832      	ldr	r0, [pc, #200]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e1a:	f003 fb3d 	bl	8005498 <siprintf>
		HAL_UART_Transmit_DMA(&huart2,(unsigned char*)response, strlen(response));
 8001e1e:	4831      	ldr	r0, [pc, #196]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e20:	f7fe f9de 	bl	80001e0 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	492e      	ldr	r1, [pc, #184]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e2c:	482e      	ldr	r0, [pc, #184]	; (8001ee8 <UARTPrint+0x1a8>)
 8001e2e:	f002 fb55 	bl	80044dc <HAL_UART_Transmit_DMA>
	} else if (X == 'X' && Y == 'Y' && Z == '\n') {
 8001e32:	e04f      	b.n	8001ed4 <UARTPrint+0x194>

	} else if (X == '\n' && Y == 'Y' && Z == 'Z') {
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b0a      	cmp	r3, #10
 8001e38:	d116      	bne.n	8001e68 <UARTPrint+0x128>
 8001e3a:	7dbb      	ldrb	r3, [r7, #22]
 8001e3c:	2b59      	cmp	r3, #89	; 0x59
 8001e3e:	d113      	bne.n	8001e68 <UARTPrint+0x128>
 8001e40:	7d7b      	ldrb	r3, [r7, #21]
 8001e42:	2b5a      	cmp	r3, #90	; 0x5a
 8001e44:	d110      	bne.n	8001e68 <UARTPrint+0x128>
		//YZ
		sprintf(response, "%08d;%08d\r\n", y_val, z_val);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	4928      	ldr	r1, [pc, #160]	; (8001eec <UARTPrint+0x1ac>)
 8001e4c:	4825      	ldr	r0, [pc, #148]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e4e:	f003 fb23 	bl	8005498 <siprintf>
		HAL_UART_Transmit_DMA(&huart2,(unsigned char*)response, strlen(response));
 8001e52:	4824      	ldr	r0, [pc, #144]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e54:	f7fe f9c4 	bl	80001e0 <strlen>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4921      	ldr	r1, [pc, #132]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e60:	4821      	ldr	r0, [pc, #132]	; (8001ee8 <UARTPrint+0x1a8>)
 8001e62:	f002 fb3b 	bl	80044dc <HAL_UART_Transmit_DMA>
	} else if (X == '\n' && Y == 'Y' && Z == 'Z') {
 8001e66:	e035      	b.n	8001ed4 <UARTPrint+0x194>

	} else if (X == 'X' && Y == '\n' && Z == 'Z') {
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b58      	cmp	r3, #88	; 0x58
 8001e6c:	d116      	bne.n	8001e9c <UARTPrint+0x15c>
 8001e6e:	7dbb      	ldrb	r3, [r7, #22]
 8001e70:	2b0a      	cmp	r3, #10
 8001e72:	d113      	bne.n	8001e9c <UARTPrint+0x15c>
 8001e74:	7d7b      	ldrb	r3, [r7, #21]
 8001e76:	2b5a      	cmp	r3, #90	; 0x5a
 8001e78:	d110      	bne.n	8001e9c <UARTPrint+0x15c>
		//XZ
		sprintf(response, "%08d;%08d\r\n", x_val, z_val);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	491b      	ldr	r1, [pc, #108]	; (8001eec <UARTPrint+0x1ac>)
 8001e80:	4818      	ldr	r0, [pc, #96]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e82:	f003 fb09 	bl	8005498 <siprintf>
		HAL_UART_Transmit_DMA(&huart2,(unsigned char*)response, strlen(response));
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e88:	f7fe f9aa 	bl	80001e0 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4914      	ldr	r1, [pc, #80]	; (8001ee4 <UARTPrint+0x1a4>)
 8001e94:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <UARTPrint+0x1a8>)
 8001e96:	f002 fb21 	bl	80044dc <HAL_UART_Transmit_DMA>
	} else if (X == 'X' && Y == '\n' && Z == 'Z') {
 8001e9a:	e01b      	b.n	8001ed4 <UARTPrint+0x194>

	} else if (X == 'X' && Y == 'Y' && Z == 'Z') {
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b58      	cmp	r3, #88	; 0x58
 8001ea0:	d118      	bne.n	8001ed4 <UARTPrint+0x194>
 8001ea2:	7dbb      	ldrb	r3, [r7, #22]
 8001ea4:	2b59      	cmp	r3, #89	; 0x59
 8001ea6:	d115      	bne.n	8001ed4 <UARTPrint+0x194>
 8001ea8:	7d7b      	ldrb	r3, [r7, #21]
 8001eaa:	2b5a      	cmp	r3, #90	; 0x5a
 8001eac:	d112      	bne.n	8001ed4 <UARTPrint+0x194>
		//XYZ
		sprintf(response, "%08d;%08d;%08d\r\n", x_val, y_val, z_val);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <UARTPrint+0x1b0>)
 8001eb8:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <UARTPrint+0x1a4>)
 8001eba:	f003 faed 	bl	8005498 <siprintf>
		HAL_UART_Transmit_DMA(&huart2,(unsigned char*)response, strlen(response));
 8001ebe:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <UARTPrint+0x1a4>)
 8001ec0:	f7fe f98e 	bl	80001e0 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <UARTPrint+0x1a4>)
 8001ecc:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <UARTPrint+0x1a8>)
 8001ece:	f002 fb05 	bl	80044dc <HAL_UART_Transmit_DMA>
	}
}
 8001ed2:	e7ff      	b.n	8001ed4 <UARTPrint+0x194>
 8001ed4:	bf00      	nop
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000034 	.word	0x20000034
 8001ee0:	08007328 	.word	0x08007328
 8001ee4:	2000026c 	.word	0x2000026c
 8001ee8:	20000454 	.word	0x20000454
 8001eec:	08007330 	.word	0x08007330
 8001ef0:	0800733c 	.word	0x0800733c

08001ef4 <GetAccel>:

void GetAccel() {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	readSensor(); //get data from registers
 8001ef8:	f7ff fb06 	bl	8001508 <readSensor>
	PhysVectorsToAccel(); //set values in global vars
 8001efc:	f7ff fd7a 	bl	80019f4 <PhysVectorsToAccel>
	UARTPrint(ACCEL_X, ACCEL_Y, ACCEL_Z); //pass next to determinate and print values
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <GetAccel+0x28>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <GetAccel+0x2c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <GetAccel+0x30>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff ff15 	bl	8001d40 <UARTPrint>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000244 	.word	0x20000244
 8001f20:	20000248 	.word	0x20000248
 8001f24:	2000024c 	.word	0x2000024c

08001f28 <GetAngel>:

void GetAngel() {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	readSensor(); //get data from registers
 8001f2c:	f7ff faec 	bl	8001508 <readSensor>
	PhysVectorsToAccel(); //get accel vectors (globals)
 8001f30:	f7ff fd60 	bl	80019f4 <PhysVectorsToAccel>
	AccelToAngel(); //get angels from accels vectors (global)
 8001f34:	f7ff fd98 	bl	8001a68 <AccelToAngel>
	UARTPrint(ACCEL_XANGLE, ACCEL_YANGLE, ACCEL_ZANGLE); //pass next to determinate and print values
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <GetAngel+0x2c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <GetAngel+0x30>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <GetAngel+0x34>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f7ff fef9 	bl	8001d40 <UARTPrint>
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000250 	.word	0x20000250
 8001f58:	20000254 	.word	0x20000254
 8001f5c:	20000258 	.word	0x20000258

08001f60 <SetInterval>:

void SetInterval(uint16_t interval) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
	if(interval > 500 && interval <= 9999) {
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f70:	d908      	bls.n	8001f84 <SetInterval+0x24>
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d803      	bhi.n	8001f84 <SetInterval+0x24>
		command_delay = interval;
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <SetInterval+0x38>)
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e003      	b.n	8001f8c <SetInterval+0x2c>
	} else {
		//pass wrong value of interval
		//set default
		command_delay = 500;
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SetInterval+0x38>)
 8001f86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f8a:	601a      	str	r2, [r3, #0]
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	20000040 	.word	0x20000040

08001f9c <ParseCommand>:

//Interpreting received UART commands
void ParseCommand(uint8_t* UART_receive) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b090      	sub	sp, #64	; 0x40
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

	//Set time 500 ; Set time 1000 ; Set time 1500 ; Set time 2000 ;

	//Copy array to buffer
	uint8_t buffer[RECV_BUFF_SIZE];
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001fa8:	e00c      	b.n	8001fc4 <ParseCommand+0x28>
		buffer[i] = UART_receive[i];
 8001faa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001fac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	440a      	add	r2, r1
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001fb8:	440b      	add	r3, r1
 8001fba:	f803 2c38 	strb.w	r2, [r3, #-56]
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8001fbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001fc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001fc6:	2b1d      	cmp	r3, #29
 8001fc8:	d9ef      	bls.n	8001faa <ParseCommand+0xe>
	}


	/* Search wildcards using checksum */
	uint8_t local_flag = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	uint16_t checksum_1 = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	877b      	strh	r3, [r7, #58]	; 0x3a
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8001fd8:	e01c      	b.n	8002014 <ParseCommand+0x78>
		if(checksum_1 == checksum_accelrule) {
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <ParseCommand+0x1dc>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <ParseCommand+0x56>
			local_flag = 1; //Get Accel
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			flag = 1;
 8001fea:	4b64      	ldr	r3, [pc, #400]	; (800217c <ParseCommand+0x1e0>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
			break; //Stop cycle after searching command-name wildcard
 8001ff0:	e015      	b.n	800201e <ParseCommand+0x82>
		}

		if(buffer[i] == get_accelrule[i]) {
 8001ff2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001ff4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8001ffe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002000:	495f      	ldr	r1, [pc, #380]	; (8002180 <ParseCommand+0x1e4>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	429a      	cmp	r2, r3
 8002006:	d109      	bne.n	800201c <ParseCommand+0x80>
			checksum_1++;
 8002008:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800200a:	3301      	adds	r3, #1
 800200c:	877b      	strh	r3, [r7, #58]	; 0x3a
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 800200e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002010:	3301      	adds	r3, #1
 8002012:	873b      	strh	r3, [r7, #56]	; 0x38
 8002014:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002016:	2b1d      	cmp	r3, #29
 8002018:	d9df      	bls.n	8001fda <ParseCommand+0x3e>
 800201a:	e000      	b.n	800201e <ParseCommand+0x82>
		} else {
			break; //break cycle if have mismatch
 800201c:	bf00      	nop
		}
	}

	uint16_t checksum_2 = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	86fb      	strh	r3, [r7, #54]	; 0x36
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002022:	2300      	movs	r3, #0
 8002024:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002026:	e01c      	b.n	8002062 <ParseCommand+0xc6>
		if(checksum_2 == checksum_angelrule) {
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <ParseCommand+0x1e8>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800202e:	429a      	cmp	r2, r3
 8002030:	d106      	bne.n	8002040 <ParseCommand+0xa4>
			local_flag = 2; //Get Angel
 8002032:	2302      	movs	r3, #2
 8002034:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			flag = 2;
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <ParseCommand+0x1e0>)
 800203a:	2202      	movs	r2, #2
 800203c:	701a      	strb	r2, [r3, #0]
			break; //Stop cycle after searching command-name wildcard
 800203e:	e015      	b.n	800206c <ParseCommand+0xd0>
		}

		if(buffer[i] == get_angelrule[i]) {
 8002040:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002042:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002046:	4413      	add	r3, r2
 8002048:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800204c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800204e:	494e      	ldr	r1, [pc, #312]	; (8002188 <ParseCommand+0x1ec>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	429a      	cmp	r2, r3
 8002054:	d109      	bne.n	800206a <ParseCommand+0xce>
			checksum_2++;
 8002056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002058:	3301      	adds	r3, #1
 800205a:	86fb      	strh	r3, [r7, #54]	; 0x36
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 800205c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800205e:	3301      	adds	r3, #1
 8002060:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002062:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002064:	2b1d      	cmp	r3, #29
 8002066:	d9df      	bls.n	8002028 <ParseCommand+0x8c>
 8002068:	e000      	b.n	800206c <ParseCommand+0xd0>
		} else {
			break;
 800206a:	bf00      	nop
		}
	}

	uint16_t checksum_3 = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002070:	2300      	movs	r3, #0
 8002072:	863b      	strh	r3, [r7, #48]	; 0x30
 8002074:	e019      	b.n	80020aa <ParseCommand+0x10e>
		if(checksum_3 == checksum_timerule) {
 8002076:	4b45      	ldr	r3, [pc, #276]	; (800218c <ParseCommand+0x1f0>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800207c:	429a      	cmp	r2, r3
 800207e:	d103      	bne.n	8002088 <ParseCommand+0xec>
			local_flag = 3; //Get time
 8002080:	2303      	movs	r3, #3
 8002082:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			break; //Stop cycle after searching command-name wildcard
 8002086:	e015      	b.n	80020b4 <ParseCommand+0x118>
		}

		if(buffer[i] == get_timerule[i]) {
 8002088:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800208a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800208e:	4413      	add	r3, r2
 8002090:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8002094:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002096:	493e      	ldr	r1, [pc, #248]	; (8002190 <ParseCommand+0x1f4>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	429a      	cmp	r2, r3
 800209c:	d109      	bne.n	80020b2 <ParseCommand+0x116>
			checksum_3++;
 800209e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80020a0:	3301      	adds	r3, #1
 80020a2:	867b      	strh	r3, [r7, #50]	; 0x32
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 80020a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020a6:	3301      	adds	r3, #1
 80020a8:	863b      	strh	r3, [r7, #48]	; 0x30
 80020aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020ac:	2b1d      	cmp	r3, #29
 80020ae:	d9e2      	bls.n	8002076 <ParseCommand+0xda>
 80020b0:	e000      	b.n	80020b4 <ParseCommand+0x118>
		} else {
			break;
 80020b2:	bf00      	nop
		}
	}

	//Determine range of args and push params in arr
	uint16_t lhs_range = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t rhs_range = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
	switch(local_flag) {
 80020bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d00a      	beq.n	80020da <ParseCommand+0x13e>
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d00f      	beq.n	80020e8 <ParseCommand+0x14c>
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d114      	bne.n	80020f6 <ParseCommand+0x15a>
	case 1:
		//checksum + 1; //checksum + 5;
		lhs_range = checksum_1 + 1;
 80020cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80020ce:	3301      	adds	r3, #1
 80020d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		rhs_range = checksum_1 + 5;
 80020d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80020d4:	3305      	adds	r3, #5
 80020d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
		break;
 80020d8:	e00d      	b.n	80020f6 <ParseCommand+0x15a>
	case 2:
		lhs_range = checksum_2 + 1;
 80020da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020dc:	3301      	adds	r3, #1
 80020de:	85fb      	strh	r3, [r7, #46]	; 0x2e
		rhs_range = checksum_2 + 5;
 80020e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e2:	3305      	adds	r3, #5
 80020e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
		break;
 80020e6:	e006      	b.n	80020f6 <ParseCommand+0x15a>
	case 3:
		lhs_range = checksum_3 + 1;
 80020e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80020ea:	3301      	adds	r3, #1
 80020ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		rhs_range = checksum_3 + 5;
 80020ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80020f0:	3305      	adds	r3, #5
 80020f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
		break;
 80020f4:	bf00      	nop
	}

	for(uint16_t i = lhs_range, j = 0; i < rhs_range; i++, j++) {
 80020f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80020fa:	2300      	movs	r3, #0
 80020fc:	853b      	strh	r3, [r7, #40]	; 0x28
 80020fe:	e00e      	b.n	800211e <ParseCommand+0x182>
		args_buff[j] = buffer[i];
 8002100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002102:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002104:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002108:	440a      	add	r2, r1
 800210a:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 800210e:	4a21      	ldr	r2, [pc, #132]	; (8002194 <ParseCommand+0x1f8>)
 8002110:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = lhs_range, j = 0; i < rhs_range; i++, j++) {
 8002112:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002114:	3301      	adds	r3, #1
 8002116:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800211a:	3301      	adds	r3, #1
 800211c:	853b      	strh	r3, [r7, #40]	; 0x28
 800211e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002122:	429a      	cmp	r2, r3
 8002124:	d3ec      	bcc.n	8002100 <ParseCommand+0x164>
	}

	/* Parse arguments using checksum and wildcards */
	if(local_flag == 1) {
 8002126:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <ParseCommand+0x198>

		GetAccel();
 800212e:	f7ff fee1 	bl	8001ef4 <GetAccel>
		SetInterval(value);
	} else if (local_flag == 0) {
		UARTPrintError();
	}

}
 8002132:	e01c      	b.n	800216e <ParseCommand+0x1d2>
	} else if(local_flag == 2) {
 8002134:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002138:	2b02      	cmp	r3, #2
 800213a:	d102      	bne.n	8002142 <ParseCommand+0x1a6>
		GetAngel();
 800213c:	f7ff fef4 	bl	8001f28 <GetAngel>
}
 8002140:	e015      	b.n	800216e <ParseCommand+0x1d2>
	} else if (local_flag == 3) {
 8002142:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002146:	2b03      	cmp	r3, #3
 8002148:	d10b      	bne.n	8002162 <ParseCommand+0x1c6>
		uint16_t value = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	84fb      	strh	r3, [r7, #38]	; 0x26
		value = atoi(args_buff);
 800214e:	4811      	ldr	r0, [pc, #68]	; (8002194 <ParseCommand+0x1f8>)
 8002150:	f003 f96b 	bl	800542a <atoi>
 8002154:	4603      	mov	r3, r0
 8002156:	84fb      	strh	r3, [r7, #38]	; 0x26
		SetInterval(value);
 8002158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff00 	bl	8001f60 <SetInterval>
}
 8002160:	e005      	b.n	800216e <ParseCommand+0x1d2>
	} else if (local_flag == 0) {
 8002162:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <ParseCommand+0x1d2>
		UARTPrintError();
 800216a:	f7ff fdd5 	bl	8001d18 <UARTPrintError>
}
 800216e:	bf00      	nop
 8002170:	3740      	adds	r7, #64	; 0x40
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000038 	.word	0x20000038
 800217c:	20000241 	.word	0x20000241
 8002180:	20000000 	.word	0x20000000
 8002184:	2000003a 	.word	0x2000003a
 8002188:	2000000c 	.word	0x2000000c
 800218c:	2000003c 	.word	0x2000003c
 8002190:	20000018 	.word	0x20000018
 8002194:	20000034 	.word	0x20000034

08002198 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) { //Determine serial port
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <USER_UART_IRQHandler+0x44>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d114      	bne.n	80021d4 <USER_UART_IRQHandler+0x3c>
		if(RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) { //Checking source IDLE IRQ
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d10d      	bne.n	80021d4 <USER_UART_IRQHandler+0x3c>
			__HAL_UART_CLEAR_IDLEFLAG(huart); //Clear IDLE IRQ sign
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
			USER_UART_IDLECallback(huart); //Call interrupt handler
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f806 	bl	80021e0 <USER_UART_IDLECallback>
		}
	}
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40004400 	.word	0x40004400

080021e0 <USER_UART_IDLECallback>:

void USER_UART_IDLECallback(UART_HandleTypeDef *huart) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(huart); //Stop DMA transmission
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f002 fa13 	bl	8004614 <HAL_UART_DMAStop>
	Unprocessed_UART_buff_detected = SET;
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <USER_UART_IDLECallback+0x24>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
	//Next DMA transmission will be allowed after buffer processing
	ParseCommand(&UART_recv_buff);
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <USER_UART_IDLECallback+0x28>)
 80021f6:	f7ff fed1 	bl	8001f9c <ParseCommand>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000242 	.word	0x20000242
 8002208:	200002f0 	.word	0x200002f0

0800220c <ClearBuff>:

//Clear USART receive buff (pushing '\0' in all positions)
void ClearBuff(uint8_t* buff) {
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e007      	b.n	800222a <ClearBuff+0x1e>
		buff[i] = '\n';
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	220a      	movs	r2, #10
 8002222:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	3301      	adds	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b1d      	cmp	r3, #29
 800222e:	d9f4      	bls.n	800221a <ClearBuff+0xe>
	}
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002242:	e7fe      	b.n	8002242 <Error_Handler+0x6>

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_MspInit+0x4c>)
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_MspInit+0x4c>)
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_MspInit+0x4c>)
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_MspInit+0x4c>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002282:	2007      	movs	r0, #7
 8002284:	f000 fafa 	bl	800287c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_SPI_MspInit+0x84>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022ee:	23e0      	movs	r3, #224	; 0xe0
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fe:	2305      	movs	r3, #5
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <HAL_SPI_MspInit+0x8c>)
 800230a:	f000 fef9 	bl	8003100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40013000 	.word	0x40013000
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000

08002324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4b      	ldr	r2, [pc, #300]	; (8002470 <HAL_UART_MspInit+0x14c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 8090 	bne.w	8002468 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	4a49      	ldr	r2, [pc, #292]	; (8002474 <HAL_UART_MspInit+0x150>)
 800234e:	4b49      	ldr	r3, [pc, #292]	; (8002474 <HAL_UART_MspInit+0x150>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002356:	6413      	str	r3, [r2, #64]	; 0x40
 8002358:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_UART_MspInit+0x150>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4a42      	ldr	r2, [pc, #264]	; (8002474 <HAL_UART_MspInit+0x150>)
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_UART_MspInit+0x150>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_UART_MspInit+0x150>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002380:	230c      	movs	r3, #12
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002390:	2307      	movs	r3, #7
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	4837      	ldr	r0, [pc, #220]	; (8002478 <HAL_UART_MspInit+0x154>)
 800239c:	f000 feb0 	bl	8003100 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_UART_MspInit+0x158>)
 80023a2:	4a37      	ldr	r2, [pc, #220]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <HAL_UART_MspInit+0x158>)
 80023a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ae:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_UART_MspInit+0x158>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_UART_MspInit+0x158>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_UART_MspInit+0x158>)
 80023bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c2:	4b2e      	ldr	r3, [pc, #184]	; (800247c <HAL_UART_MspInit+0x158>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <HAL_UART_MspInit+0x158>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_UART_MspInit+0x158>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_UART_MspInit+0x158>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_UART_MspInit+0x158>)
 80023dc:	2200      	movs	r2, #0
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023e0:	4826      	ldr	r0, [pc, #152]	; (800247c <HAL_UART_MspInit+0x158>)
 80023e2:	f000 fa8d 	bl	8002900 <HAL_DMA_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80023ec:	f7ff ff26 	bl	800223c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_UART_MspInit+0x158>)
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <HAL_UART_MspInit+0x158>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023fe:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002400:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002408:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_UART_MspInit+0x160>)
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800241c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002420:	2200      	movs	r2, #0
 8002422:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_UART_MspInit+0x160>)
 800242c:	2200      	movs	r2, #0
 800242e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002432:	2200      	movs	r2, #0
 8002434:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800243c:	4811      	ldr	r0, [pc, #68]	; (8002484 <HAL_UART_MspInit+0x160>)
 800243e:	f000 fa5f 	bl	8002900 <HAL_DMA_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002448:	f7ff fef8 	bl	800223c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002450:	635a      	str	r2, [r3, #52]	; 0x34
 8002452:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <HAL_UART_MspInit+0x160>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	2026      	movs	r0, #38	; 0x26
 800245e:	f000 fa18 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002462:	2026      	movs	r0, #38	; 0x26
 8002464:	f000 fa31 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40004400 	.word	0x40004400
 8002474:	40023800 	.word	0x40023800
 8002478:	40020000 	.word	0x40020000
 800247c:	2000028c 	.word	0x2000028c
 8002480:	40026088 	.word	0x40026088
 8002484:	20000328 	.word	0x20000328
 8002488:	400260a0 	.word	0x400260a0

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d8:	f000 f8c0 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f000 ffa7 	bl	8003438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}

080024ee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80024f2:	2004      	movs	r0, #4
 80024f4:	f000 ffa0 	bl	8003438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMA1_Stream5_IRQHandler+0x10>)
 8002502:	f000 fb95 	bl	8002c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000028c 	.word	0x2000028c

08002510 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <DMA1_Stream6_IRQHandler+0x10>)
 8002516:	f000 fb8b 	bl	8002c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000328 	.word	0x20000328

08002524 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002528:	4803      	ldr	r0, [pc, #12]	; (8002538 <USART2_IRQHandler+0x14>)
 800252a:	f002 f8cf 	bl	80046cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 800252e:	4802      	ldr	r0, [pc, #8]	; (8002538 <USART2_IRQHandler+0x14>)
 8002530:	f7ff fe32 	bl	8002198 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000454 	.word	0x20000454

0800253c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <_sbrk+0x50>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x16>
		heap_end = &end;
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <_sbrk+0x50>)
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <_sbrk+0x54>)
 8002550:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <_sbrk+0x50>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <_sbrk+0x50>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	466a      	mov	r2, sp
 8002562:	4293      	cmp	r3, r2
 8002564:	d907      	bls.n	8002576 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002566:	f002 ff65 	bl	8005434 <__errno>
 800256a:	4602      	mov	r2, r0
 800256c:	230c      	movs	r3, #12
 800256e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002574:	e006      	b.n	8002584 <_sbrk+0x48>
	}

	heap_end += incr;
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <_sbrk+0x50>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a03      	ldr	r2, [pc, #12]	; (800258c <_sbrk+0x50>)
 8002580:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2000025c 	.word	0x2000025c
 8002590:	200004ac 	.word	0x200004ac

08002594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <SystemInit+0x20>)
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <SystemInit+0x20>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_Init+0x40>)
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_Init+0x40>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_Init+0x40>)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_Init+0x40>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_Init+0x40>)
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_Init+0x40>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f94b 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f808 	bl	80025fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ec:	f7ff fe2a 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x54>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	fbb3 f3f1 	udiv	r3, r3, r1
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f963 	bl	80028e6 <HAL_SYSTICK_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e00e      	b.n	8002648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d80a      	bhi.n	8002646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002630:	2200      	movs	r2, #0
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002638:	f000 f92b 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <HAL_InitTick+0x5c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000044 	.word	0x20000044
 8002654:	2000004c 	.word	0x2000004c
 8002658:	20000048 	.word	0x20000048

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	2000004c 	.word	0x2000004c
 8002680:	200004a4 	.word	0x200004a4

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200004a4 	.word	0x200004a4

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_Delay+0x40>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad2      	subs	r2, r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3f7      	bcc.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000004c 	.word	0x2000004c

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	4909      	ldr	r1, [pc, #36]	; (800277c <__NVIC_EnableIRQ+0x38>)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	79fa      	ldrb	r2, [r7, #7]
 8002760:	f002 021f 	and.w	r2, r2, #31
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	490d      	ldr	r1, [pc, #52]	; (80027cc <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	4909      	ldr	r1, [pc, #36]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	2201      	movs	r2, #1
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	401a      	ands	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281a:	2101      	movs	r1, #1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	1e59      	subs	r1, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800285c:	f7ff ff90 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff2b 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff40 	bl	8002728 <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff90 	bl	80027d4 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5f 	bl	8002780 <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff33 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff feba 	bl	8002684 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e099      	b.n	8002a50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293c:	e00f      	b.n	800295e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800293e:	f7ff fea1 	bl	8002684 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b05      	cmp	r3, #5
 800294a:	d908      	bls.n	800295e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e078      	b.n	8002a50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e8      	bne.n	800293e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_DMA_Init+0x158>)
 8002978:	4013      	ands	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d107      	bne.n	80029c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4313      	orrs	r3, r2
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d117      	bne.n	8002a22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb01 	bl	800300c <DMA_CheckFifoParam>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e016      	b.n	8002a50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fab8 	bl	8002fa0 <DMA_CalcBaseAndBitshift>
 8002a30:	4603      	mov	r3, r0
 8002a32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	223f      	movs	r2, #63	; 0x3f
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	f010803f 	.word	0xf010803f

08002a5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_DMA_Start_IT+0x26>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e040      	b.n	8002b04 <HAL_DMA_Start_IT+0xa8>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d12f      	bne.n	8002af6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fa4a 	bl	8002f44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	223f      	movs	r2, #63	; 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	f042 0216 	orr.w	r2, r2, #22
 8002aca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e005      	b.n	8002b02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b1a:	f7ff fdb3 	bl	8002684 <HAL_GetTick>
 8002b1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d008      	beq.n	8002b3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e052      	b.n	8002be4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f022 0216 	bic.w	r2, r2, #22
 8002b4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	6952      	ldr	r2, [r2, #20]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_DMA_Abort+0x62>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	f022 0208 	bic.w	r2, r2, #8
 8002b7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8e:	e013      	b.n	8002bb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b90:	f7ff fd78 	bl	8002684 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e015      	b.n	8002be4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e4      	bne.n	8002b90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	223f      	movs	r2, #63	; 0x3f
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d004      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00c      	b.n	8002c24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c3c:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_DMA_IRQHandler+0x258>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a92      	ldr	r2, [pc, #584]	; (8002e8c <HAL_DMA_IRQHandler+0x25c>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01a      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	f022 0204 	bic.w	r2, r2, #4
 8002c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	2208      	movs	r2, #8
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d012      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f043 0202 	orr.w	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d043      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d03c      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d018      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d024      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
 8002d5e:	e01f      	b.n	8002da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01b      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
 8002d70:	e016      	b.n	8002da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	f022 0208 	bic.w	r2, r2, #8
 8002d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	2220      	movs	r2, #32
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 808e 	beq.w	8002ece <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8086 	beq.w	8002ece <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d136      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	f022 0216 	bic.w	r2, r2, #22
 8002de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	6952      	ldr	r2, [r2, #20]
 8002df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <HAL_DMA_IRQHandler+0x1da>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	f022 0208 	bic.w	r2, r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	223f      	movs	r2, #63	; 0x3f
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d07d      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
        }
        return;
 8002e46:	e078      	b.n	8002f3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01c      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d030      	beq.n	8002ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
 8002e74:	e02b      	b.n	8002ece <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
 8002e86:	e022      	b.n	8002ece <HAL_DMA_IRQHandler+0x29e>
 8002e88:	20000044 	.word	0x20000044
 8002e8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f022 0210 	bic.w	r2, r2, #16
 8002eac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d032      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d022      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d807      	bhi.n	8002f16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f2      	bne.n	8002efa <HAL_DMA_IRQHandler+0x2ca>
 8002f14:	e000      	b.n	8002f18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
 8002f38:	e000      	b.n	8002f3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f3a:	bf00      	nop
    }
  }
}
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop

08002f44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d108      	bne.n	8002f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f82:	e007      	b.n	8002f94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3b10      	subs	r3, #16
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <DMA_CalcBaseAndBitshift+0x64>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <DMA_CalcBaseAndBitshift+0x68>)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d909      	bls.n	8002fe2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	1d1a      	adds	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	659a      	str	r2, [r3, #88]	; 0x58
 8002fe0:	e007      	b.n	8002ff2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	aaaaaaab 	.word	0xaaaaaaab
 8003008:	08007368 	.word	0x08007368

0800300c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11f      	bne.n	8003066 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d855      	bhi.n	80030d8 <DMA_CheckFifoParam+0xcc>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <DMA_CheckFifoParam+0x28>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003045 	.word	0x08003045
 8003038:	08003057 	.word	0x08003057
 800303c:	08003045 	.word	0x08003045
 8003040:	080030d9 	.word	0x080030d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d045      	beq.n	80030dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003054:	e042      	b.n	80030dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800305e:	d13f      	bne.n	80030e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003064:	e03c      	b.n	80030e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306e:	d121      	bne.n	80030b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d836      	bhi.n	80030e4 <DMA_CheckFifoParam+0xd8>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <DMA_CheckFifoParam+0x70>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	0800308d 	.word	0x0800308d
 8003080:	08003093 	.word	0x08003093
 8003084:	0800308d 	.word	0x0800308d
 8003088:	080030a5 	.word	0x080030a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      break;
 8003090:	e02f      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d024      	beq.n	80030e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a2:	e021      	b.n	80030e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030ac:	d11e      	bne.n	80030ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030b2:	e01b      	b.n	80030ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <DMA_CheckFifoParam+0xb4>
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d003      	beq.n	80030c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030be:	e018      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e015      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
      break;
 80030d6:	e00b      	b.n	80030f0 <DMA_CheckFifoParam+0xe4>
      break;
 80030d8:	bf00      	nop
 80030da:	e00a      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030dc:	bf00      	nop
 80030de:	e008      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030e0:	bf00      	nop
 80030e2:	e006      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030e4:	bf00      	nop
 80030e6:	e004      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030f0:	bf00      	nop
    }
  } 
  
  return status; 
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e159      	b.n	80033d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800311c:	2201      	movs	r2, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	f040 8148 	bne.w	80033ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d005      	beq.n	8003152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800314e:	2b02      	cmp	r3, #2
 8003150:	d130      	bne.n	80031b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2203      	movs	r2, #3
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003188:	2201      	movs	r2, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 0201 	and.w	r2, r3, #1
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d017      	beq.n	80031f0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d123      	bne.n	8003244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	69b9      	ldr	r1, [r7, #24]
 8003240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80a2 	beq.w	80033ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4a56      	ldr	r2, [pc, #344]	; (80033e4 <HAL_GPIO_Init+0x2e4>)
 800328c:	4b55      	ldr	r3, [pc, #340]	; (80033e4 <HAL_GPIO_Init+0x2e4>)
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003294:	6453      	str	r3, [r2, #68]	; 0x44
 8003296:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_GPIO_Init+0x2e4>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032a2:	4a51      	ldr	r2, [pc, #324]	; (80033e8 <HAL_GPIO_Init+0x2e8>)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	3302      	adds	r3, #2
 80032aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a48      	ldr	r2, [pc, #288]	; (80033ec <HAL_GPIO_Init+0x2ec>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d019      	beq.n	8003302 <HAL_GPIO_Init+0x202>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a47      	ldr	r2, [pc, #284]	; (80033f0 <HAL_GPIO_Init+0x2f0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0x1fe>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a46      	ldr	r2, [pc, #280]	; (80033f4 <HAL_GPIO_Init+0x2f4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00d      	beq.n	80032fa <HAL_GPIO_Init+0x1fa>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a45      	ldr	r2, [pc, #276]	; (80033f8 <HAL_GPIO_Init+0x2f8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <HAL_GPIO_Init+0x1f6>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a44      	ldr	r2, [pc, #272]	; (80033fc <HAL_GPIO_Init+0x2fc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_GPIO_Init+0x1f2>
 80032ee:	2304      	movs	r3, #4
 80032f0:	e008      	b.n	8003304 <HAL_GPIO_Init+0x204>
 80032f2:	2307      	movs	r3, #7
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x204>
 80032f6:	2303      	movs	r3, #3
 80032f8:	e004      	b.n	8003304 <HAL_GPIO_Init+0x204>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e002      	b.n	8003304 <HAL_GPIO_Init+0x204>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_GPIO_Init+0x204>
 8003302:	2300      	movs	r3, #0
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	f002 0203 	and.w	r2, r2, #3
 800330a:	0092      	lsls	r2, r2, #2
 800330c:	4093      	lsls	r3, r2
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003314:	4934      	ldr	r1, [pc, #208]	; (80033e8 <HAL_GPIO_Init+0x2e8>)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	3302      	adds	r3, #2
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003322:	4b37      	ldr	r3, [pc, #220]	; (8003400 <HAL_GPIO_Init+0x300>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003346:	4a2e      	ldr	r2, [pc, #184]	; (8003400 <HAL_GPIO_Init+0x300>)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800334c:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <HAL_GPIO_Init+0x300>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003370:	4a23      	ldr	r2, [pc, #140]	; (8003400 <HAL_GPIO_Init+0x300>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_GPIO_Init+0x300>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_GPIO_Init+0x300>)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_GPIO_Init+0x300>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <HAL_GPIO_Init+0x300>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b0f      	cmp	r3, #15
 80033d4:	f67f aea2 	bls.w	800311c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033d8:	bf00      	nop
 80033da:	3724      	adds	r7, #36	; 0x24
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	40021000 	.word	0x40021000
 8003400:	40013c00 	.word	0x40013c00

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fc4a 	bl	8001cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40013c00 	.word	0x40013c00

08003468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e264      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d075      	beq.n	8003572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003486:	4ba3      	ldr	r3, [pc, #652]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b04      	cmp	r3, #4
 8003490:	d00c      	beq.n	80034ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b9d      	ldr	r3, [pc, #628]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4b99      	ldr	r3, [pc, #612]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05b      	beq.n	8003570 <HAL_RCC_OscConfig+0x108>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d157      	bne.n	8003570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e23f      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x74>
 80034ce:	4a91      	ldr	r2, [pc, #580]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	4b90      	ldr	r3, [pc, #576]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x98>
 80034e6:	4a8b      	ldr	r2, [pc, #556]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4a88      	ldr	r2, [pc, #544]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	4b87      	ldr	r3, [pc, #540]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 8003500:	4a84      	ldr	r2, [pc, #528]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003502:	4b84      	ldr	r3, [pc, #528]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4a81      	ldr	r2, [pc, #516]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 800350e:	4b81      	ldr	r3, [pc, #516]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7ff f8b0 	bl	8002684 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7ff f8ac 	bl	8002684 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e204      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xc0>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7ff f89c 	bl	8002684 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003550:	f7ff f898 	bl	8002684 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1f0      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0xe8>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b62      	ldr	r3, [pc, #392]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d11c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	4b5c      	ldr	r3, [pc, #368]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e1c4      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4956      	ldr	r1, [pc, #344]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	4b55      	ldr	r3, [pc, #340]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	e03a      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d8:	4b4f      	ldr	r3, [pc, #316]	; (8003718 <HAL_RCC_OscConfig+0x2b0>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7ff f851 	bl	8002684 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e6:	f7ff f84d 	bl	8002684 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1a5      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	4b46      	ldr	r3, [pc, #280]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4943      	ldr	r1, [pc, #268]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	4b43      	ldr	r3, [pc, #268]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	e015      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_RCC_OscConfig+0x2b0>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7ff f830 	bl	8002684 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003628:	f7ff f82c 	bl	8002684 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e184      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d030      	beq.n	80036b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b30      	ldr	r3, [pc, #192]	; (800371c <HAL_RCC_OscConfig+0x2b4>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7ff f810 	bl	8002684 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003668:	f7ff f80c 	bl	8002684 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e164      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x200>
 8003686:	e015      	b.n	80036b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_OscConfig+0x2b4>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fe fff9 	bl	8002684 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003696:	f7fe fff5 	bl	8002684 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e14d      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80036aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a0 	beq.w	8003802 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x2b8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d121      	bne.n	8003742 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <HAL_RCC_OscConfig+0x2b8>)
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RCC_OscConfig+0x2b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370a:	f7fe ffbb 	bl	8002684 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	e011      	b.n	8003736 <HAL_RCC_OscConfig+0x2ce>
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	42470000 	.word	0x42470000
 800371c:	42470e80 	.word	0x42470e80
 8003720:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fe ffae 	bl	8002684 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e106      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b85      	ldr	r3, [pc, #532]	; (800394c <HAL_RCC_OscConfig+0x4e4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x2f0>
 800374a:	4a81      	ldr	r2, [pc, #516]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800374c:	4b80      	ldr	r3, [pc, #512]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	e01c      	b.n	8003792 <HAL_RCC_OscConfig+0x32a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b05      	cmp	r3, #5
 800375e:	d10c      	bne.n	800377a <HAL_RCC_OscConfig+0x312>
 8003760:	4a7b      	ldr	r2, [pc, #492]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 8003762:	4b7b      	ldr	r3, [pc, #492]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4a78      	ldr	r2, [pc, #480]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800376e:	4b78      	ldr	r3, [pc, #480]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
 8003778:	e00b      	b.n	8003792 <HAL_RCC_OscConfig+0x32a>
 800377a:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800377c:	4b74      	ldr	r3, [pc, #464]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6713      	str	r3, [r2, #112]	; 0x70
 8003786:	4a72      	ldr	r2, [pc, #456]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 8003788:	4b71      	ldr	r3, [pc, #452]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f023 0304 	bic.w	r3, r3, #4
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d015      	beq.n	80037c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fe ff73 	bl	8002684 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe ff6f 	bl	8002684 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e0c5      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ee      	beq.n	80037a2 <HAL_RCC_OscConfig+0x33a>
 80037c4:	e014      	b.n	80037f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fe ff5d 	bl	8002684 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fe ff59 	bl	8002684 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0af      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	4b5a      	ldr	r3, [pc, #360]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ee      	bne.n	80037ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4a56      	ldr	r2, [pc, #344]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 80037f8:	4b55      	ldr	r3, [pc, #340]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 809b 	beq.w	8003942 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d05c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d141      	bne.n	80038a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCC_OscConfig+0x4ec>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe ff2d 	bl	8002684 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382e:	f7fe ff29 	bl	8002684 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e081      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800384c:	4940      	ldr	r1, [pc, #256]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003876:	4b37      	ldr	r3, [pc, #220]	; (8003954 <HAL_RCC_OscConfig+0x4ec>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe ff02 	bl	8002684 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003884:	f7fe fefe 	bl	8002684 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e056      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x41c>
 80038a2:	e04e      	b.n	8003942 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_OscConfig+0x4ec>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe feeb 	bl	8002684 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fe fee7 	bl	8002684 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e03f      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c4:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x44a>
 80038d0:	e037      	b.n	8003942 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e032      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <HAL_RCC_OscConfig+0x4e8>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d028      	beq.n	800393e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d121      	bne.n	800393e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d11a      	bne.n	800393e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800390e:	4013      	ands	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003914:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003916:	4293      	cmp	r3, r2
 8003918:	d111      	bne.n	800393e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d107      	bne.n	800393e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40007000 	.word	0x40007000
 8003950:	40023800 	.word	0x40023800
 8003954:	42470060 	.word	0x42470060

08003958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0cc      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b68      	ldr	r3, [pc, #416]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0207 	and.w	r2, r3, #7
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d20c      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b65      	ldr	r3, [pc, #404]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0207 	and.w	r2, r3, #7
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ac:	4a59      	ldr	r2, [pc, #356]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c4:	4a53      	ldr	r2, [pc, #332]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4950      	ldr	r1, [pc, #320]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d044      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d119      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e06f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e067      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a36:	4937      	ldr	r1, [pc, #220]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 0203 	bic.w	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a48:	f7fe fe1c 	bl	8002684 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fe fe18 	bl	8002684 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e04f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 020c 	and.w	r2, r3, #12
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1eb      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0207 	and.w	r2, r3, #7
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d90c      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0207 	and.w	r2, r3, #7
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4919      	ldr	r1, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aca:	4912      	ldr	r1, [pc, #72]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ade:	f000 f821 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	fa21 f303 	lsr.w	r3, r1, r3
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fd7c 	bl	80025fc <HAL_InitTick>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023c00 	.word	0x40023c00
 8003b14:	40023800 	.word	0x40023800
 8003b18:	08007350 	.word	0x08007350
 8003b1c:	20000044 	.word	0x20000044
 8003b20:	20000048 	.word	0x20000048

08003b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	b08f      	sub	sp, #60	; 0x3c
 8003b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b30:	2300      	movs	r3, #0
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
 8003b34:	2300      	movs	r3, #0
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3c:	4b62      	ldr	r3, [pc, #392]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d007      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x34>
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 80b2 	bne.w	8003cb6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b52:	4b5e      	ldr	r3, [pc, #376]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8003b56:	e0b1      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b58:	4b5d      	ldr	r3, [pc, #372]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b5c:	e0ae      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b5e:	4b5a      	ldr	r3, [pc, #360]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b68:	4b57      	ldr	r3, [pc, #348]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d04e      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b74:	4b54      	ldr	r3, [pc, #336]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	ea01 0103 	and.w	r1, r1, r3
 8003b8a:	ea02 0204 	and.w	r2, r2, r4
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4614      	mov	r4, r2
 8003b92:	0160      	lsls	r0, r4, #5
 8003b94:	6278      	str	r0, [r7, #36]	; 0x24
 8003b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b98:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24
 8003b9e:	015b      	lsls	r3, r3, #5
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003ba6:	1a5b      	subs	r3, r3, r1
 8003ba8:	eb64 0402 	sbc.w	r4, r4, r2
 8003bac:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003bb0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003bb4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003bb8:	ebb8 0803 	subs.w	r8, r8, r3
 8003bbc:	eb69 0904 	sbc.w	r9, r9, r4
 8003bc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003bd8:	eb18 0801 	adds.w	r8, r8, r1
 8003bdc:	eb49 0902 	adc.w	r9, r9, r2
 8003be0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003bf8:	4640      	mov	r0, r8
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	f04f 0400 	mov.w	r4, #0
 8003c02:	461a      	mov	r2, r3
 8003c04:	4623      	mov	r3, r4
 8003c06:	f7fc ffd3 	bl	8000bb0 <__aeabi_uldivmod>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c10:	e043      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	ea01 0103 	and.w	r1, r1, r3
 8003c28:	ea02 0204 	and.w	r2, r2, r4
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4614      	mov	r4, r2
 8003c30:	0160      	lsls	r0, r4, #5
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	015b      	lsls	r3, r3, #5
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003c44:	1a5b      	subs	r3, r3, r1
 8003c46:	eb64 0402 	sbc.w	r4, r4, r2
 8003c4a:	01a6      	lsls	r6, r4, #6
 8003c4c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003c50:	019d      	lsls	r5, r3, #6
 8003c52:	1aed      	subs	r5, r5, r3
 8003c54:	eb66 0604 	sbc.w	r6, r6, r4
 8003c58:	00f3      	lsls	r3, r6, #3
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	00eb      	lsls	r3, r5, #3
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003c6c:	186d      	adds	r5, r5, r1
 8003c6e:	eb46 0602 	adc.w	r6, r6, r2
 8003c72:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003c76:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8003c7a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003c7e:	4655      	mov	r5, sl
 8003c80:	465e      	mov	r6, fp
 8003c82:	4628      	mov	r0, r5
 8003c84:	4631      	mov	r1, r6
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7fc ff8e 	bl	8000bb0 <__aeabi_uldivmod>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8003caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	373c      	adds	r7, #60	; 0x3c
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	007a1200 	.word	0x007a1200

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000044 	.word	0x20000044

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	08007360 	.word	0x08007360

08003d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d18:	f7ff ffdc 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0b5b      	lsrs	r3, r3, #13
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2a:	5cd3      	ldrb	r3, [r2, r3]
 8003d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	08007360 	.word	0x08007360

08003d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07a      	b.n	8003e44 <HAL_SPI_Init+0x108>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5e:	d009      	beq.n	8003d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
 8003d66:	e005      	b.n	8003d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fe fa80 	bl	8002294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6852      	ldr	r2, [r2, #4]
 8003db4:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6892      	ldr	r2, [r2, #8]
 8003dbc:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003dc0:	4311      	orrs	r1, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68d2      	ldr	r2, [r2, #12]
 8003dc6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6912      	ldr	r2, [r2, #16]
 8003dd0:	f002 0202 	and.w	r2, r2, #2
 8003dd4:	4311      	orrs	r1, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6952      	ldr	r2, [r2, #20]
 8003dda:	f002 0201 	and.w	r2, r2, #1
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6992      	ldr	r2, [r2, #24]
 8003de4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003de8:	4311      	orrs	r1, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	69d2      	ldr	r2, [r2, #28]
 8003dee:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6a12      	ldr	r2, [r2, #32]
 8003df8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e02:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6992      	ldr	r2, [r2, #24]
 8003e12:	0c12      	lsrs	r2, r2, #16
 8003e14:	f002 0104 	and.w	r1, r2, #4
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1c:	f002 0210 	and.w	r2, r2, #16
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	69d2      	ldr	r2, [r2, #28]
 8003e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x26>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e188      	b.n	8004184 <HAL_SPI_TransmitReceive+0x338>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7a:	f7fe fc03 	bl	8002684 <HAL_GetTick>
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d00f      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x70>
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d107      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x68>
 8003eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d003      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eba:	e159      	b.n	8004170 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x82>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x82>
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ed4:	e14c      	b.n	8004170 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d003      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	887a      	ldrh	r2, [r7, #2]
 8003efa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d007      	beq.n	8003f3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d178      	bne.n	800403a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x10a>
 8003f50:	8b7b      	ldrh	r3, [r7, #26]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d166      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f7a:	e053      	b.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d11b      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x176>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d016      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x176>
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d113      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d119      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x1b8>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d014      	beq.n	8004004 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	68d2      	ldr	r2, [r2, #12]
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004000:	2301      	movs	r3, #1
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004004:	f7fe fb3e 	bl	8002684 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	1ad2      	subs	r2, r2, r3
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	429a      	cmp	r2, r3
 8004012:	d307      	bcc.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401a:	d003      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004022:	e0a5      	b.n	8004170 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1a6      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x130>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1a1      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x130>
 8004038:	e07c      	b.n	8004134 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x1fc>
 8004042:	8b7b      	ldrh	r3, [r7, #26]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d16b      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004052:	7812      	ldrb	r2, [r2, #0]
 8004054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406e:	e057      	b.n	8004120 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d11c      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x26c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x26c>
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d114      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d119      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x2ae>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d014      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	68d2      	ldr	r2, [r2, #12]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f6:	2301      	movs	r3, #1
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040fa:	f7fe fac3 	bl	8002684 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	429a      	cmp	r2, r3
 8004108:	d303      	bcc.n	8004112 <HAL_SPI_TransmitReceive+0x2c6>
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004110:	d102      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x2cc>
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800411e:	e027      	b.n	8004170 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1a2      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x224>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d19d      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f8af 	bl	800429c <SPI_EndRxTxTransaction>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004150:	e00e      	b.n	8004170 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800419c:	f7fe fa72 	bl	8002684 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	1a9a      	subs	r2, r3, r2
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	4413      	add	r3, r2
 80041aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041ac:	f7fe fa6a 	bl	8002684 <HAL_GetTick>
 80041b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041b2:	4b39      	ldr	r3, [pc, #228]	; (8004298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	0d1b      	lsrs	r3, r3, #20
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c2:	e054      	b.n	800426e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ca:	d050      	beq.n	800426e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041cc:	f7fe fa5a 	bl	8002684 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	1ad2      	subs	r2, r2, r3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d202      	bcs.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d13d      	bne.n	800425e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	6852      	ldr	r2, [r2, #4]
 80041ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fa:	d111      	bne.n	8004220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	d004      	beq.n	8004210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420e:	d107      	bne.n	8004220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004228:	d10f      	bne.n	800424a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e017      	b.n	800428e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	3b01      	subs	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	401a      	ands	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	429a      	cmp	r2, r3
 800428a:	d19b      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000044 	.word	0x20000044

0800429c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <SPI_EndRxTxTransaction+0x7c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <SPI_EndRxTxTransaction+0x80>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0d5b      	lsrs	r3, r3, #21
 80042b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c6:	d112      	bne.n	80042ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff5a 	bl	800418c <SPI_WaitFlagStateUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00f      	b.n	800430e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d0f2      	beq.n	80042ee <SPI_EndRxTxTransaction+0x52>
 8004308:	e000      	b.n	800430c <SPI_EndRxTxTransaction+0x70>
        break;
 800430a:	bf00      	nop
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000044 	.word	0x20000044
 800431c:	165e9f81 	.word	0x165e9f81

08004320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e03f      	b.n	80043b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd ffec 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2224      	movs	r2, #36	; 0x24
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	68d2      	ldr	r2, [r2, #12]
 800435e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fe87 	bl	8005078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	6912      	ldr	r2, [r2, #16]
 8004374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	6952      	ldr	r2, [r2, #20]
 8004384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	68d2      	ldr	r2, [r2, #12]
 8004394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08a      	sub	sp, #40	; 0x28
 80043be:	af02      	add	r7, sp, #8
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d17b      	bne.n	80044d2 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_UART_Transmit+0x2c>
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e074      	b.n	80044d4 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_UART_Transmit+0x3e>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e06d      	b.n	80044d4 <HAL_UART_Transmit+0x11a>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2221      	movs	r2, #33	; 0x21
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800440e:	f7fe f939 	bl	8002684 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	88fa      	ldrh	r2, [r7, #6]
 800441e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d108      	bne.n	800443c <HAL_UART_Transmit+0x82>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e003      	b.n	8004444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800444c:	e029      	b.n	80044a2 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	2180      	movs	r1, #128	; 0x80
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fc08 	bl	8004c6e <UART_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e035      	b.n	80044d4 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	8812      	ldrh	r2, [r2, #0]
 8004476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800447a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	3302      	adds	r3, #2
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e007      	b.n	8004494 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	7812      	ldrb	r2, [r2, #0]
 800448c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1d0      	bne.n	800444e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fbd9 	bl	8004c6e <UART_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e006      	b.n	80044d4 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d153      	bne.n	800459e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Transmit_DMA+0x26>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e04c      	b.n	80045a0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_UART_Transmit_DMA+0x38>
 8004510:	2302      	movs	r3, #2
 8004512:	e045      	b.n	80045a0 <HAL_UART_Transmit_DMA+0xc4>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2221      	movs	r2, #33	; 0x21
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <HAL_UART_Transmit_DMA+0xcc>)
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_UART_Transmit_DMA+0xd0>)
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_UART_Transmit_DMA+0xd4>)
 8004552:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	2200      	movs	r2, #0
 800455a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800455c:	f107 0308 	add.w	r3, r7, #8
 8004560:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3304      	adds	r3, #4
 8004570:	461a      	mov	r2, r3
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	f7fe fa72 	bl	8002a5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004580:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	6952      	ldr	r2, [r2, #20]
 8004594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004598:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	08004aa1 	.word	0x08004aa1
 80045ac:	08004af3 	.word	0x08004af3
 80045b0:	08004bdb 	.word	0x08004bdb

080045b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d11d      	bne.n	800460a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_Receive_DMA+0x26>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e016      	b.n	800460c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Receive_DMA+0x38>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e00f      	b.n	800460c <HAL_UART_Receive_DMA+0x58>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fb7f 	bl	8004d04 <UART_Start_Receive_DMA>
 8004606:	4603      	mov	r3, r0
 8004608:	e000      	b.n	800460c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	bf0c      	ite	eq
 800462e:	2301      	moveq	r3, #1
 8004630:	2300      	movne	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b21      	cmp	r3, #33	; 0x21
 8004640:	d116      	bne.n	8004670 <HAL_UART_DMAStop+0x5c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d013      	beq.n	8004670 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	6952      	ldr	r2, [r2, #20]
 8004652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004656:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fa51 	bl	8002b0c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fbae 	bl	8004dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b22      	cmp	r3, #34	; 0x22
 8004690:	d116      	bne.n	80046c0 <HAL_UART_DMAStop+0xac>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	6952      	ldr	r2, [r2, #20]
 80046a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fa29 	bl	8002b0c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fb9c 	bl	8004df8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x52>
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fc16 	bl	8004f48 <UART_Receive_IT>
      return;
 800471c:	e17d      	b.n	8004a1a <HAL_UART_IRQHandler+0x34e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80b1 	beq.w	8004888 <HAL_UART_IRQHandler+0x1bc>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <HAL_UART_IRQHandler+0x70>
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80a6 	beq.w	8004888 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_UART_IRQHandler+0x90>
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f043 0201 	orr.w	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_UART_IRQHandler+0xb0>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f043 0202 	orr.w	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_UART_IRQHandler+0xd0>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00f      	beq.n	80047c6 <HAL_UART_IRQHandler+0xfa>
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_UART_IRQHandler+0xee>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f043 0208 	orr.w	r2, r3, #8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8120 	beq.w	8004a10 <HAL_UART_IRQHandler+0x344>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_UART_IRQHandler+0x11e>
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fbaf 	bl	8004f48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <HAL_UART_IRQHandler+0x146>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d031      	beq.n	8004876 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 faf0 	bl	8004df8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d123      	bne.n	800486e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	6952      	ldr	r2, [r2, #20]
 8004830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004834:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	2b00      	cmp	r3, #0
 800483c:	d013      	beq.n	8004866 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	4a77      	ldr	r2, [pc, #476]	; (8004a20 <HAL_UART_IRQHandler+0x354>)
 8004844:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe f9ce 	bl	8002bec <HAL_DMA_Abort_IT>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004860:	4610      	mov	r0, r2
 8004862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004864:	e00e      	b.n	8004884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f904 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486c:	e00a      	b.n	8004884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f900 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	e006      	b.n	8004884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8fc 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004882:	e0c5      	b.n	8004a10 <HAL_UART_IRQHandler+0x344>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	bf00      	nop
    return;
 8004886:	e0c3      	b.n	8004a10 <HAL_UART_IRQHandler+0x344>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 80a2 	bne.w	80049d6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 809c 	beq.w	80049d6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8096 	beq.w	80049d6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d14f      	bne.n	800496e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 80048d8:	8a7b      	ldrh	r3, [r7, #18]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 809a 	beq.w	8004a14 <HAL_UART_IRQHandler+0x348>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048e4:	8a7a      	ldrh	r2, [r7, #18]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	f080 8094 	bcs.w	8004a14 <HAL_UART_IRQHandler+0x348>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8a7a      	ldrh	r2, [r7, #18]
 80048f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fc:	d02b      	beq.n	8004956 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	68d2      	ldr	r2, [r2, #12]
 8004908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800490c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	6952      	ldr	r2, [r2, #20]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	6952      	ldr	r2, [r2, #20]
 8004928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	f022 0210 	bic.w	r2, r2, #16
 800494a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe f8db 	bl	8002b0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800495e:	b29b      	uxth	r3, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f88e 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800496c:	e052      	b.n	8004a14 <HAL_UART_IRQHandler+0x348>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004976:	b29b      	uxth	r3, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d048      	beq.n	8004a18 <HAL_UART_IRQHandler+0x34c>
          &&(nb_rx_data > 0U) )
 8004986:	8a3b      	ldrh	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d045      	beq.n	8004a18 <HAL_UART_IRQHandler+0x34c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800499a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	6952      	ldr	r2, [r2, #20]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	68d2      	ldr	r2, [r2, #12]
 80049c4:	f022 0210 	bic.w	r2, r2, #16
 80049c8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ca:	8a3b      	ldrh	r3, [r7, #16]
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f85a 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049d4:	e020      	b.n	8004a18 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_UART_IRQHandler+0x326>
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa45 	bl	8004e7a <UART_Transmit_IT>
    return;
 80049f0:	e013      	b.n	8004a1a <HAL_UART_IRQHandler+0x34e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00e      	beq.n	8004a1a <HAL_UART_IRQHandler+0x34e>
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_UART_IRQHandler+0x34e>
  {
    UART_EndTransmit_IT(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa86 	bl	8004f18 <UART_EndTransmit_IT>
    return;
 8004a0c:	bf00      	nop
 8004a0e:	e004      	b.n	8004a1a <HAL_UART_IRQHandler+0x34e>
    return;
 8004a10:	bf00      	nop
 8004a12:	e002      	b.n	8004a1a <HAL_UART_IRQHandler+0x34e>
      return;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_UART_IRQHandler+0x34e>
      return;
 8004a18:	bf00      	nop
  }
}
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	08004e53 	.word	0x08004e53

08004a24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d113      	bne.n	8004ae4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	6952      	ldr	r2, [r2, #20]
 8004acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	68d2      	ldr	r2, [r2, #12]
 8004adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ae2:	e002      	b.n	8004aea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff9d 	bl	8004a24 <HAL_UART_TxCpltCallback>
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff ff99 	bl	8004a38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d12a      	bne.n	8004b80 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	68d2      	ldr	r2, [r2, #12]
 8004b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b3e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	6952      	ldr	r2, [r2, #20]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	6952      	ldr	r2, [r2, #20]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	68d2      	ldr	r2, [r2, #12]
 8004b7a:	f022 0210 	bic.w	r2, r2, #16
 8004b7e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d106      	bne.n	8004b96 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff7a 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b94:	e002      	b.n	8004b9c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ff58 	bl	8004a4c <HAL_UART_RxCpltCallback>
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d108      	bne.n	8004bcc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff ff5f 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bca:	e002      	b.n	8004bd2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ff47 	bl	8004a60 <HAL_UART_RxHalfCpltCallback>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b21      	cmp	r3, #33	; 0x21
 8004c0c:	d108      	bne.n	8004c20 <UART_DMAError+0x46>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2200      	movs	r2, #0
 8004c18:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c1a:	68b8      	ldr	r0, [r7, #8]
 8004c1c:	f000 f8d6 	bl	8004dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b22      	cmp	r3, #34	; 0x22
 8004c40:	d108      	bne.n	8004c54 <UART_DMAError+0x7a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c4e:	68b8      	ldr	r0, [r7, #8]
 8004c50:	f000 f8d2 	bl	8004df8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f043 0210 	orr.w	r2, r3, #16
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c60:	68b8      	ldr	r0, [r7, #8]
 8004c62:	f7ff ff07 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7e:	e02c      	b.n	8004cda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c86:	d028      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c8e:	f7fd fcf9 	bl	8002684 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d91d      	bls.n	8004cda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	68d2      	ldr	r2, [r2, #12]
 8004ca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	6952      	ldr	r2, [r2, #20]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00f      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0c3      	beq.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2222      	movs	r2, #34	; 0x22
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <UART_Start_Receive_DMA+0xbc>)
 8004d32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <UART_Start_Receive_DMA+0xc0>)
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <UART_Start_Receive_DMA+0xc4>)
 8004d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	2200      	movs	r2, #0
 8004d4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d4c:	f107 0308 	add.w	r3, r7, #8
 8004d50:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	f7fd fe7a 	bl	8002a5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	68d2      	ldr	r2, [r2, #12]
 8004d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	6952      	ldr	r2, [r2, #20]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	6952      	ldr	r2, [r2, #20]
 8004db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	08004b0f 	.word	0x08004b0f
 8004dc4:	08004ba5 	.word	0x08004ba5
 8004dc8:	08004bdb 	.word	0x08004bdb

08004dcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004de2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	68d2      	ldr	r2, [r2, #12]
 8004e0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	6952      	ldr	r2, [r2, #20]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d107      	bne.n	8004e38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	f022 0210 	bic.w	r2, r2, #16
 8004e36:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7ff fe01 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b21      	cmp	r3, #33	; 0x21
 8004e8c:	d13d      	bne.n	8004f0a <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e96:	d113      	bne.n	8004ec0 <UART_Transmit_IT+0x46>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10f      	bne.n	8004ec0 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	8812      	ldrh	r2, [r2, #0]
 8004eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]
 8004ebe:	e008      	b.n	8004ed2 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	1c58      	adds	r0, r3, #1
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	6208      	str	r0, [r1, #32]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10f      	bne.n	8004f06 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	68d2      	ldr	r2, [r2, #12]
 8004ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	68d2      	ldr	r2, [r2, #12]
 8004f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
  }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fd73 	bl	8004a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b22      	cmp	r3, #34	; 0x22
 8004f5a:	f040 8087 	bne.w	800506c <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f66:	d117      	bne.n	8004f98 <UART_Receive_IT+0x50>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d113      	bne.n	8004f98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	629a      	str	r2, [r3, #40]	; 0x28
 8004f96:	e026      	b.n	8004fe6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004faa:	d007      	beq.n	8004fbc <UART_Receive_IT+0x74>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <UART_Receive_IT+0x82>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e008      	b.n	8004fdc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d136      	bne.n	8005068 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	68d2      	ldr	r2, [r2, #12]
 8005004:	f022 0220 	bic.w	r2, r2, #32
 8005008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	68d2      	ldr	r2, [r2, #12]
 8005014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	6952      	ldr	r2, [r2, #20]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10e      	bne.n	8005058 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	68d2      	ldr	r2, [r2, #12]
 8005044:	f022 0210 	bic.w	r2, r2, #16
 8005048:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fd19 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
 8005056:	e002      	b.n	800505e <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fcf7 	bl	8004a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e002      	b.n	800506e <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	e000      	b.n	800506e <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	b091      	sub	sp, #68	; 0x44
 800507e:	af00      	add	r7, sp, #0
 8005080:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	6819      	ldr	r1, [r3, #0]
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80050be:	f022 020c 	bic.w	r2, r2, #12
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4bba      	ldr	r3, [pc, #744]	; (80053cc <UART_SetConfig+0x354>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d004      	beq.n	80050f2 <UART_SetConfig+0x7a>
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4bb8      	ldr	r3, [pc, #736]	; (80053d0 <UART_SetConfig+0x358>)
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d103      	bne.n	80050fa <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050f2:	f7fe fe0f 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 80050f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80050f8:	e002      	b.n	8005100 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050fa:	f7fe fdf7 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 80050fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	f040 80a7 	bne.w	800525a <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	62ba      	str	r2, [r7, #40]	; 0x28
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	4619      	mov	r1, r3
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	460b      	mov	r3, r1
 800511c:	4614      	mov	r4, r2
 800511e:	18db      	adds	r3, r3, r3
 8005120:	eb44 0404 	adc.w	r4, r4, r4
 8005124:	185b      	adds	r3, r3, r1
 8005126:	eb44 0402 	adc.w	r4, r4, r2
 800512a:	00e0      	lsls	r0, r4, #3
 800512c:	6178      	str	r0, [r7, #20]
 800512e:	6978      	ldr	r0, [r7, #20]
 8005130:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005134:	6178      	str	r0, [r7, #20]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800513e:	185d      	adds	r5, r3, r1
 8005140:	eb44 0602 	adc.w	r6, r4, r2
 8005144:	4628      	mov	r0, r5
 8005146:	4631      	mov	r1, r6
 8005148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f04f 0400 	mov.w	r4, #0
 8005150:	18db      	adds	r3, r3, r3
 8005152:	eb44 0404 	adc.w	r4, r4, r4
 8005156:	461a      	mov	r2, r3
 8005158:	4623      	mov	r3, r4
 800515a:	f7fb fd29 	bl	8000bb0 <__aeabi_uldivmod>
 800515e:	4603      	mov	r3, r0
 8005160:	460c      	mov	r4, r1
 8005162:	461a      	mov	r2, r3
 8005164:	4b9b      	ldr	r3, [pc, #620]	; (80053d4 <UART_SetConfig+0x35c>)
 8005166:	fba3 2302 	umull	r2, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	011e      	lsls	r6, r3, #4
 800516e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005170:	4619      	mov	r1, r3
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	460b      	mov	r3, r1
 8005178:	4614      	mov	r4, r2
 800517a:	18db      	adds	r3, r3, r3
 800517c:	eb44 0404 	adc.w	r4, r4, r4
 8005180:	185b      	adds	r3, r3, r1
 8005182:	eb44 0402 	adc.w	r4, r4, r2
 8005186:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800518a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800518e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8005192:	4653      	mov	r3, sl
 8005194:	465c      	mov	r4, fp
 8005196:	eb13 0a01 	adds.w	sl, r3, r1
 800519a:	eb44 0b02 	adc.w	fp, r4, r2
 800519e:	4650      	mov	r0, sl
 80051a0:	4659      	mov	r1, fp
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f04f 0400 	mov.w	r4, #0
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	eb44 0404 	adc.w	r4, r4, r4
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	f7fb fcfc 	bl	8000bb0 <__aeabi_uldivmod>
 80051b8:	4603      	mov	r3, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	461a      	mov	r2, r3
 80051be:	4b85      	ldr	r3, [pc, #532]	; (80053d4 <UART_SetConfig+0x35c>)
 80051c0:	fba3 1302 	umull	r1, r3, r3, r2
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	2164      	movs	r1, #100	; 0x64
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	3332      	adds	r3, #50	; 0x32
 80051d2:	4a80      	ldr	r2, [pc, #512]	; (80053d4 <UART_SetConfig+0x35c>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e0:	441e      	add	r6, r3
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	18db      	adds	r3, r3, r3
 80051f0:	eb44 0404 	adc.w	r4, r4, r4
 80051f4:	185b      	adds	r3, r3, r1
 80051f6:	eb44 0402 	adc.w	r4, r4, r2
 80051fa:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80051fe:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005202:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8005206:	4643      	mov	r3, r8
 8005208:	464c      	mov	r4, r9
 800520a:	eb13 0801 	adds.w	r8, r3, r1
 800520e:	eb44 0902 	adc.w	r9, r4, r2
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f04f 0400 	mov.w	r4, #0
 800521e:	18db      	adds	r3, r3, r3
 8005220:	eb44 0404 	adc.w	r4, r4, r4
 8005224:	461a      	mov	r2, r3
 8005226:	4623      	mov	r3, r4
 8005228:	f7fb fcc2 	bl	8000bb0 <__aeabi_uldivmod>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	461a      	mov	r2, r3
 8005232:	4b68      	ldr	r3, [pc, #416]	; (80053d4 <UART_SetConfig+0x35c>)
 8005234:	fba3 1302 	umull	r1, r3, r3, r2
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	2164      	movs	r1, #100	; 0x64
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	3332      	adds	r3, #50	; 0x32
 8005246:	4a63      	ldr	r2, [pc, #396]	; (80053d4 <UART_SetConfig+0x35c>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	4433      	add	r3, r6
 8005254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005256:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005258:	e0b3      	b.n	80053c2 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	4619      	mov	r1, r3
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	460b      	mov	r3, r1
 800526a:	4614      	mov	r4, r2
 800526c:	18db      	adds	r3, r3, r3
 800526e:	eb44 0404 	adc.w	r4, r4, r4
 8005272:	185b      	adds	r3, r3, r1
 8005274:	eb44 0402 	adc.w	r4, r4, r2
 8005278:	00e6      	lsls	r6, r4, #3
 800527a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800527e:	00dd      	lsls	r5, r3, #3
 8005280:	462b      	mov	r3, r5
 8005282:	4634      	mov	r4, r6
 8005284:	185d      	adds	r5, r3, r1
 8005286:	eb44 0602 	adc.w	r6, r4, r2
 800528a:	4628      	mov	r0, r5
 800528c:	4631      	mov	r1, r6
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f04f 0400 	mov.w	r4, #0
 8005296:	00a5      	lsls	r5, r4, #2
 8005298:	62fd      	str	r5, [r7, #44]	; 0x2c
 800529a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800529c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80052a0:	62fd      	str	r5, [r7, #44]	; 0x2c
 80052a2:	009c      	lsls	r4, r3, #2
 80052a4:	62bc      	str	r4, [r7, #40]	; 0x28
 80052a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052aa:	f7fb fc81 	bl	8000bb0 <__aeabi_uldivmod>
 80052ae:	4603      	mov	r3, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <UART_SetConfig+0x35c>)
 80052b6:	fba3 1302 	umull	r1, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	011d      	lsls	r5, r3, #4
 80052be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c0:	4619      	mov	r1, r3
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	18db      	adds	r3, r3, r3
 80052cc:	eb44 0404 	adc.w	r4, r4, r4
 80052d0:	185b      	adds	r3, r3, r1
 80052d2:	eb44 0402 	adc.w	r4, r4, r2
 80052d6:	00e0      	lsls	r0, r4, #3
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	00d8      	lsls	r0, r3, #3
 80052e4:	60b8      	str	r0, [r7, #8]
 80052e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052ea:	eb13 0801 	adds.w	r8, r3, r1
 80052ee:	eb44 0902 	adc.w	r9, r4, r2
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f04f 0400 	mov.w	r4, #0
 80052fe:	00a6      	lsls	r6, r4, #2
 8005300:	627e      	str	r6, [r7, #36]	; 0x24
 8005302:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8005304:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8005308:	627e      	str	r6, [r7, #36]	; 0x24
 800530a:	009c      	lsls	r4, r3, #2
 800530c:	623c      	str	r4, [r7, #32]
 800530e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005312:	f7fb fc4d 	bl	8000bb0 <__aeabi_uldivmod>
 8005316:	4603      	mov	r3, r0
 8005318:	460c      	mov	r4, r1
 800531a:	461a      	mov	r2, r3
 800531c:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <UART_SetConfig+0x35c>)
 800531e:	fba3 1302 	umull	r1, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2164      	movs	r1, #100	; 0x64
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	; 0x32
 8005330:	4a28      	ldr	r2, [pc, #160]	; (80053d4 <UART_SetConfig+0x35c>)
 8005332:	fba2 1303 	umull	r1, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533c:	441d      	add	r5, r3
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005340:	4619      	mov	r1, r3
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	460b      	mov	r3, r1
 8005348:	4614      	mov	r4, r2
 800534a:	18db      	adds	r3, r3, r3
 800534c:	eb44 0404 	adc.w	r4, r4, r4
 8005350:	185b      	adds	r3, r3, r1
 8005352:	eb44 0402 	adc.w	r4, r4, r2
 8005356:	00e0      	lsls	r0, r4, #3
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	00d8      	lsls	r0, r3, #3
 8005364:	6038      	str	r0, [r7, #0]
 8005366:	e897 0018 	ldmia.w	r7, {r3, r4}
 800536a:	eb13 0801 	adds.w	r8, r3, r1
 800536e:	eb44 0902 	adc.w	r9, r4, r2
 8005372:	4640      	mov	r0, r8
 8005374:	4649      	mov	r1, r9
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f04f 0400 	mov.w	r4, #0
 800537e:	00a6      	lsls	r6, r4, #2
 8005380:	61fe      	str	r6, [r7, #28]
 8005382:	69fe      	ldr	r6, [r7, #28]
 8005384:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8005388:	61fe      	str	r6, [r7, #28]
 800538a:	009c      	lsls	r4, r3, #2
 800538c:	61bc      	str	r4, [r7, #24]
 800538e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005392:	f7fb fc0d 	bl	8000bb0 <__aeabi_uldivmod>
 8005396:	4603      	mov	r3, r0
 8005398:	460c      	mov	r4, r1
 800539a:	461a      	mov	r2, r3
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <UART_SetConfig+0x35c>)
 800539e:	fba3 1302 	umull	r1, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2164      	movs	r1, #100	; 0x64
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	3332      	adds	r3, #50	; 0x32
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <UART_SetConfig+0x35c>)
 80053b2:	fba2 1303 	umull	r1, r3, r2, r3
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	442b      	add	r3, r5
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	6093      	str	r3, [r2, #8]
}
 80053c2:	bf00      	nop
 80053c4:	3744      	adds	r7, #68	; 0x44
 80053c6:	46bd      	mov	sp, r7
 80053c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053cc:	40011000 	.word	0x40011000
 80053d0:	40011400 	.word	0x40011400
 80053d4:	51eb851f 	.word	0x51eb851f

080053d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80053d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053dc:	480d      	ldr	r0, [pc, #52]	; (8005414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053de:	490e      	ldr	r1, [pc, #56]	; (8005418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053e0:	4a0e      	ldr	r2, [pc, #56]	; (800541c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053e4:	e002      	b.n	80053ec <LoopCopyDataInit>

080053e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053ea:	3304      	adds	r3, #4

080053ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053f0:	d3f9      	bcc.n	80053e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053f2:	4a0b      	ldr	r2, [pc, #44]	; (8005420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053f4:	4c0b      	ldr	r4, [pc, #44]	; (8005424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80053f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053f8:	e001      	b.n	80053fe <LoopFillZerobss>

080053fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053fc:	3204      	adds	r2, #4

080053fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005400:	d3fb      	bcc.n	80053fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005402:	f7fd f8c7 	bl	8002594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005406:	f000 f81b 	bl	8005440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800540a:	f7fc f913 	bl	8001634 <main>
  bx  lr    
 800540e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005418:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800541c:	08007550 	.word	0x08007550
  ldr r2, =_sbss
 8005420:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8005424:	200004ac 	.word	0x200004ac

08005428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005428:	e7fe      	b.n	8005428 <ADC_IRQHandler>

0800542a <atoi>:
 800542a:	220a      	movs	r2, #10
 800542c:	2100      	movs	r1, #0
 800542e:	f000 b8d7 	b.w	80055e0 <strtol>
	...

08005434 <__errno>:
 8005434:	4b01      	ldr	r3, [pc, #4]	; (800543c <__errno+0x8>)
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000050 	.word	0x20000050

08005440 <__libc_init_array>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4e0d      	ldr	r6, [pc, #52]	; (8005478 <__libc_init_array+0x38>)
 8005444:	4c0d      	ldr	r4, [pc, #52]	; (800547c <__libc_init_array+0x3c>)
 8005446:	1ba4      	subs	r4, r4, r6
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	2500      	movs	r5, #0
 800544c:	42a5      	cmp	r5, r4
 800544e:	d109      	bne.n	8005464 <__libc_init_array+0x24>
 8005450:	4e0b      	ldr	r6, [pc, #44]	; (8005480 <__libc_init_array+0x40>)
 8005452:	4c0c      	ldr	r4, [pc, #48]	; (8005484 <__libc_init_array+0x44>)
 8005454:	f001 ff5c 	bl	8007310 <_init>
 8005458:	1ba4      	subs	r4, r4, r6
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	2500      	movs	r5, #0
 800545e:	42a5      	cmp	r5, r4
 8005460:	d105      	bne.n	800546e <__libc_init_array+0x2e>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005468:	4798      	blx	r3
 800546a:	3501      	adds	r5, #1
 800546c:	e7ee      	b.n	800544c <__libc_init_array+0xc>
 800546e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005472:	4798      	blx	r3
 8005474:	3501      	adds	r5, #1
 8005476:	e7f2      	b.n	800545e <__libc_init_array+0x1e>
 8005478:	08007548 	.word	0x08007548
 800547c:	08007548 	.word	0x08007548
 8005480:	08007548 	.word	0x08007548
 8005484:	0800754c 	.word	0x0800754c

08005488 <memset>:
 8005488:	4402      	add	r2, r0
 800548a:	4603      	mov	r3, r0
 800548c:	4293      	cmp	r3, r2
 800548e:	d100      	bne.n	8005492 <memset+0xa>
 8005490:	4770      	bx	lr
 8005492:	f803 1b01 	strb.w	r1, [r3], #1
 8005496:	e7f9      	b.n	800548c <memset+0x4>

08005498 <siprintf>:
 8005498:	b40e      	push	{r1, r2, r3}
 800549a:	b500      	push	{lr}
 800549c:	b09c      	sub	sp, #112	; 0x70
 800549e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80054a2:	ab1d      	add	r3, sp, #116	; 0x74
 80054a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80054a8:	9002      	str	r0, [sp, #8]
 80054aa:	9006      	str	r0, [sp, #24]
 80054ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054b0:	480a      	ldr	r0, [pc, #40]	; (80054dc <siprintf+0x44>)
 80054b2:	9104      	str	r1, [sp, #16]
 80054b4:	9107      	str	r1, [sp, #28]
 80054b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80054be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80054c2:	6800      	ldr	r0, [r0, #0]
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	a902      	add	r1, sp, #8
 80054c8:	f000 f910 	bl	80056ec <_svfiprintf_r>
 80054cc:	9b02      	ldr	r3, [sp, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	b01c      	add	sp, #112	; 0x70
 80054d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d8:	b003      	add	sp, #12
 80054da:	4770      	bx	lr
 80054dc:	20000050 	.word	0x20000050

080054e0 <_strtol_l.isra.0>:
 80054e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	4680      	mov	r8, r0
 80054e6:	4689      	mov	r9, r1
 80054e8:	4692      	mov	sl, r2
 80054ea:	461f      	mov	r7, r3
 80054ec:	468b      	mov	fp, r1
 80054ee:	465d      	mov	r5, fp
 80054f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054f6:	f000 f889 	bl	800560c <__locale_ctype_ptr_l>
 80054fa:	4420      	add	r0, r4
 80054fc:	7846      	ldrb	r6, [r0, #1]
 80054fe:	f016 0608 	ands.w	r6, r6, #8
 8005502:	d10b      	bne.n	800551c <_strtol_l.isra.0+0x3c>
 8005504:	2c2d      	cmp	r4, #45	; 0x2d
 8005506:	d10b      	bne.n	8005520 <_strtol_l.isra.0+0x40>
 8005508:	782c      	ldrb	r4, [r5, #0]
 800550a:	2601      	movs	r6, #1
 800550c:	f10b 0502 	add.w	r5, fp, #2
 8005510:	b167      	cbz	r7, 800552c <_strtol_l.isra.0+0x4c>
 8005512:	2f10      	cmp	r7, #16
 8005514:	d114      	bne.n	8005540 <_strtol_l.isra.0+0x60>
 8005516:	2c30      	cmp	r4, #48	; 0x30
 8005518:	d00a      	beq.n	8005530 <_strtol_l.isra.0+0x50>
 800551a:	e011      	b.n	8005540 <_strtol_l.isra.0+0x60>
 800551c:	46ab      	mov	fp, r5
 800551e:	e7e6      	b.n	80054ee <_strtol_l.isra.0+0xe>
 8005520:	2c2b      	cmp	r4, #43	; 0x2b
 8005522:	bf04      	itt	eq
 8005524:	782c      	ldrbeq	r4, [r5, #0]
 8005526:	f10b 0502 	addeq.w	r5, fp, #2
 800552a:	e7f1      	b.n	8005510 <_strtol_l.isra.0+0x30>
 800552c:	2c30      	cmp	r4, #48	; 0x30
 800552e:	d127      	bne.n	8005580 <_strtol_l.isra.0+0xa0>
 8005530:	782b      	ldrb	r3, [r5, #0]
 8005532:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005536:	2b58      	cmp	r3, #88	; 0x58
 8005538:	d14b      	bne.n	80055d2 <_strtol_l.isra.0+0xf2>
 800553a:	786c      	ldrb	r4, [r5, #1]
 800553c:	2710      	movs	r7, #16
 800553e:	3502      	adds	r5, #2
 8005540:	2e00      	cmp	r6, #0
 8005542:	bf0c      	ite	eq
 8005544:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005548:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800554c:	2200      	movs	r2, #0
 800554e:	fbb1 fef7 	udiv	lr, r1, r7
 8005552:	4610      	mov	r0, r2
 8005554:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005558:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800555c:	2b09      	cmp	r3, #9
 800555e:	d811      	bhi.n	8005584 <_strtol_l.isra.0+0xa4>
 8005560:	461c      	mov	r4, r3
 8005562:	42a7      	cmp	r7, r4
 8005564:	dd1d      	ble.n	80055a2 <_strtol_l.isra.0+0xc2>
 8005566:	1c53      	adds	r3, r2, #1
 8005568:	d007      	beq.n	800557a <_strtol_l.isra.0+0x9a>
 800556a:	4586      	cmp	lr, r0
 800556c:	d316      	bcc.n	800559c <_strtol_l.isra.0+0xbc>
 800556e:	d101      	bne.n	8005574 <_strtol_l.isra.0+0x94>
 8005570:	45a4      	cmp	ip, r4
 8005572:	db13      	blt.n	800559c <_strtol_l.isra.0+0xbc>
 8005574:	fb00 4007 	mla	r0, r0, r7, r4
 8005578:	2201      	movs	r2, #1
 800557a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800557e:	e7eb      	b.n	8005558 <_strtol_l.isra.0+0x78>
 8005580:	270a      	movs	r7, #10
 8005582:	e7dd      	b.n	8005540 <_strtol_l.isra.0+0x60>
 8005584:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005588:	2b19      	cmp	r3, #25
 800558a:	d801      	bhi.n	8005590 <_strtol_l.isra.0+0xb0>
 800558c:	3c37      	subs	r4, #55	; 0x37
 800558e:	e7e8      	b.n	8005562 <_strtol_l.isra.0+0x82>
 8005590:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005594:	2b19      	cmp	r3, #25
 8005596:	d804      	bhi.n	80055a2 <_strtol_l.isra.0+0xc2>
 8005598:	3c57      	subs	r4, #87	; 0x57
 800559a:	e7e2      	b.n	8005562 <_strtol_l.isra.0+0x82>
 800559c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a0:	e7eb      	b.n	800557a <_strtol_l.isra.0+0x9a>
 80055a2:	1c53      	adds	r3, r2, #1
 80055a4:	d108      	bne.n	80055b8 <_strtol_l.isra.0+0xd8>
 80055a6:	2322      	movs	r3, #34	; 0x22
 80055a8:	f8c8 3000 	str.w	r3, [r8]
 80055ac:	4608      	mov	r0, r1
 80055ae:	f1ba 0f00 	cmp.w	sl, #0
 80055b2:	d107      	bne.n	80055c4 <_strtol_l.isra.0+0xe4>
 80055b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b8:	b106      	cbz	r6, 80055bc <_strtol_l.isra.0+0xdc>
 80055ba:	4240      	negs	r0, r0
 80055bc:	f1ba 0f00 	cmp.w	sl, #0
 80055c0:	d00c      	beq.n	80055dc <_strtol_l.isra.0+0xfc>
 80055c2:	b122      	cbz	r2, 80055ce <_strtol_l.isra.0+0xee>
 80055c4:	3d01      	subs	r5, #1
 80055c6:	f8ca 5000 	str.w	r5, [sl]
 80055ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ce:	464d      	mov	r5, r9
 80055d0:	e7f9      	b.n	80055c6 <_strtol_l.isra.0+0xe6>
 80055d2:	2430      	movs	r4, #48	; 0x30
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	d1b3      	bne.n	8005540 <_strtol_l.isra.0+0x60>
 80055d8:	2708      	movs	r7, #8
 80055da:	e7b1      	b.n	8005540 <_strtol_l.isra.0+0x60>
 80055dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055e0 <strtol>:
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <strtol+0x24>)
 80055e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055e4:	681c      	ldr	r4, [r3, #0]
 80055e6:	4d08      	ldr	r5, [pc, #32]	; (8005608 <strtol+0x28>)
 80055e8:	6a23      	ldr	r3, [r4, #32]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf08      	it	eq
 80055ee:	462b      	moveq	r3, r5
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	460a      	mov	r2, r1
 80055f6:	4601      	mov	r1, r0
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7ff ff71 	bl	80054e0 <_strtol_l.isra.0>
 80055fe:	b003      	add	sp, #12
 8005600:	bd30      	pop	{r4, r5, pc}
 8005602:	bf00      	nop
 8005604:	20000050 	.word	0x20000050
 8005608:	200000b4 	.word	0x200000b4

0800560c <__locale_ctype_ptr_l>:
 800560c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005610:	4770      	bx	lr

08005612 <__ascii_mbtowc>:
 8005612:	b082      	sub	sp, #8
 8005614:	b901      	cbnz	r1, 8005618 <__ascii_mbtowc+0x6>
 8005616:	a901      	add	r1, sp, #4
 8005618:	b142      	cbz	r2, 800562c <__ascii_mbtowc+0x1a>
 800561a:	b14b      	cbz	r3, 8005630 <__ascii_mbtowc+0x1e>
 800561c:	7813      	ldrb	r3, [r2, #0]
 800561e:	600b      	str	r3, [r1, #0]
 8005620:	7812      	ldrb	r2, [r2, #0]
 8005622:	1c10      	adds	r0, r2, #0
 8005624:	bf18      	it	ne
 8005626:	2001      	movne	r0, #1
 8005628:	b002      	add	sp, #8
 800562a:	4770      	bx	lr
 800562c:	4610      	mov	r0, r2
 800562e:	e7fb      	b.n	8005628 <__ascii_mbtowc+0x16>
 8005630:	f06f 0001 	mvn.w	r0, #1
 8005634:	e7f8      	b.n	8005628 <__ascii_mbtowc+0x16>

08005636 <__ssputs_r>:
 8005636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563a:	688e      	ldr	r6, [r1, #8]
 800563c:	429e      	cmp	r6, r3
 800563e:	4682      	mov	sl, r0
 8005640:	460c      	mov	r4, r1
 8005642:	4691      	mov	r9, r2
 8005644:	4698      	mov	r8, r3
 8005646:	d835      	bhi.n	80056b4 <__ssputs_r+0x7e>
 8005648:	898a      	ldrh	r2, [r1, #12]
 800564a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800564e:	d031      	beq.n	80056b4 <__ssputs_r+0x7e>
 8005650:	6825      	ldr	r5, [r4, #0]
 8005652:	6909      	ldr	r1, [r1, #16]
 8005654:	1a6f      	subs	r7, r5, r1
 8005656:	6965      	ldr	r5, [r4, #20]
 8005658:	2302      	movs	r3, #2
 800565a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800565e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005662:	f108 0301 	add.w	r3, r8, #1
 8005666:	443b      	add	r3, r7
 8005668:	429d      	cmp	r5, r3
 800566a:	bf38      	it	cc
 800566c:	461d      	movcc	r5, r3
 800566e:	0553      	lsls	r3, r2, #21
 8005670:	d531      	bpl.n	80056d6 <__ssputs_r+0xa0>
 8005672:	4629      	mov	r1, r5
 8005674:	f000 fb44 	bl	8005d00 <_malloc_r>
 8005678:	4606      	mov	r6, r0
 800567a:	b950      	cbnz	r0, 8005692 <__ssputs_r+0x5c>
 800567c:	230c      	movs	r3, #12
 800567e:	f8ca 3000 	str.w	r3, [sl]
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005692:	463a      	mov	r2, r7
 8005694:	6921      	ldr	r1, [r4, #16]
 8005696:	f000 fac0 	bl	8005c1a <memcpy>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a4:	81a3      	strh	r3, [r4, #12]
 80056a6:	6126      	str	r6, [r4, #16]
 80056a8:	6165      	str	r5, [r4, #20]
 80056aa:	443e      	add	r6, r7
 80056ac:	1bed      	subs	r5, r5, r7
 80056ae:	6026      	str	r6, [r4, #0]
 80056b0:	60a5      	str	r5, [r4, #8]
 80056b2:	4646      	mov	r6, r8
 80056b4:	4546      	cmp	r6, r8
 80056b6:	bf28      	it	cs
 80056b8:	4646      	movcs	r6, r8
 80056ba:	4632      	mov	r2, r6
 80056bc:	4649      	mov	r1, r9
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	f000 fab6 	bl	8005c30 <memmove>
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	1b9b      	subs	r3, r3, r6
 80056c8:	60a3      	str	r3, [r4, #8]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	441e      	add	r6, r3
 80056ce:	6026      	str	r6, [r4, #0]
 80056d0:	2000      	movs	r0, #0
 80056d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d6:	462a      	mov	r2, r5
 80056d8:	f000 fb70 	bl	8005dbc <_realloc_r>
 80056dc:	4606      	mov	r6, r0
 80056de:	2800      	cmp	r0, #0
 80056e0:	d1e1      	bne.n	80056a6 <__ssputs_r+0x70>
 80056e2:	6921      	ldr	r1, [r4, #16]
 80056e4:	4650      	mov	r0, sl
 80056e6:	f000 fabd 	bl	8005c64 <_free_r>
 80056ea:	e7c7      	b.n	800567c <__ssputs_r+0x46>

080056ec <_svfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	b09d      	sub	sp, #116	; 0x74
 80056f2:	4680      	mov	r8, r0
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	898b      	ldrh	r3, [r1, #12]
 80056f8:	061c      	lsls	r4, r3, #24
 80056fa:	460d      	mov	r5, r1
 80056fc:	4616      	mov	r6, r2
 80056fe:	d50f      	bpl.n	8005720 <_svfiprintf_r+0x34>
 8005700:	690b      	ldr	r3, [r1, #16]
 8005702:	b96b      	cbnz	r3, 8005720 <_svfiprintf_r+0x34>
 8005704:	2140      	movs	r1, #64	; 0x40
 8005706:	f000 fafb 	bl	8005d00 <_malloc_r>
 800570a:	6028      	str	r0, [r5, #0]
 800570c:	6128      	str	r0, [r5, #16]
 800570e:	b928      	cbnz	r0, 800571c <_svfiprintf_r+0x30>
 8005710:	230c      	movs	r3, #12
 8005712:	f8c8 3000 	str.w	r3, [r8]
 8005716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800571a:	e0c5      	b.n	80058a8 <_svfiprintf_r+0x1bc>
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	616b      	str	r3, [r5, #20]
 8005720:	2300      	movs	r3, #0
 8005722:	9309      	str	r3, [sp, #36]	; 0x24
 8005724:	2320      	movs	r3, #32
 8005726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572a:	2330      	movs	r3, #48	; 0x30
 800572c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005730:	f04f 0b01 	mov.w	fp, #1
 8005734:	4637      	mov	r7, r6
 8005736:	463c      	mov	r4, r7
 8005738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d13c      	bne.n	80057ba <_svfiprintf_r+0xce>
 8005740:	ebb7 0a06 	subs.w	sl, r7, r6
 8005744:	d00b      	beq.n	800575e <_svfiprintf_r+0x72>
 8005746:	4653      	mov	r3, sl
 8005748:	4632      	mov	r2, r6
 800574a:	4629      	mov	r1, r5
 800574c:	4640      	mov	r0, r8
 800574e:	f7ff ff72 	bl	8005636 <__ssputs_r>
 8005752:	3001      	adds	r0, #1
 8005754:	f000 80a3 	beq.w	800589e <_svfiprintf_r+0x1b2>
 8005758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575a:	4453      	add	r3, sl
 800575c:	9309      	str	r3, [sp, #36]	; 0x24
 800575e:	783b      	ldrb	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 809c 	beq.w	800589e <_svfiprintf_r+0x1b2>
 8005766:	2300      	movs	r3, #0
 8005768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	9205      	str	r2, [sp, #20]
 8005772:	9306      	str	r3, [sp, #24]
 8005774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005778:	931a      	str	r3, [sp, #104]	; 0x68
 800577a:	2205      	movs	r2, #5
 800577c:	7821      	ldrb	r1, [r4, #0]
 800577e:	4850      	ldr	r0, [pc, #320]	; (80058c0 <_svfiprintf_r+0x1d4>)
 8005780:	f7fa fd36 	bl	80001f0 <memchr>
 8005784:	1c67      	adds	r7, r4, #1
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	b9d8      	cbnz	r0, 80057c2 <_svfiprintf_r+0xd6>
 800578a:	06d9      	lsls	r1, r3, #27
 800578c:	bf44      	itt	mi
 800578e:	2220      	movmi	r2, #32
 8005790:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005794:	071a      	lsls	r2, r3, #28
 8005796:	bf44      	itt	mi
 8005798:	222b      	movmi	r2, #43	; 0x2b
 800579a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800579e:	7822      	ldrb	r2, [r4, #0]
 80057a0:	2a2a      	cmp	r2, #42	; 0x2a
 80057a2:	d016      	beq.n	80057d2 <_svfiprintf_r+0xe6>
 80057a4:	9a07      	ldr	r2, [sp, #28]
 80057a6:	2100      	movs	r1, #0
 80057a8:	200a      	movs	r0, #10
 80057aa:	4627      	mov	r7, r4
 80057ac:	3401      	adds	r4, #1
 80057ae:	783b      	ldrb	r3, [r7, #0]
 80057b0:	3b30      	subs	r3, #48	; 0x30
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d951      	bls.n	800585a <_svfiprintf_r+0x16e>
 80057b6:	b1c9      	cbz	r1, 80057ec <_svfiprintf_r+0x100>
 80057b8:	e011      	b.n	80057de <_svfiprintf_r+0xf2>
 80057ba:	2b25      	cmp	r3, #37	; 0x25
 80057bc:	d0c0      	beq.n	8005740 <_svfiprintf_r+0x54>
 80057be:	4627      	mov	r7, r4
 80057c0:	e7b9      	b.n	8005736 <_svfiprintf_r+0x4a>
 80057c2:	4a3f      	ldr	r2, [pc, #252]	; (80058c0 <_svfiprintf_r+0x1d4>)
 80057c4:	1a80      	subs	r0, r0, r2
 80057c6:	fa0b f000 	lsl.w	r0, fp, r0
 80057ca:	4318      	orrs	r0, r3
 80057cc:	9004      	str	r0, [sp, #16]
 80057ce:	463c      	mov	r4, r7
 80057d0:	e7d3      	b.n	800577a <_svfiprintf_r+0x8e>
 80057d2:	9a03      	ldr	r2, [sp, #12]
 80057d4:	1d11      	adds	r1, r2, #4
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	9103      	str	r1, [sp, #12]
 80057da:	2a00      	cmp	r2, #0
 80057dc:	db01      	blt.n	80057e2 <_svfiprintf_r+0xf6>
 80057de:	9207      	str	r2, [sp, #28]
 80057e0:	e004      	b.n	80057ec <_svfiprintf_r+0x100>
 80057e2:	4252      	negs	r2, r2
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	9207      	str	r2, [sp, #28]
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	783b      	ldrb	r3, [r7, #0]
 80057ee:	2b2e      	cmp	r3, #46	; 0x2e
 80057f0:	d10e      	bne.n	8005810 <_svfiprintf_r+0x124>
 80057f2:	787b      	ldrb	r3, [r7, #1]
 80057f4:	2b2a      	cmp	r3, #42	; 0x2a
 80057f6:	f107 0101 	add.w	r1, r7, #1
 80057fa:	d132      	bne.n	8005862 <_svfiprintf_r+0x176>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	9203      	str	r2, [sp, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfb8      	it	lt
 8005808:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800580c:	3702      	adds	r7, #2
 800580e:	9305      	str	r3, [sp, #20]
 8005810:	4c2c      	ldr	r4, [pc, #176]	; (80058c4 <_svfiprintf_r+0x1d8>)
 8005812:	7839      	ldrb	r1, [r7, #0]
 8005814:	2203      	movs	r2, #3
 8005816:	4620      	mov	r0, r4
 8005818:	f7fa fcea 	bl	80001f0 <memchr>
 800581c:	b138      	cbz	r0, 800582e <_svfiprintf_r+0x142>
 800581e:	2340      	movs	r3, #64	; 0x40
 8005820:	1b00      	subs	r0, r0, r4
 8005822:	fa03 f000 	lsl.w	r0, r3, r0
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	4303      	orrs	r3, r0
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	3701      	adds	r7, #1
 800582e:	7839      	ldrb	r1, [r7, #0]
 8005830:	4825      	ldr	r0, [pc, #148]	; (80058c8 <_svfiprintf_r+0x1dc>)
 8005832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005836:	2206      	movs	r2, #6
 8005838:	1c7e      	adds	r6, r7, #1
 800583a:	f7fa fcd9 	bl	80001f0 <memchr>
 800583e:	2800      	cmp	r0, #0
 8005840:	d035      	beq.n	80058ae <_svfiprintf_r+0x1c2>
 8005842:	4b22      	ldr	r3, [pc, #136]	; (80058cc <_svfiprintf_r+0x1e0>)
 8005844:	b9fb      	cbnz	r3, 8005886 <_svfiprintf_r+0x19a>
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	3307      	adds	r3, #7
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	3308      	adds	r3, #8
 8005850:	9303      	str	r3, [sp, #12]
 8005852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005854:	444b      	add	r3, r9
 8005856:	9309      	str	r3, [sp, #36]	; 0x24
 8005858:	e76c      	b.n	8005734 <_svfiprintf_r+0x48>
 800585a:	fb00 3202 	mla	r2, r0, r2, r3
 800585e:	2101      	movs	r1, #1
 8005860:	e7a3      	b.n	80057aa <_svfiprintf_r+0xbe>
 8005862:	2300      	movs	r3, #0
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	4618      	mov	r0, r3
 8005868:	240a      	movs	r4, #10
 800586a:	460f      	mov	r7, r1
 800586c:	3101      	adds	r1, #1
 800586e:	783a      	ldrb	r2, [r7, #0]
 8005870:	3a30      	subs	r2, #48	; 0x30
 8005872:	2a09      	cmp	r2, #9
 8005874:	d903      	bls.n	800587e <_svfiprintf_r+0x192>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ca      	beq.n	8005810 <_svfiprintf_r+0x124>
 800587a:	9005      	str	r0, [sp, #20]
 800587c:	e7c8      	b.n	8005810 <_svfiprintf_r+0x124>
 800587e:	fb04 2000 	mla	r0, r4, r0, r2
 8005882:	2301      	movs	r3, #1
 8005884:	e7f1      	b.n	800586a <_svfiprintf_r+0x17e>
 8005886:	ab03      	add	r3, sp, #12
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	462a      	mov	r2, r5
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <_svfiprintf_r+0x1e4>)
 800588e:	a904      	add	r1, sp, #16
 8005890:	4640      	mov	r0, r8
 8005892:	f3af 8000 	nop.w
 8005896:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800589a:	4681      	mov	r9, r0
 800589c:	d1d9      	bne.n	8005852 <_svfiprintf_r+0x166>
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	065b      	lsls	r3, r3, #25
 80058a2:	f53f af38 	bmi.w	8005716 <_svfiprintf_r+0x2a>
 80058a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058a8:	b01d      	add	sp, #116	; 0x74
 80058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ae:	ab03      	add	r3, sp, #12
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	462a      	mov	r2, r5
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <_svfiprintf_r+0x1e4>)
 80058b6:	a904      	add	r1, sp, #16
 80058b8:	4640      	mov	r0, r8
 80058ba:	f000 f881 	bl	80059c0 <_printf_i>
 80058be:	e7ea      	b.n	8005896 <_svfiprintf_r+0x1aa>
 80058c0:	0800737a 	.word	0x0800737a
 80058c4:	08007380 	.word	0x08007380
 80058c8:	08007384 	.word	0x08007384
 80058cc:	00000000 	.word	0x00000000
 80058d0:	08005637 	.word	0x08005637

080058d4 <_printf_common>:
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	4691      	mov	r9, r2
 80058da:	461f      	mov	r7, r3
 80058dc:	688a      	ldr	r2, [r1, #8]
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bfb8      	it	lt
 80058e8:	4613      	movlt	r3, r2
 80058ea:	f8c9 3000 	str.w	r3, [r9]
 80058ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058f2:	4606      	mov	r6, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	b112      	cbz	r2, 80058fe <_printf_common+0x2a>
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c9 3000 	str.w	r3, [r9]
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	0699      	lsls	r1, r3, #26
 8005902:	bf42      	ittt	mi
 8005904:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005908:	3302      	addmi	r3, #2
 800590a:	f8c9 3000 	strmi.w	r3, [r9]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	f015 0506 	ands.w	r5, r5, #6
 8005914:	d107      	bne.n	8005926 <_printf_common+0x52>
 8005916:	f104 0a19 	add.w	sl, r4, #25
 800591a:	68e3      	ldr	r3, [r4, #12]
 800591c:	f8d9 2000 	ldr.w	r2, [r9]
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	429d      	cmp	r5, r3
 8005924:	db29      	blt.n	800597a <_printf_common+0xa6>
 8005926:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	3300      	adds	r3, #0
 800592e:	bf18      	it	ne
 8005930:	2301      	movne	r3, #1
 8005932:	0692      	lsls	r2, r2, #26
 8005934:	d42e      	bmi.n	8005994 <_printf_common+0xc0>
 8005936:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800593a:	4639      	mov	r1, r7
 800593c:	4630      	mov	r0, r6
 800593e:	47c0      	blx	r8
 8005940:	3001      	adds	r0, #1
 8005942:	d021      	beq.n	8005988 <_printf_common+0xb4>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	68e5      	ldr	r5, [r4, #12]
 8005948:	f8d9 2000 	ldr.w	r2, [r9]
 800594c:	f003 0306 	and.w	r3, r3, #6
 8005950:	2b04      	cmp	r3, #4
 8005952:	bf08      	it	eq
 8005954:	1aad      	subeq	r5, r5, r2
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	bf0c      	ite	eq
 800595c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005960:	2500      	movne	r5, #0
 8005962:	4293      	cmp	r3, r2
 8005964:	bfc4      	itt	gt
 8005966:	1a9b      	subgt	r3, r3, r2
 8005968:	18ed      	addgt	r5, r5, r3
 800596a:	f04f 0900 	mov.w	r9, #0
 800596e:	341a      	adds	r4, #26
 8005970:	454d      	cmp	r5, r9
 8005972:	d11b      	bne.n	80059ac <_printf_common+0xd8>
 8005974:	2000      	movs	r0, #0
 8005976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597a:	2301      	movs	r3, #1
 800597c:	4652      	mov	r2, sl
 800597e:	4639      	mov	r1, r7
 8005980:	4630      	mov	r0, r6
 8005982:	47c0      	blx	r8
 8005984:	3001      	adds	r0, #1
 8005986:	d103      	bne.n	8005990 <_printf_common+0xbc>
 8005988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800598c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005990:	3501      	adds	r5, #1
 8005992:	e7c2      	b.n	800591a <_printf_common+0x46>
 8005994:	18e1      	adds	r1, r4, r3
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	2030      	movs	r0, #48	; 0x30
 800599a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800599e:	4422      	add	r2, r4
 80059a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059a8:	3302      	adds	r3, #2
 80059aa:	e7c4      	b.n	8005936 <_printf_common+0x62>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4622      	mov	r2, r4
 80059b0:	4639      	mov	r1, r7
 80059b2:	4630      	mov	r0, r6
 80059b4:	47c0      	blx	r8
 80059b6:	3001      	adds	r0, #1
 80059b8:	d0e6      	beq.n	8005988 <_printf_common+0xb4>
 80059ba:	f109 0901 	add.w	r9, r9, #1
 80059be:	e7d7      	b.n	8005970 <_printf_common+0x9c>

080059c0 <_printf_i>:
 80059c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059c4:	4617      	mov	r7, r2
 80059c6:	7e0a      	ldrb	r2, [r1, #24]
 80059c8:	b085      	sub	sp, #20
 80059ca:	2a6e      	cmp	r2, #110	; 0x6e
 80059cc:	4698      	mov	r8, r3
 80059ce:	4606      	mov	r6, r0
 80059d0:	460c      	mov	r4, r1
 80059d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80059d8:	f000 80bc 	beq.w	8005b54 <_printf_i+0x194>
 80059dc:	d81a      	bhi.n	8005a14 <_printf_i+0x54>
 80059de:	2a63      	cmp	r2, #99	; 0x63
 80059e0:	d02e      	beq.n	8005a40 <_printf_i+0x80>
 80059e2:	d80a      	bhi.n	80059fa <_printf_i+0x3a>
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	f000 80c8 	beq.w	8005b7a <_printf_i+0x1ba>
 80059ea:	2a58      	cmp	r2, #88	; 0x58
 80059ec:	f000 808a 	beq.w	8005b04 <_printf_i+0x144>
 80059f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80059f8:	e02a      	b.n	8005a50 <_printf_i+0x90>
 80059fa:	2a64      	cmp	r2, #100	; 0x64
 80059fc:	d001      	beq.n	8005a02 <_printf_i+0x42>
 80059fe:	2a69      	cmp	r2, #105	; 0x69
 8005a00:	d1f6      	bne.n	80059f0 <_printf_i+0x30>
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a0a:	d023      	beq.n	8005a54 <_printf_i+0x94>
 8005a0c:	1d11      	adds	r1, r2, #4
 8005a0e:	6019      	str	r1, [r3, #0]
 8005a10:	6813      	ldr	r3, [r2, #0]
 8005a12:	e027      	b.n	8005a64 <_printf_i+0xa4>
 8005a14:	2a73      	cmp	r2, #115	; 0x73
 8005a16:	f000 80b4 	beq.w	8005b82 <_printf_i+0x1c2>
 8005a1a:	d808      	bhi.n	8005a2e <_printf_i+0x6e>
 8005a1c:	2a6f      	cmp	r2, #111	; 0x6f
 8005a1e:	d02a      	beq.n	8005a76 <_printf_i+0xb6>
 8005a20:	2a70      	cmp	r2, #112	; 0x70
 8005a22:	d1e5      	bne.n	80059f0 <_printf_i+0x30>
 8005a24:	680a      	ldr	r2, [r1, #0]
 8005a26:	f042 0220 	orr.w	r2, r2, #32
 8005a2a:	600a      	str	r2, [r1, #0]
 8005a2c:	e003      	b.n	8005a36 <_printf_i+0x76>
 8005a2e:	2a75      	cmp	r2, #117	; 0x75
 8005a30:	d021      	beq.n	8005a76 <_printf_i+0xb6>
 8005a32:	2a78      	cmp	r2, #120	; 0x78
 8005a34:	d1dc      	bne.n	80059f0 <_printf_i+0x30>
 8005a36:	2278      	movs	r2, #120	; 0x78
 8005a38:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005a3c:	496e      	ldr	r1, [pc, #440]	; (8005bf8 <_printf_i+0x238>)
 8005a3e:	e064      	b.n	8005b0a <_printf_i+0x14a>
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005a46:	1d11      	adds	r1, r2, #4
 8005a48:	6019      	str	r1, [r3, #0]
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0a3      	b.n	8005b9c <_printf_i+0x1dc>
 8005a54:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005a58:	f102 0104 	add.w	r1, r2, #4
 8005a5c:	6019      	str	r1, [r3, #0]
 8005a5e:	d0d7      	beq.n	8005a10 <_printf_i+0x50>
 8005a60:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da03      	bge.n	8005a70 <_printf_i+0xb0>
 8005a68:	222d      	movs	r2, #45	; 0x2d
 8005a6a:	425b      	negs	r3, r3
 8005a6c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a70:	4962      	ldr	r1, [pc, #392]	; (8005bfc <_printf_i+0x23c>)
 8005a72:	220a      	movs	r2, #10
 8005a74:	e017      	b.n	8005aa6 <_printf_i+0xe6>
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	6819      	ldr	r1, [r3, #0]
 8005a7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a7e:	d003      	beq.n	8005a88 <_printf_i+0xc8>
 8005a80:	1d08      	adds	r0, r1, #4
 8005a82:	6018      	str	r0, [r3, #0]
 8005a84:	680b      	ldr	r3, [r1, #0]
 8005a86:	e006      	b.n	8005a96 <_printf_i+0xd6>
 8005a88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a8c:	f101 0004 	add.w	r0, r1, #4
 8005a90:	6018      	str	r0, [r3, #0]
 8005a92:	d0f7      	beq.n	8005a84 <_printf_i+0xc4>
 8005a94:	880b      	ldrh	r3, [r1, #0]
 8005a96:	4959      	ldr	r1, [pc, #356]	; (8005bfc <_printf_i+0x23c>)
 8005a98:	2a6f      	cmp	r2, #111	; 0x6f
 8005a9a:	bf14      	ite	ne
 8005a9c:	220a      	movne	r2, #10
 8005a9e:	2208      	moveq	r2, #8
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005aa6:	6865      	ldr	r5, [r4, #4]
 8005aa8:	60a5      	str	r5, [r4, #8]
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	f2c0 809c 	blt.w	8005be8 <_printf_i+0x228>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	f020 0004 	bic.w	r0, r0, #4
 8005ab6:	6020      	str	r0, [r4, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d13f      	bne.n	8005b3c <_printf_i+0x17c>
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	f040 8095 	bne.w	8005bec <_printf_i+0x22c>
 8005ac2:	4675      	mov	r5, lr
 8005ac4:	2a08      	cmp	r2, #8
 8005ac6:	d10b      	bne.n	8005ae0 <_printf_i+0x120>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07da      	lsls	r2, r3, #31
 8005acc:	d508      	bpl.n	8005ae0 <_printf_i+0x120>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	6862      	ldr	r2, [r4, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	bfde      	ittt	le
 8005ad6:	2330      	movle	r3, #48	; 0x30
 8005ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005adc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ae0:	ebae 0305 	sub.w	r3, lr, r5
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	f8cd 8000 	str.w	r8, [sp]
 8005aea:	463b      	mov	r3, r7
 8005aec:	aa03      	add	r2, sp, #12
 8005aee:	4621      	mov	r1, r4
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff feef 	bl	80058d4 <_printf_common>
 8005af6:	3001      	adds	r0, #1
 8005af8:	d155      	bne.n	8005ba6 <_printf_i+0x1e6>
 8005afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005afe:	b005      	add	sp, #20
 8005b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b04:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005b08:	493c      	ldr	r1, [pc, #240]	; (8005bfc <_printf_i+0x23c>)
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b12:	f100 0504 	add.w	r5, r0, #4
 8005b16:	601d      	str	r5, [r3, #0]
 8005b18:	d001      	beq.n	8005b1e <_printf_i+0x15e>
 8005b1a:	6803      	ldr	r3, [r0, #0]
 8005b1c:	e002      	b.n	8005b24 <_printf_i+0x164>
 8005b1e:	0655      	lsls	r5, r2, #25
 8005b20:	d5fb      	bpl.n	8005b1a <_printf_i+0x15a>
 8005b22:	8803      	ldrh	r3, [r0, #0]
 8005b24:	07d0      	lsls	r0, r2, #31
 8005b26:	bf44      	itt	mi
 8005b28:	f042 0220 	orrmi.w	r2, r2, #32
 8005b2c:	6022      	strmi	r2, [r4, #0]
 8005b2e:	b91b      	cbnz	r3, 8005b38 <_printf_i+0x178>
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	f022 0220 	bic.w	r2, r2, #32
 8005b36:	6022      	str	r2, [r4, #0]
 8005b38:	2210      	movs	r2, #16
 8005b3a:	e7b1      	b.n	8005aa0 <_printf_i+0xe0>
 8005b3c:	4675      	mov	r5, lr
 8005b3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b42:	fb02 3310 	mls	r3, r2, r0, r3
 8005b46:	5ccb      	ldrb	r3, [r1, r3]
 8005b48:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d1f5      	bne.n	8005b3e <_printf_i+0x17e>
 8005b52:	e7b7      	b.n	8005ac4 <_printf_i+0x104>
 8005b54:	6808      	ldr	r0, [r1, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	6949      	ldr	r1, [r1, #20]
 8005b5a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005b5e:	d004      	beq.n	8005b6a <_printf_i+0x1aa>
 8005b60:	1d10      	adds	r0, r2, #4
 8005b62:	6018      	str	r0, [r3, #0]
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	6019      	str	r1, [r3, #0]
 8005b68:	e007      	b.n	8005b7a <_printf_i+0x1ba>
 8005b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b6e:	f102 0004 	add.w	r0, r2, #4
 8005b72:	6018      	str	r0, [r3, #0]
 8005b74:	6813      	ldr	r3, [r2, #0]
 8005b76:	d0f6      	beq.n	8005b66 <_printf_i+0x1a6>
 8005b78:	8019      	strh	r1, [r3, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	4675      	mov	r5, lr
 8005b80:	e7b1      	b.n	8005ae6 <_printf_i+0x126>
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	1d11      	adds	r1, r2, #4
 8005b86:	6019      	str	r1, [r3, #0]
 8005b88:	6815      	ldr	r5, [r2, #0]
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f7fa fb2e 	bl	80001f0 <memchr>
 8005b94:	b108      	cbz	r0, 8005b9a <_printf_i+0x1da>
 8005b96:	1b40      	subs	r0, r0, r5
 8005b98:	6060      	str	r0, [r4, #4]
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba4:	e79f      	b.n	8005ae6 <_printf_i+0x126>
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	462a      	mov	r2, r5
 8005baa:	4639      	mov	r1, r7
 8005bac:	4630      	mov	r0, r6
 8005bae:	47c0      	blx	r8
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d0a2      	beq.n	8005afa <_printf_i+0x13a>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	079b      	lsls	r3, r3, #30
 8005bb8:	d507      	bpl.n	8005bca <_printf_i+0x20a>
 8005bba:	2500      	movs	r5, #0
 8005bbc:	f104 0919 	add.w	r9, r4, #25
 8005bc0:	68e3      	ldr	r3, [r4, #12]
 8005bc2:	9a03      	ldr	r2, [sp, #12]
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	429d      	cmp	r5, r3
 8005bc8:	db05      	blt.n	8005bd6 <_printf_i+0x216>
 8005bca:	68e0      	ldr	r0, [r4, #12]
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	4298      	cmp	r0, r3
 8005bd0:	bfb8      	it	lt
 8005bd2:	4618      	movlt	r0, r3
 8005bd4:	e793      	b.n	8005afe <_printf_i+0x13e>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	464a      	mov	r2, r9
 8005bda:	4639      	mov	r1, r7
 8005bdc:	4630      	mov	r0, r6
 8005bde:	47c0      	blx	r8
 8005be0:	3001      	adds	r0, #1
 8005be2:	d08a      	beq.n	8005afa <_printf_i+0x13a>
 8005be4:	3501      	adds	r5, #1
 8005be6:	e7eb      	b.n	8005bc0 <_printf_i+0x200>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1a7      	bne.n	8005b3c <_printf_i+0x17c>
 8005bec:	780b      	ldrb	r3, [r1, #0]
 8005bee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf6:	e765      	b.n	8005ac4 <_printf_i+0x104>
 8005bf8:	0800739c 	.word	0x0800739c
 8005bfc:	0800738b 	.word	0x0800738b

08005c00 <__ascii_wctomb>:
 8005c00:	b149      	cbz	r1, 8005c16 <__ascii_wctomb+0x16>
 8005c02:	2aff      	cmp	r2, #255	; 0xff
 8005c04:	bf85      	ittet	hi
 8005c06:	238a      	movhi	r3, #138	; 0x8a
 8005c08:	6003      	strhi	r3, [r0, #0]
 8005c0a:	700a      	strbls	r2, [r1, #0]
 8005c0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005c10:	bf98      	it	ls
 8005c12:	2001      	movls	r0, #1
 8005c14:	4770      	bx	lr
 8005c16:	4608      	mov	r0, r1
 8005c18:	4770      	bx	lr

08005c1a <memcpy>:
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	1e43      	subs	r3, r0, #1
 8005c1e:	440a      	add	r2, r1
 8005c20:	4291      	cmp	r1, r2
 8005c22:	d100      	bne.n	8005c26 <memcpy+0xc>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2e:	e7f7      	b.n	8005c20 <memcpy+0x6>

08005c30 <memmove>:
 8005c30:	4288      	cmp	r0, r1
 8005c32:	b510      	push	{r4, lr}
 8005c34:	eb01 0302 	add.w	r3, r1, r2
 8005c38:	d803      	bhi.n	8005c42 <memmove+0x12>
 8005c3a:	1e42      	subs	r2, r0, #1
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d10c      	bne.n	8005c5a <memmove+0x2a>
 8005c40:	bd10      	pop	{r4, pc}
 8005c42:	4298      	cmp	r0, r3
 8005c44:	d2f9      	bcs.n	8005c3a <memmove+0xa>
 8005c46:	1881      	adds	r1, r0, r2
 8005c48:	1ad2      	subs	r2, r2, r3
 8005c4a:	42d3      	cmn	r3, r2
 8005c4c:	d100      	bne.n	8005c50 <memmove+0x20>
 8005c4e:	bd10      	pop	{r4, pc}
 8005c50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c58:	e7f7      	b.n	8005c4a <memmove+0x1a>
 8005c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c62:	e7eb      	b.n	8005c3c <memmove+0xc>

08005c64 <_free_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4605      	mov	r5, r0
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	d045      	beq.n	8005cf8 <_free_r+0x94>
 8005c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c70:	1f0c      	subs	r4, r1, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfb8      	it	lt
 8005c76:	18e4      	addlt	r4, r4, r3
 8005c78:	f000 f8d6 	bl	8005e28 <__malloc_lock>
 8005c7c:	4a1f      	ldr	r2, [pc, #124]	; (8005cfc <_free_r+0x98>)
 8005c7e:	6813      	ldr	r3, [r2, #0]
 8005c80:	4610      	mov	r0, r2
 8005c82:	b933      	cbnz	r3, 8005c92 <_free_r+0x2e>
 8005c84:	6063      	str	r3, [r4, #4]
 8005c86:	6014      	str	r4, [r2, #0]
 8005c88:	4628      	mov	r0, r5
 8005c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c8e:	f000 b8cc 	b.w	8005e2a <__malloc_unlock>
 8005c92:	42a3      	cmp	r3, r4
 8005c94:	d90c      	bls.n	8005cb0 <_free_r+0x4c>
 8005c96:	6821      	ldr	r1, [r4, #0]
 8005c98:	1862      	adds	r2, r4, r1
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	bf04      	itt	eq
 8005c9e:	681a      	ldreq	r2, [r3, #0]
 8005ca0:	685b      	ldreq	r3, [r3, #4]
 8005ca2:	6063      	str	r3, [r4, #4]
 8005ca4:	bf04      	itt	eq
 8005ca6:	1852      	addeq	r2, r2, r1
 8005ca8:	6022      	streq	r2, [r4, #0]
 8005caa:	6004      	str	r4, [r0, #0]
 8005cac:	e7ec      	b.n	8005c88 <_free_r+0x24>
 8005cae:	4613      	mov	r3, r2
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	b10a      	cbz	r2, 8005cb8 <_free_r+0x54>
 8005cb4:	42a2      	cmp	r2, r4
 8005cb6:	d9fa      	bls.n	8005cae <_free_r+0x4a>
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	1858      	adds	r0, r3, r1
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	d10b      	bne.n	8005cd8 <_free_r+0x74>
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	4401      	add	r1, r0
 8005cc4:	1858      	adds	r0, r3, r1
 8005cc6:	4282      	cmp	r2, r0
 8005cc8:	6019      	str	r1, [r3, #0]
 8005cca:	d1dd      	bne.n	8005c88 <_free_r+0x24>
 8005ccc:	6810      	ldr	r0, [r2, #0]
 8005cce:	6852      	ldr	r2, [r2, #4]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	4401      	add	r1, r0
 8005cd4:	6019      	str	r1, [r3, #0]
 8005cd6:	e7d7      	b.n	8005c88 <_free_r+0x24>
 8005cd8:	d902      	bls.n	8005ce0 <_free_r+0x7c>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	e7d3      	b.n	8005c88 <_free_r+0x24>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	1821      	adds	r1, r4, r0
 8005ce4:	428a      	cmp	r2, r1
 8005ce6:	bf04      	itt	eq
 8005ce8:	6811      	ldreq	r1, [r2, #0]
 8005cea:	6852      	ldreq	r2, [r2, #4]
 8005cec:	6062      	str	r2, [r4, #4]
 8005cee:	bf04      	itt	eq
 8005cf0:	1809      	addeq	r1, r1, r0
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	605c      	str	r4, [r3, #4]
 8005cf6:	e7c7      	b.n	8005c88 <_free_r+0x24>
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000260 	.word	0x20000260

08005d00 <_malloc_r>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	1ccd      	adds	r5, r1, #3
 8005d04:	f025 0503 	bic.w	r5, r5, #3
 8005d08:	3508      	adds	r5, #8
 8005d0a:	2d0c      	cmp	r5, #12
 8005d0c:	bf38      	it	cc
 8005d0e:	250c      	movcc	r5, #12
 8005d10:	2d00      	cmp	r5, #0
 8005d12:	4606      	mov	r6, r0
 8005d14:	db01      	blt.n	8005d1a <_malloc_r+0x1a>
 8005d16:	42a9      	cmp	r1, r5
 8005d18:	d903      	bls.n	8005d22 <_malloc_r+0x22>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	6033      	str	r3, [r6, #0]
 8005d1e:	2000      	movs	r0, #0
 8005d20:	bd70      	pop	{r4, r5, r6, pc}
 8005d22:	f000 f881 	bl	8005e28 <__malloc_lock>
 8005d26:	4a23      	ldr	r2, [pc, #140]	; (8005db4 <_malloc_r+0xb4>)
 8005d28:	6814      	ldr	r4, [r2, #0]
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	b991      	cbnz	r1, 8005d54 <_malloc_r+0x54>
 8005d2e:	4c22      	ldr	r4, [pc, #136]	; (8005db8 <_malloc_r+0xb8>)
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	b91b      	cbnz	r3, 8005d3c <_malloc_r+0x3c>
 8005d34:	4630      	mov	r0, r6
 8005d36:	f000 f867 	bl	8005e08 <_sbrk_r>
 8005d3a:	6020      	str	r0, [r4, #0]
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 f862 	bl	8005e08 <_sbrk_r>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d126      	bne.n	8005d96 <_malloc_r+0x96>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	6033      	str	r3, [r6, #0]
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f000 f86c 	bl	8005e2a <__malloc_unlock>
 8005d52:	e7e4      	b.n	8005d1e <_malloc_r+0x1e>
 8005d54:	680b      	ldr	r3, [r1, #0]
 8005d56:	1b5b      	subs	r3, r3, r5
 8005d58:	d41a      	bmi.n	8005d90 <_malloc_r+0x90>
 8005d5a:	2b0b      	cmp	r3, #11
 8005d5c:	d90f      	bls.n	8005d7e <_malloc_r+0x7e>
 8005d5e:	600b      	str	r3, [r1, #0]
 8005d60:	50cd      	str	r5, [r1, r3]
 8005d62:	18cc      	adds	r4, r1, r3
 8005d64:	4630      	mov	r0, r6
 8005d66:	f000 f860 	bl	8005e2a <__malloc_unlock>
 8005d6a:	f104 000b 	add.w	r0, r4, #11
 8005d6e:	1d23      	adds	r3, r4, #4
 8005d70:	f020 0007 	bic.w	r0, r0, #7
 8005d74:	1ac3      	subs	r3, r0, r3
 8005d76:	d01b      	beq.n	8005db0 <_malloc_r+0xb0>
 8005d78:	425a      	negs	r2, r3
 8005d7a:	50e2      	str	r2, [r4, r3]
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	428c      	cmp	r4, r1
 8005d80:	bf0d      	iteet	eq
 8005d82:	6863      	ldreq	r3, [r4, #4]
 8005d84:	684b      	ldrne	r3, [r1, #4]
 8005d86:	6063      	strne	r3, [r4, #4]
 8005d88:	6013      	streq	r3, [r2, #0]
 8005d8a:	bf18      	it	ne
 8005d8c:	460c      	movne	r4, r1
 8005d8e:	e7e9      	b.n	8005d64 <_malloc_r+0x64>
 8005d90:	460c      	mov	r4, r1
 8005d92:	6849      	ldr	r1, [r1, #4]
 8005d94:	e7ca      	b.n	8005d2c <_malloc_r+0x2c>
 8005d96:	1cc4      	adds	r4, r0, #3
 8005d98:	f024 0403 	bic.w	r4, r4, #3
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d005      	beq.n	8005dac <_malloc_r+0xac>
 8005da0:	1a21      	subs	r1, r4, r0
 8005da2:	4630      	mov	r0, r6
 8005da4:	f000 f830 	bl	8005e08 <_sbrk_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d0cd      	beq.n	8005d48 <_malloc_r+0x48>
 8005dac:	6025      	str	r5, [r4, #0]
 8005dae:	e7d9      	b.n	8005d64 <_malloc_r+0x64>
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
 8005db2:	bf00      	nop
 8005db4:	20000260 	.word	0x20000260
 8005db8:	20000264 	.word	0x20000264

08005dbc <_realloc_r>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	b921      	cbnz	r1, 8005dd0 <_realloc_r+0x14>
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dcc:	f7ff bf98 	b.w	8005d00 <_malloc_r>
 8005dd0:	b922      	cbnz	r2, 8005ddc <_realloc_r+0x20>
 8005dd2:	f7ff ff47 	bl	8005c64 <_free_r>
 8005dd6:	4625      	mov	r5, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ddc:	f000 f826 	bl	8005e2c <_malloc_usable_size_r>
 8005de0:	4284      	cmp	r4, r0
 8005de2:	d90f      	bls.n	8005e04 <_realloc_r+0x48>
 8005de4:	4621      	mov	r1, r4
 8005de6:	4638      	mov	r0, r7
 8005de8:	f7ff ff8a 	bl	8005d00 <_malloc_r>
 8005dec:	4605      	mov	r5, r0
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d0f2      	beq.n	8005dd8 <_realloc_r+0x1c>
 8005df2:	4631      	mov	r1, r6
 8005df4:	4622      	mov	r2, r4
 8005df6:	f7ff ff10 	bl	8005c1a <memcpy>
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff ff31 	bl	8005c64 <_free_r>
 8005e02:	e7e9      	b.n	8005dd8 <_realloc_r+0x1c>
 8005e04:	4635      	mov	r5, r6
 8005e06:	e7e7      	b.n	8005dd8 <_realloc_r+0x1c>

08005e08 <_sbrk_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4c06      	ldr	r4, [pc, #24]	; (8005e24 <_sbrk_r+0x1c>)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4605      	mov	r5, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	f7fc fb92 	bl	800253c <_sbrk>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_sbrk_r+0x1a>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_sbrk_r+0x1a>
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	200004a8 	.word	0x200004a8

08005e28 <__malloc_lock>:
 8005e28:	4770      	bx	lr

08005e2a <__malloc_unlock>:
 8005e2a:	4770      	bx	lr

08005e2c <_malloc_usable_size_r>:
 8005e2c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005e30:	2800      	cmp	r0, #0
 8005e32:	f1a0 0004 	sub.w	r0, r0, #4
 8005e36:	bfbc      	itt	lt
 8005e38:	580b      	ldrlt	r3, [r1, r0]
 8005e3a:	18c0      	addlt	r0, r0, r3
 8005e3c:	4770      	bx	lr
	...

08005e40 <atan>:
 8005e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	ec55 4b10 	vmov	r4, r5, d0
 8005e48:	4bc7      	ldr	r3, [pc, #796]	; (8006168 <atan+0x328>)
 8005e4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005e4e:	429e      	cmp	r6, r3
 8005e50:	46ab      	mov	fp, r5
 8005e52:	dd18      	ble.n	8005e86 <atan+0x46>
 8005e54:	4ac5      	ldr	r2, [pc, #788]	; (800616c <atan+0x32c>)
 8005e56:	4296      	cmp	r6, r2
 8005e58:	dc01      	bgt.n	8005e5e <atan+0x1e>
 8005e5a:	d109      	bne.n	8005e70 <atan+0x30>
 8005e5c:	b144      	cbz	r4, 8005e70 <atan+0x30>
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f7fa fa19 	bl	800029c <__adddf3>
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	460d      	mov	r5, r1
 8005e6e:	e006      	b.n	8005e7e <atan+0x3e>
 8005e70:	f1bb 0f00 	cmp.w	fp, #0
 8005e74:	f300 813a 	bgt.w	80060ec <atan+0x2ac>
 8005e78:	a59f      	add	r5, pc, #636	; (adr r5, 80060f8 <atan+0x2b8>)
 8005e7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e7e:	ec45 4b10 	vmov	d0, r4, r5
 8005e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	4bba      	ldr	r3, [pc, #744]	; (8006170 <atan+0x330>)
 8005e88:	429e      	cmp	r6, r3
 8005e8a:	dc14      	bgt.n	8005eb6 <atan+0x76>
 8005e8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005e90:	429e      	cmp	r6, r3
 8005e92:	dc0d      	bgt.n	8005eb0 <atan+0x70>
 8005e94:	a39a      	add	r3, pc, #616	; (adr r3, 8006100 <atan+0x2c0>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	ee10 0a10 	vmov	r0, s0
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa f9fc 	bl	800029c <__adddf3>
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4bb3      	ldr	r3, [pc, #716]	; (8006174 <atan+0x334>)
 8005ea8:	f7fa fe3a 	bl	8000b20 <__aeabi_dcmpgt>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d1e6      	bne.n	8005e7e <atan+0x3e>
 8005eb0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005eb4:	e02b      	b.n	8005f0e <atan+0xce>
 8005eb6:	f000 f96b 	bl	8006190 <fabs>
 8005eba:	4baf      	ldr	r3, [pc, #700]	; (8006178 <atan+0x338>)
 8005ebc:	429e      	cmp	r6, r3
 8005ebe:	ec55 4b10 	vmov	r4, r5, d0
 8005ec2:	f300 80bf 	bgt.w	8006044 <atan+0x204>
 8005ec6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005eca:	429e      	cmp	r6, r3
 8005ecc:	f300 80a0 	bgt.w	8006010 <atan+0x1d0>
 8005ed0:	ee10 2a10 	vmov	r2, s0
 8005ed4:	ee10 0a10 	vmov	r0, s0
 8005ed8:	462b      	mov	r3, r5
 8005eda:	4629      	mov	r1, r5
 8005edc:	f7fa f9de 	bl	800029c <__adddf3>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4ba4      	ldr	r3, [pc, #656]	; (8006174 <atan+0x334>)
 8005ee4:	f7fa f9d8 	bl	8000298 <__aeabi_dsub>
 8005ee8:	2200      	movs	r2, #0
 8005eea:	4606      	mov	r6, r0
 8005eec:	460f      	mov	r7, r1
 8005eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7fa f9d1 	bl	800029c <__adddf3>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4630      	mov	r0, r6
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa fca7 	bl	8000854 <__aeabi_ddiv>
 8005f06:	f04f 0a00 	mov.w	sl, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	4620      	mov	r0, r4
 8005f14:	4629      	mov	r1, r5
 8005f16:	f7fa fb73 	bl	8000600 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4680      	mov	r8, r0
 8005f20:	4689      	mov	r9, r1
 8005f22:	f7fa fb6d 	bl	8000600 <__aeabi_dmul>
 8005f26:	a378      	add	r3, pc, #480	; (adr r3, 8006108 <atan+0x2c8>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	f7fa fb66 	bl	8000600 <__aeabi_dmul>
 8005f34:	a376      	add	r3, pc, #472	; (adr r3, 8006110 <atan+0x2d0>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f9af 	bl	800029c <__adddf3>
 8005f3e:	4632      	mov	r2, r6
 8005f40:	463b      	mov	r3, r7
 8005f42:	f7fa fb5d 	bl	8000600 <__aeabi_dmul>
 8005f46:	a374      	add	r3, pc, #464	; (adr r3, 8006118 <atan+0x2d8>)
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f7fa f9a6 	bl	800029c <__adddf3>
 8005f50:	4632      	mov	r2, r6
 8005f52:	463b      	mov	r3, r7
 8005f54:	f7fa fb54 	bl	8000600 <__aeabi_dmul>
 8005f58:	a371      	add	r3, pc, #452	; (adr r3, 8006120 <atan+0x2e0>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa f99d 	bl	800029c <__adddf3>
 8005f62:	4632      	mov	r2, r6
 8005f64:	463b      	mov	r3, r7
 8005f66:	f7fa fb4b 	bl	8000600 <__aeabi_dmul>
 8005f6a:	a36f      	add	r3, pc, #444	; (adr r3, 8006128 <atan+0x2e8>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa f994 	bl	800029c <__adddf3>
 8005f74:	4632      	mov	r2, r6
 8005f76:	463b      	mov	r3, r7
 8005f78:	f7fa fb42 	bl	8000600 <__aeabi_dmul>
 8005f7c:	a36c      	add	r3, pc, #432	; (adr r3, 8006130 <atan+0x2f0>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f7fa f98b 	bl	800029c <__adddf3>
 8005f86:	4642      	mov	r2, r8
 8005f88:	464b      	mov	r3, r9
 8005f8a:	f7fa fb39 	bl	8000600 <__aeabi_dmul>
 8005f8e:	a36a      	add	r3, pc, #424	; (adr r3, 8006138 <atan+0x2f8>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	4680      	mov	r8, r0
 8005f96:	4689      	mov	r9, r1
 8005f98:	4630      	mov	r0, r6
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fb30 	bl	8000600 <__aeabi_dmul>
 8005fa0:	a367      	add	r3, pc, #412	; (adr r3, 8006140 <atan+0x300>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f7fa f977 	bl	8000298 <__aeabi_dsub>
 8005faa:	4632      	mov	r2, r6
 8005fac:	463b      	mov	r3, r7
 8005fae:	f7fa fb27 	bl	8000600 <__aeabi_dmul>
 8005fb2:	a365      	add	r3, pc, #404	; (adr r3, 8006148 <atan+0x308>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa f96e 	bl	8000298 <__aeabi_dsub>
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	f7fa fb1e 	bl	8000600 <__aeabi_dmul>
 8005fc4:	a362      	add	r3, pc, #392	; (adr r3, 8006150 <atan+0x310>)
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f7fa f965 	bl	8000298 <__aeabi_dsub>
 8005fce:	4632      	mov	r2, r6
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	f7fa fb15 	bl	8000600 <__aeabi_dmul>
 8005fd6:	a360      	add	r3, pc, #384	; (adr r3, 8006158 <atan+0x318>)
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa f95c 	bl	8000298 <__aeabi_dsub>
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	f7fa fb0c 	bl	8000600 <__aeabi_dmul>
 8005fe8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	d155      	bne.n	800609e <atan+0x25e>
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	f7fa f951 	bl	800029c <__adddf3>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	f7fa faff 	bl	8000600 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa f945 	bl	8000298 <__aeabi_dsub>
 800600e:	e72c      	b.n	8005e6a <atan+0x2a>
 8006010:	ee10 0a10 	vmov	r0, s0
 8006014:	2200      	movs	r2, #0
 8006016:	4b57      	ldr	r3, [pc, #348]	; (8006174 <atan+0x334>)
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa f93d 	bl	8000298 <__aeabi_dsub>
 800601e:	2200      	movs	r2, #0
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4b53      	ldr	r3, [pc, #332]	; (8006174 <atan+0x334>)
 8006026:	4620      	mov	r0, r4
 8006028:	4629      	mov	r1, r5
 800602a:	f7fa f937 	bl	800029c <__adddf3>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4630      	mov	r0, r6
 8006034:	4639      	mov	r1, r7
 8006036:	f7fa fc0d 	bl	8000854 <__aeabi_ddiv>
 800603a:	f04f 0a01 	mov.w	sl, #1
 800603e:	4604      	mov	r4, r0
 8006040:	460d      	mov	r5, r1
 8006042:	e764      	b.n	8005f0e <atan+0xce>
 8006044:	4b4d      	ldr	r3, [pc, #308]	; (800617c <atan+0x33c>)
 8006046:	429e      	cmp	r6, r3
 8006048:	dc1d      	bgt.n	8006086 <atan+0x246>
 800604a:	ee10 0a10 	vmov	r0, s0
 800604e:	2200      	movs	r2, #0
 8006050:	4b4b      	ldr	r3, [pc, #300]	; (8006180 <atan+0x340>)
 8006052:	4629      	mov	r1, r5
 8006054:	f7fa f920 	bl	8000298 <__aeabi_dsub>
 8006058:	2200      	movs	r2, #0
 800605a:	4606      	mov	r6, r0
 800605c:	460f      	mov	r7, r1
 800605e:	4b48      	ldr	r3, [pc, #288]	; (8006180 <atan+0x340>)
 8006060:	4620      	mov	r0, r4
 8006062:	4629      	mov	r1, r5
 8006064:	f7fa facc 	bl	8000600 <__aeabi_dmul>
 8006068:	2200      	movs	r2, #0
 800606a:	4b42      	ldr	r3, [pc, #264]	; (8006174 <atan+0x334>)
 800606c:	f7fa f916 	bl	800029c <__adddf3>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa fbec 	bl	8000854 <__aeabi_ddiv>
 800607c:	f04f 0a02 	mov.w	sl, #2
 8006080:	4604      	mov	r4, r0
 8006082:	460d      	mov	r5, r1
 8006084:	e743      	b.n	8005f0e <atan+0xce>
 8006086:	462b      	mov	r3, r5
 8006088:	ee10 2a10 	vmov	r2, s0
 800608c:	2000      	movs	r0, #0
 800608e:	493d      	ldr	r1, [pc, #244]	; (8006184 <atan+0x344>)
 8006090:	f7fa fbe0 	bl	8000854 <__aeabi_ddiv>
 8006094:	f04f 0a03 	mov.w	sl, #3
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
 800609c:	e737      	b.n	8005f0e <atan+0xce>
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa f8fb 	bl	800029c <__adddf3>
 80060a6:	4622      	mov	r2, r4
 80060a8:	462b      	mov	r3, r5
 80060aa:	f7fa faa9 	bl	8000600 <__aeabi_dmul>
 80060ae:	4e36      	ldr	r6, [pc, #216]	; (8006188 <atan+0x348>)
 80060b0:	4b36      	ldr	r3, [pc, #216]	; (800618c <atan+0x34c>)
 80060b2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80060b6:	4456      	add	r6, sl
 80060b8:	449a      	add	sl, r3
 80060ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80060be:	f7fa f8eb 	bl	8000298 <__aeabi_dsub>
 80060c2:	4622      	mov	r2, r4
 80060c4:	462b      	mov	r3, r5
 80060c6:	f7fa f8e7 	bl	8000298 <__aeabi_dsub>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80060d2:	f7fa f8e1 	bl	8000298 <__aeabi_dsub>
 80060d6:	f1bb 0f00 	cmp.w	fp, #0
 80060da:	4604      	mov	r4, r0
 80060dc:	460d      	mov	r5, r1
 80060de:	f6bf aece 	bge.w	8005e7e <atan+0x3e>
 80060e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060e6:	4604      	mov	r4, r0
 80060e8:	461d      	mov	r5, r3
 80060ea:	e6c8      	b.n	8005e7e <atan+0x3e>
 80060ec:	a51c      	add	r5, pc, #112	; (adr r5, 8006160 <atan+0x320>)
 80060ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 80060f2:	e6c4      	b.n	8005e7e <atan+0x3e>
 80060f4:	f3af 8000 	nop.w
 80060f8:	54442d18 	.word	0x54442d18
 80060fc:	bff921fb 	.word	0xbff921fb
 8006100:	8800759c 	.word	0x8800759c
 8006104:	7e37e43c 	.word	0x7e37e43c
 8006108:	e322da11 	.word	0xe322da11
 800610c:	3f90ad3a 	.word	0x3f90ad3a
 8006110:	24760deb 	.word	0x24760deb
 8006114:	3fa97b4b 	.word	0x3fa97b4b
 8006118:	a0d03d51 	.word	0xa0d03d51
 800611c:	3fb10d66 	.word	0x3fb10d66
 8006120:	c54c206e 	.word	0xc54c206e
 8006124:	3fb745cd 	.word	0x3fb745cd
 8006128:	920083ff 	.word	0x920083ff
 800612c:	3fc24924 	.word	0x3fc24924
 8006130:	5555550d 	.word	0x5555550d
 8006134:	3fd55555 	.word	0x3fd55555
 8006138:	2c6a6c2f 	.word	0x2c6a6c2f
 800613c:	bfa2b444 	.word	0xbfa2b444
 8006140:	52defd9a 	.word	0x52defd9a
 8006144:	3fadde2d 	.word	0x3fadde2d
 8006148:	af749a6d 	.word	0xaf749a6d
 800614c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006150:	fe231671 	.word	0xfe231671
 8006154:	3fbc71c6 	.word	0x3fbc71c6
 8006158:	9998ebc4 	.word	0x9998ebc4
 800615c:	3fc99999 	.word	0x3fc99999
 8006160:	54442d18 	.word	0x54442d18
 8006164:	3ff921fb 	.word	0x3ff921fb
 8006168:	440fffff 	.word	0x440fffff
 800616c:	7ff00000 	.word	0x7ff00000
 8006170:	3fdbffff 	.word	0x3fdbffff
 8006174:	3ff00000 	.word	0x3ff00000
 8006178:	3ff2ffff 	.word	0x3ff2ffff
 800617c:	40037fff 	.word	0x40037fff
 8006180:	3ff80000 	.word	0x3ff80000
 8006184:	bff00000 	.word	0xbff00000
 8006188:	080074b0 	.word	0x080074b0
 800618c:	080074d0 	.word	0x080074d0

08006190 <fabs>:
 8006190:	ec53 2b10 	vmov	r2, r3, d0
 8006194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006198:	ec43 2b10 	vmov	d0, r2, r3
 800619c:	4770      	bx	lr
	...

080061a0 <pow>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	ed2d 8b04 	vpush	{d8-d9}
 80061a8:	b08d      	sub	sp, #52	; 0x34
 80061aa:	ec57 6b10 	vmov	r6, r7, d0
 80061ae:	ec55 4b11 	vmov	r4, r5, d1
 80061b2:	f000 f9c9 	bl	8006548 <__ieee754_pow>
 80061b6:	4bae      	ldr	r3, [pc, #696]	; (8006470 <pow+0x2d0>)
 80061b8:	eeb0 8a40 	vmov.f32	s16, s0
 80061bc:	eef0 8a60 	vmov.f32	s17, s1
 80061c0:	f993 9000 	ldrsb.w	r9, [r3]
 80061c4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80061c8:	4698      	mov	r8, r3
 80061ca:	d05f      	beq.n	800628c <pow+0xec>
 80061cc:	4622      	mov	r2, r4
 80061ce:	462b      	mov	r3, r5
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa fcae 	bl	8000b34 <__aeabi_dcmpun>
 80061d8:	4683      	mov	fp, r0
 80061da:	2800      	cmp	r0, #0
 80061dc:	d156      	bne.n	800628c <pow+0xec>
 80061de:	4632      	mov	r2, r6
 80061e0:	463b      	mov	r3, r7
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa fca5 	bl	8000b34 <__aeabi_dcmpun>
 80061ea:	9001      	str	r0, [sp, #4]
 80061ec:	b1e8      	cbz	r0, 800622a <pow+0x8a>
 80061ee:	2200      	movs	r2, #0
 80061f0:	2300      	movs	r3, #0
 80061f2:	4620      	mov	r0, r4
 80061f4:	4629      	mov	r1, r5
 80061f6:	f7fa fc6b 	bl	8000ad0 <__aeabi_dcmpeq>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d046      	beq.n	800628c <pow+0xec>
 80061fe:	2301      	movs	r3, #1
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	4b9c      	ldr	r3, [pc, #624]	; (8006474 <pow+0x2d4>)
 8006204:	9303      	str	r3, [sp, #12]
 8006206:	4b9c      	ldr	r3, [pc, #624]	; (8006478 <pow+0x2d8>)
 8006208:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800620c:	2200      	movs	r2, #0
 800620e:	f1b9 0f02 	cmp.w	r9, #2
 8006212:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006216:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800621a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800621e:	d033      	beq.n	8006288 <pow+0xe8>
 8006220:	a802      	add	r0, sp, #8
 8006222:	f000 ff5b 	bl	80070dc <matherr>
 8006226:	bb48      	cbnz	r0, 800627c <pow+0xdc>
 8006228:	e05e      	b.n	80062e8 <pow+0x148>
 800622a:	f04f 0a00 	mov.w	sl, #0
 800622e:	f04f 0b00 	mov.w	fp, #0
 8006232:	4652      	mov	r2, sl
 8006234:	465b      	mov	r3, fp
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa fc49 	bl	8000ad0 <__aeabi_dcmpeq>
 800623e:	ec4b ab19 	vmov	d9, sl, fp
 8006242:	2800      	cmp	r0, #0
 8006244:	d055      	beq.n	80062f2 <pow+0x152>
 8006246:	4652      	mov	r2, sl
 8006248:	465b      	mov	r3, fp
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	f7fa fc3f 	bl	8000ad0 <__aeabi_dcmpeq>
 8006252:	4680      	mov	r8, r0
 8006254:	b318      	cbz	r0, 800629e <pow+0xfe>
 8006256:	2301      	movs	r3, #1
 8006258:	9302      	str	r3, [sp, #8]
 800625a:	4b86      	ldr	r3, [pc, #536]	; (8006474 <pow+0x2d4>)
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	9b01      	ldr	r3, [sp, #4]
 8006260:	930a      	str	r3, [sp, #40]	; 0x28
 8006262:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006266:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800626a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800626e:	f1b9 0f00 	cmp.w	r9, #0
 8006272:	d0d5      	beq.n	8006220 <pow+0x80>
 8006274:	4b80      	ldr	r3, [pc, #512]	; (8006478 <pow+0x2d8>)
 8006276:	2200      	movs	r2, #0
 8006278:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627e:	b11b      	cbz	r3, 8006288 <pow+0xe8>
 8006280:	f7ff f8d8 	bl	8005434 <__errno>
 8006284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006286:	6003      	str	r3, [r0, #0]
 8006288:	ed9d 8b08 	vldr	d8, [sp, #32]
 800628c:	eeb0 0a48 	vmov.f32	s0, s16
 8006290:	eef0 0a68 	vmov.f32	s1, s17
 8006294:	b00d      	add	sp, #52	; 0x34
 8006296:	ecbd 8b04 	vpop	{d8-d9}
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	ec45 4b10 	vmov	d0, r4, r5
 80062a2:	f000 ff13 	bl	80070cc <finite>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d0f0      	beq.n	800628c <pow+0xec>
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7fa fc17 	bl	8000ae4 <__aeabi_dcmplt>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d0e8      	beq.n	800628c <pow+0xec>
 80062ba:	2301      	movs	r3, #1
 80062bc:	9302      	str	r3, [sp, #8]
 80062be:	4b6d      	ldr	r3, [pc, #436]	; (8006474 <pow+0x2d4>)
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	4b6b      	ldr	r3, [pc, #428]	; (8006470 <pow+0x2d0>)
 80062c4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80062c8:	f993 3000 	ldrsb.w	r3, [r3]
 80062cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80062d4:	b913      	cbnz	r3, 80062dc <pow+0x13c>
 80062d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80062da:	e7a1      	b.n	8006220 <pow+0x80>
 80062dc:	4967      	ldr	r1, [pc, #412]	; (800647c <pow+0x2dc>)
 80062de:	2000      	movs	r0, #0
 80062e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d19b      	bne.n	8006220 <pow+0x80>
 80062e8:	f7ff f8a4 	bl	8005434 <__errno>
 80062ec:	2321      	movs	r3, #33	; 0x21
 80062ee:	6003      	str	r3, [r0, #0]
 80062f0:	e7c4      	b.n	800627c <pow+0xdc>
 80062f2:	eeb0 0a48 	vmov.f32	s0, s16
 80062f6:	eef0 0a68 	vmov.f32	s1, s17
 80062fa:	f000 fee7 	bl	80070cc <finite>
 80062fe:	9001      	str	r0, [sp, #4]
 8006300:	2800      	cmp	r0, #0
 8006302:	f040 808a 	bne.w	800641a <pow+0x27a>
 8006306:	ec47 6b10 	vmov	d0, r6, r7
 800630a:	f000 fedf 	bl	80070cc <finite>
 800630e:	2800      	cmp	r0, #0
 8006310:	f000 8083 	beq.w	800641a <pow+0x27a>
 8006314:	ec45 4b10 	vmov	d0, r4, r5
 8006318:	f000 fed8 	bl	80070cc <finite>
 800631c:	2800      	cmp	r0, #0
 800631e:	d07c      	beq.n	800641a <pow+0x27a>
 8006320:	ec53 2b18 	vmov	r2, r3, d8
 8006324:	ee18 0a10 	vmov	r0, s16
 8006328:	4619      	mov	r1, r3
 800632a:	f7fa fc03 	bl	8000b34 <__aeabi_dcmpun>
 800632e:	f998 9000 	ldrsb.w	r9, [r8]
 8006332:	4b50      	ldr	r3, [pc, #320]	; (8006474 <pow+0x2d4>)
 8006334:	b1b0      	cbz	r0, 8006364 <pow+0x1c4>
 8006336:	2201      	movs	r2, #1
 8006338:	9303      	str	r3, [sp, #12]
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	9202      	str	r2, [sp, #8]
 800633e:	930a      	str	r3, [sp, #40]	; 0x28
 8006340:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006344:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006348:	f1b9 0f00 	cmp.w	r9, #0
 800634c:	d0c3      	beq.n	80062d6 <pow+0x136>
 800634e:	4652      	mov	r2, sl
 8006350:	465b      	mov	r3, fp
 8006352:	4650      	mov	r0, sl
 8006354:	4659      	mov	r1, fp
 8006356:	f7fa fa7d 	bl	8000854 <__aeabi_ddiv>
 800635a:	f1b9 0f02 	cmp.w	r9, #2
 800635e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006362:	e7c0      	b.n	80062e6 <pow+0x146>
 8006364:	2203      	movs	r2, #3
 8006366:	9202      	str	r2, [sp, #8]
 8006368:	9303      	str	r3, [sp, #12]
 800636a:	900a      	str	r0, [sp, #40]	; 0x28
 800636c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006370:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006374:	f1b9 0f00 	cmp.w	r9, #0
 8006378:	d12c      	bne.n	80063d4 <pow+0x234>
 800637a:	4b41      	ldr	r3, [pc, #260]	; (8006480 <pow+0x2e0>)
 800637c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006380:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006384:	4630      	mov	r0, r6
 8006386:	4652      	mov	r2, sl
 8006388:	465b      	mov	r3, fp
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fbaa 	bl	8000ae4 <__aeabi_dcmplt>
 8006390:	2800      	cmp	r0, #0
 8006392:	d066      	beq.n	8006462 <pow+0x2c2>
 8006394:	2200      	movs	r2, #0
 8006396:	4b3b      	ldr	r3, [pc, #236]	; (8006484 <pow+0x2e4>)
 8006398:	4620      	mov	r0, r4
 800639a:	4629      	mov	r1, r5
 800639c:	f7fa f930 	bl	8000600 <__aeabi_dmul>
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	ec45 4b10 	vmov	d0, r4, r5
 80063a8:	f000 fea2 	bl	80070f0 <rint>
 80063ac:	4620      	mov	r0, r4
 80063ae:	ec53 2b10 	vmov	r2, r3, d0
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7fa fb8c 	bl	8000ad0 <__aeabi_dcmpeq>
 80063b8:	b920      	cbnz	r0, 80063c4 <pow+0x224>
 80063ba:	4b33      	ldr	r3, [pc, #204]	; (8006488 <pow+0x2e8>)
 80063bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80063c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063c4:	f998 3000 	ldrsb.w	r3, [r8]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d14a      	bne.n	8006462 <pow+0x2c2>
 80063cc:	f7ff f832 	bl	8005434 <__errno>
 80063d0:	2322      	movs	r3, #34	; 0x22
 80063d2:	e78c      	b.n	80062ee <pow+0x14e>
 80063d4:	4b2d      	ldr	r3, [pc, #180]	; (800648c <pow+0x2ec>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063dc:	4630      	mov	r0, r6
 80063de:	4652      	mov	r2, sl
 80063e0:	465b      	mov	r3, fp
 80063e2:	4639      	mov	r1, r7
 80063e4:	f7fa fb7e 	bl	8000ae4 <__aeabi_dcmplt>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d0eb      	beq.n	80063c4 <pow+0x224>
 80063ec:	2200      	movs	r2, #0
 80063ee:	4b25      	ldr	r3, [pc, #148]	; (8006484 <pow+0x2e4>)
 80063f0:	4620      	mov	r0, r4
 80063f2:	4629      	mov	r1, r5
 80063f4:	f7fa f904 	bl	8000600 <__aeabi_dmul>
 80063f8:	4604      	mov	r4, r0
 80063fa:	460d      	mov	r5, r1
 80063fc:	ec45 4b10 	vmov	d0, r4, r5
 8006400:	f000 fe76 	bl	80070f0 <rint>
 8006404:	4620      	mov	r0, r4
 8006406:	ec53 2b10 	vmov	r2, r3, d0
 800640a:	4629      	mov	r1, r5
 800640c:	f7fa fb60 	bl	8000ad0 <__aeabi_dcmpeq>
 8006410:	2800      	cmp	r0, #0
 8006412:	d1d7      	bne.n	80063c4 <pow+0x224>
 8006414:	2200      	movs	r2, #0
 8006416:	4b19      	ldr	r3, [pc, #100]	; (800647c <pow+0x2dc>)
 8006418:	e7d2      	b.n	80063c0 <pow+0x220>
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	ec51 0b18 	vmov	r0, r1, d8
 8006422:	f7fa fb55 	bl	8000ad0 <__aeabi_dcmpeq>
 8006426:	2800      	cmp	r0, #0
 8006428:	f43f af30 	beq.w	800628c <pow+0xec>
 800642c:	ec47 6b10 	vmov	d0, r6, r7
 8006430:	f000 fe4c 	bl	80070cc <finite>
 8006434:	2800      	cmp	r0, #0
 8006436:	f43f af29 	beq.w	800628c <pow+0xec>
 800643a:	ec45 4b10 	vmov	d0, r4, r5
 800643e:	f000 fe45 	bl	80070cc <finite>
 8006442:	2800      	cmp	r0, #0
 8006444:	f43f af22 	beq.w	800628c <pow+0xec>
 8006448:	2304      	movs	r3, #4
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <pow+0x2d4>)
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	2300      	movs	r3, #0
 8006452:	930a      	str	r3, [sp, #40]	; 0x28
 8006454:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006458:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800645c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006460:	e7b0      	b.n	80063c4 <pow+0x224>
 8006462:	a802      	add	r0, sp, #8
 8006464:	f000 fe3a 	bl	80070dc <matherr>
 8006468:	2800      	cmp	r0, #0
 800646a:	f47f af07 	bne.w	800627c <pow+0xdc>
 800646e:	e7ad      	b.n	80063cc <pow+0x22c>
 8006470:	20000220 	.word	0x20000220
 8006474:	080074f0 	.word	0x080074f0
 8006478:	3ff00000 	.word	0x3ff00000
 800647c:	fff00000 	.word	0xfff00000
 8006480:	47efffff 	.word	0x47efffff
 8006484:	3fe00000 	.word	0x3fe00000
 8006488:	c7efffff 	.word	0xc7efffff
 800648c:	7ff00000 	.word	0x7ff00000

08006490 <sqrt>:
 8006490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006494:	ed2d 8b02 	vpush	{d8}
 8006498:	b08b      	sub	sp, #44	; 0x2c
 800649a:	ec55 4b10 	vmov	r4, r5, d0
 800649e:	f000 fd65 	bl	8006f6c <__ieee754_sqrt>
 80064a2:	4b26      	ldr	r3, [pc, #152]	; (800653c <sqrt+0xac>)
 80064a4:	eeb0 8a40 	vmov.f32	s16, s0
 80064a8:	eef0 8a60 	vmov.f32	s17, s1
 80064ac:	f993 6000 	ldrsb.w	r6, [r3]
 80064b0:	1c73      	adds	r3, r6, #1
 80064b2:	d02a      	beq.n	800650a <sqrt+0x7a>
 80064b4:	4622      	mov	r2, r4
 80064b6:	462b      	mov	r3, r5
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7fa fb3a 	bl	8000b34 <__aeabi_dcmpun>
 80064c0:	4607      	mov	r7, r0
 80064c2:	bb10      	cbnz	r0, 800650a <sqrt+0x7a>
 80064c4:	f04f 0800 	mov.w	r8, #0
 80064c8:	f04f 0900 	mov.w	r9, #0
 80064cc:	4642      	mov	r2, r8
 80064ce:	464b      	mov	r3, r9
 80064d0:	4620      	mov	r0, r4
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7fa fb06 	bl	8000ae4 <__aeabi_dcmplt>
 80064d8:	b1b8      	cbz	r0, 800650a <sqrt+0x7a>
 80064da:	2301      	movs	r3, #1
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4b18      	ldr	r3, [pc, #96]	; (8006540 <sqrt+0xb0>)
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	9708      	str	r7, [sp, #32]
 80064e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80064e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80064ec:	b9b6      	cbnz	r6, 800651c <sqrt+0x8c>
 80064ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80064f2:	4668      	mov	r0, sp
 80064f4:	f000 fdf2 	bl	80070dc <matherr>
 80064f8:	b1d0      	cbz	r0, 8006530 <sqrt+0xa0>
 80064fa:	9b08      	ldr	r3, [sp, #32]
 80064fc:	b11b      	cbz	r3, 8006506 <sqrt+0x76>
 80064fe:	f7fe ff99 	bl	8005434 <__errno>
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	6003      	str	r3, [r0, #0]
 8006506:	ed9d 8b06 	vldr	d8, [sp, #24]
 800650a:	eeb0 0a48 	vmov.f32	s0, s16
 800650e:	eef0 0a68 	vmov.f32	s1, s17
 8006512:	b00b      	add	sp, #44	; 0x2c
 8006514:	ecbd 8b02 	vpop	{d8}
 8006518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	4640      	mov	r0, r8
 8006522:	4649      	mov	r1, r9
 8006524:	f7fa f996 	bl	8000854 <__aeabi_ddiv>
 8006528:	2e02      	cmp	r6, #2
 800652a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800652e:	d1e0      	bne.n	80064f2 <sqrt+0x62>
 8006530:	f7fe ff80 	bl	8005434 <__errno>
 8006534:	2321      	movs	r3, #33	; 0x21
 8006536:	6003      	str	r3, [r0, #0]
 8006538:	e7df      	b.n	80064fa <sqrt+0x6a>
 800653a:	bf00      	nop
 800653c:	20000220 	.word	0x20000220
 8006540:	080074f4 	.word	0x080074f4
 8006544:	00000000 	.word	0x00000000

08006548 <__ieee754_pow>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	b091      	sub	sp, #68	; 0x44
 800654e:	ed8d 1b00 	vstr	d1, [sp]
 8006552:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8006556:	ec57 6b10 	vmov	r6, r7, d0
 800655a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800655e:	ea58 0302 	orrs.w	r3, r8, r2
 8006562:	ee10 aa10 	vmov	sl, s0
 8006566:	463d      	mov	r5, r7
 8006568:	f000 84bd 	beq.w	8006ee6 <__ieee754_pow+0x99e>
 800656c:	4b78      	ldr	r3, [pc, #480]	; (8006750 <__ieee754_pow+0x208>)
 800656e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006572:	429c      	cmp	r4, r3
 8006574:	dc09      	bgt.n	800658a <__ieee754_pow+0x42>
 8006576:	d103      	bne.n	8006580 <__ieee754_pow+0x38>
 8006578:	b93e      	cbnz	r6, 800658a <__ieee754_pow+0x42>
 800657a:	45a0      	cmp	r8, r4
 800657c:	dc0d      	bgt.n	800659a <__ieee754_pow+0x52>
 800657e:	e001      	b.n	8006584 <__ieee754_pow+0x3c>
 8006580:	4598      	cmp	r8, r3
 8006582:	dc02      	bgt.n	800658a <__ieee754_pow+0x42>
 8006584:	4598      	cmp	r8, r3
 8006586:	d10e      	bne.n	80065a6 <__ieee754_pow+0x5e>
 8006588:	b16a      	cbz	r2, 80065a6 <__ieee754_pow+0x5e>
 800658a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800658e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006592:	ea54 030a 	orrs.w	r3, r4, sl
 8006596:	f000 84a6 	beq.w	8006ee6 <__ieee754_pow+0x99e>
 800659a:	486e      	ldr	r0, [pc, #440]	; (8006754 <__ieee754_pow+0x20c>)
 800659c:	b011      	add	sp, #68	; 0x44
 800659e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a2:	f000 bd9d 	b.w	80070e0 <nan>
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	da53      	bge.n	8006652 <__ieee754_pow+0x10a>
 80065aa:	4b6b      	ldr	r3, [pc, #428]	; (8006758 <__ieee754_pow+0x210>)
 80065ac:	4598      	cmp	r8, r3
 80065ae:	dc4d      	bgt.n	800664c <__ieee754_pow+0x104>
 80065b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80065b4:	4598      	cmp	r8, r3
 80065b6:	dd4c      	ble.n	8006652 <__ieee754_pow+0x10a>
 80065b8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80065bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065c0:	2b14      	cmp	r3, #20
 80065c2:	dd26      	ble.n	8006612 <__ieee754_pow+0xca>
 80065c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80065c8:	fa22 f103 	lsr.w	r1, r2, r3
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d13e      	bne.n	8006652 <__ieee754_pow+0x10a>
 80065d4:	f001 0101 	and.w	r1, r1, #1
 80065d8:	f1c1 0b02 	rsb	fp, r1, #2
 80065dc:	2a00      	cmp	r2, #0
 80065de:	d15b      	bne.n	8006698 <__ieee754_pow+0x150>
 80065e0:	4b5b      	ldr	r3, [pc, #364]	; (8006750 <__ieee754_pow+0x208>)
 80065e2:	4598      	cmp	r8, r3
 80065e4:	d124      	bne.n	8006630 <__ieee754_pow+0xe8>
 80065e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80065ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80065ee:	ea53 030a 	orrs.w	r3, r3, sl
 80065f2:	f000 8478 	beq.w	8006ee6 <__ieee754_pow+0x99e>
 80065f6:	4b59      	ldr	r3, [pc, #356]	; (800675c <__ieee754_pow+0x214>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	dd2d      	ble.n	8006658 <__ieee754_pow+0x110>
 80065fc:	f1b9 0f00 	cmp.w	r9, #0
 8006600:	f280 8475 	bge.w	8006eee <__ieee754_pow+0x9a6>
 8006604:	2000      	movs	r0, #0
 8006606:	2100      	movs	r1, #0
 8006608:	ec41 0b10 	vmov	d0, r0, r1
 800660c:	b011      	add	sp, #68	; 0x44
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	2a00      	cmp	r2, #0
 8006614:	d13e      	bne.n	8006694 <__ieee754_pow+0x14c>
 8006616:	f1c3 0314 	rsb	r3, r3, #20
 800661a:	fa48 f103 	asr.w	r1, r8, r3
 800661e:	fa01 f303 	lsl.w	r3, r1, r3
 8006622:	4598      	cmp	r8, r3
 8006624:	f040 846b 	bne.w	8006efe <__ieee754_pow+0x9b6>
 8006628:	f001 0101 	and.w	r1, r1, #1
 800662c:	f1c1 0b02 	rsb	fp, r1, #2
 8006630:	4b4b      	ldr	r3, [pc, #300]	; (8006760 <__ieee754_pow+0x218>)
 8006632:	4598      	cmp	r8, r3
 8006634:	d118      	bne.n	8006668 <__ieee754_pow+0x120>
 8006636:	f1b9 0f00 	cmp.w	r9, #0
 800663a:	f280 845c 	bge.w	8006ef6 <__ieee754_pow+0x9ae>
 800663e:	4948      	ldr	r1, [pc, #288]	; (8006760 <__ieee754_pow+0x218>)
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	2000      	movs	r0, #0
 8006646:	f7fa f905 	bl	8000854 <__aeabi_ddiv>
 800664a:	e7dd      	b.n	8006608 <__ieee754_pow+0xc0>
 800664c:	f04f 0b02 	mov.w	fp, #2
 8006650:	e7c4      	b.n	80065dc <__ieee754_pow+0x94>
 8006652:	f04f 0b00 	mov.w	fp, #0
 8006656:	e7c1      	b.n	80065dc <__ieee754_pow+0x94>
 8006658:	f1b9 0f00 	cmp.w	r9, #0
 800665c:	dad2      	bge.n	8006604 <__ieee754_pow+0xbc>
 800665e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8006662:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006666:	e7cf      	b.n	8006608 <__ieee754_pow+0xc0>
 8006668:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800666c:	d106      	bne.n	800667c <__ieee754_pow+0x134>
 800666e:	4632      	mov	r2, r6
 8006670:	463b      	mov	r3, r7
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	f7f9 ffc3 	bl	8000600 <__aeabi_dmul>
 800667a:	e7c5      	b.n	8006608 <__ieee754_pow+0xc0>
 800667c:	4b39      	ldr	r3, [pc, #228]	; (8006764 <__ieee754_pow+0x21c>)
 800667e:	4599      	cmp	r9, r3
 8006680:	d10a      	bne.n	8006698 <__ieee754_pow+0x150>
 8006682:	2d00      	cmp	r5, #0
 8006684:	db08      	blt.n	8006698 <__ieee754_pow+0x150>
 8006686:	ec47 6b10 	vmov	d0, r6, r7
 800668a:	b011      	add	sp, #68	; 0x44
 800668c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	f000 bc6c 	b.w	8006f6c <__ieee754_sqrt>
 8006694:	f04f 0b00 	mov.w	fp, #0
 8006698:	ec47 6b10 	vmov	d0, r6, r7
 800669c:	f7ff fd78 	bl	8006190 <fabs>
 80066a0:	ec51 0b10 	vmov	r0, r1, d0
 80066a4:	f1ba 0f00 	cmp.w	sl, #0
 80066a8:	d127      	bne.n	80066fa <__ieee754_pow+0x1b2>
 80066aa:	b124      	cbz	r4, 80066b6 <__ieee754_pow+0x16e>
 80066ac:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <__ieee754_pow+0x218>)
 80066ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d121      	bne.n	80066fa <__ieee754_pow+0x1b2>
 80066b6:	f1b9 0f00 	cmp.w	r9, #0
 80066ba:	da05      	bge.n	80066c8 <__ieee754_pow+0x180>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	2000      	movs	r0, #0
 80066c2:	4927      	ldr	r1, [pc, #156]	; (8006760 <__ieee754_pow+0x218>)
 80066c4:	f7fa f8c6 	bl	8000854 <__aeabi_ddiv>
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	da9d      	bge.n	8006608 <__ieee754_pow+0xc0>
 80066cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80066d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80066d4:	ea54 030b 	orrs.w	r3, r4, fp
 80066d8:	d108      	bne.n	80066ec <__ieee754_pow+0x1a4>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4610      	mov	r0, r2
 80066e0:	4619      	mov	r1, r3
 80066e2:	f7f9 fdd9 	bl	8000298 <__aeabi_dsub>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	e7ac      	b.n	8006646 <__ieee754_pow+0xfe>
 80066ec:	f1bb 0f01 	cmp.w	fp, #1
 80066f0:	d18a      	bne.n	8006608 <__ieee754_pow+0xc0>
 80066f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066f6:	4619      	mov	r1, r3
 80066f8:	e786      	b.n	8006608 <__ieee754_pow+0xc0>
 80066fa:	0fed      	lsrs	r5, r5, #31
 80066fc:	1e6b      	subs	r3, r5, #1
 80066fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006700:	ea5b 0303 	orrs.w	r3, fp, r3
 8006704:	d102      	bne.n	800670c <__ieee754_pow+0x1c4>
 8006706:	4632      	mov	r2, r6
 8006708:	463b      	mov	r3, r7
 800670a:	e7e8      	b.n	80066de <__ieee754_pow+0x196>
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <__ieee754_pow+0x220>)
 800670e:	4598      	cmp	r8, r3
 8006710:	f340 80fe 	ble.w	8006910 <__ieee754_pow+0x3c8>
 8006714:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006718:	4598      	cmp	r8, r3
 800671a:	dd0a      	ble.n	8006732 <__ieee754_pow+0x1ea>
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <__ieee754_pow+0x214>)
 800671e:	429c      	cmp	r4, r3
 8006720:	dc0d      	bgt.n	800673e <__ieee754_pow+0x1f6>
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	f6bf af6d 	bge.w	8006604 <__ieee754_pow+0xbc>
 800672a:	a307      	add	r3, pc, #28	; (adr r3, 8006748 <__ieee754_pow+0x200>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	e79f      	b.n	8006672 <__ieee754_pow+0x12a>
 8006732:	4b0e      	ldr	r3, [pc, #56]	; (800676c <__ieee754_pow+0x224>)
 8006734:	429c      	cmp	r4, r3
 8006736:	ddf4      	ble.n	8006722 <__ieee754_pow+0x1da>
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <__ieee754_pow+0x218>)
 800673a:	429c      	cmp	r4, r3
 800673c:	dd18      	ble.n	8006770 <__ieee754_pow+0x228>
 800673e:	f1b9 0f00 	cmp.w	r9, #0
 8006742:	dcf2      	bgt.n	800672a <__ieee754_pow+0x1e2>
 8006744:	e75e      	b.n	8006604 <__ieee754_pow+0xbc>
 8006746:	bf00      	nop
 8006748:	8800759c 	.word	0x8800759c
 800674c:	7e37e43c 	.word	0x7e37e43c
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	0800737f 	.word	0x0800737f
 8006758:	433fffff 	.word	0x433fffff
 800675c:	3fefffff 	.word	0x3fefffff
 8006760:	3ff00000 	.word	0x3ff00000
 8006764:	3fe00000 	.word	0x3fe00000
 8006768:	41e00000 	.word	0x41e00000
 800676c:	3feffffe 	.word	0x3feffffe
 8006770:	2200      	movs	r2, #0
 8006772:	4b63      	ldr	r3, [pc, #396]	; (8006900 <__ieee754_pow+0x3b8>)
 8006774:	f7f9 fd90 	bl	8000298 <__aeabi_dsub>
 8006778:	a355      	add	r3, pc, #340	; (adr r3, 80068d0 <__ieee754_pow+0x388>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	f7f9 ff3d 	bl	8000600 <__aeabi_dmul>
 8006786:	a354      	add	r3, pc, #336	; (adr r3, 80068d8 <__ieee754_pow+0x390>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	4606      	mov	r6, r0
 800678e:	460f      	mov	r7, r1
 8006790:	4620      	mov	r0, r4
 8006792:	4629      	mov	r1, r5
 8006794:	f7f9 ff34 	bl	8000600 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679e:	4b59      	ldr	r3, [pc, #356]	; (8006904 <__ieee754_pow+0x3bc>)
 80067a0:	4620      	mov	r0, r4
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7f9 ff2c 	bl	8000600 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	a14c      	add	r1, pc, #304	; (adr r1, 80068e0 <__ieee754_pow+0x398>)
 80067ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b2:	f7f9 fd71 	bl	8000298 <__aeabi_dsub>
 80067b6:	4622      	mov	r2, r4
 80067b8:	462b      	mov	r3, r5
 80067ba:	f7f9 ff21 	bl	8000600 <__aeabi_dmul>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	2000      	movs	r0, #0
 80067c4:	4950      	ldr	r1, [pc, #320]	; (8006908 <__ieee754_pow+0x3c0>)
 80067c6:	f7f9 fd67 	bl	8000298 <__aeabi_dsub>
 80067ca:	4622      	mov	r2, r4
 80067cc:	462b      	mov	r3, r5
 80067ce:	4680      	mov	r8, r0
 80067d0:	4689      	mov	r9, r1
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7f9 ff13 	bl	8000600 <__aeabi_dmul>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	f7f9 ff0d 	bl	8000600 <__aeabi_dmul>
 80067e6:	a340      	add	r3, pc, #256	; (adr r3, 80068e8 <__ieee754_pow+0x3a0>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 ff08 	bl	8000600 <__aeabi_dmul>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f8:	f7f9 fd4e 	bl	8000298 <__aeabi_dsub>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7f9 fd48 	bl	800029c <__adddf3>
 800680c:	2000      	movs	r0, #0
 800680e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006812:	4632      	mov	r2, r6
 8006814:	463b      	mov	r3, r7
 8006816:	f7f9 fd3f 	bl	8000298 <__aeabi_dsub>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7f9 fd39 	bl	8000298 <__aeabi_dsub>
 8006826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006828:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800682c:	4313      	orrs	r3, r2
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	f040 81eb 	bne.w	8006c0c <__ieee754_pow+0x6c4>
 8006836:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80068f0 <__ieee754_pow+0x3a8>
 800683a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800683e:	2400      	movs	r4, #0
 8006840:	4622      	mov	r2, r4
 8006842:	462b      	mov	r3, r5
 8006844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006848:	ed8d 7b02 	vstr	d7, [sp, #8]
 800684c:	f7f9 fd24 	bl	8000298 <__aeabi_dsub>
 8006850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006854:	f7f9 fed4 	bl	8000600 <__aeabi_dmul>
 8006858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800685c:	4680      	mov	r8, r0
 800685e:	4689      	mov	r9, r1
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7f9 fecc 	bl	8000600 <__aeabi_dmul>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4640      	mov	r0, r8
 800686e:	4649      	mov	r1, r9
 8006870:	f7f9 fd14 	bl	800029c <__adddf3>
 8006874:	4622      	mov	r2, r4
 8006876:	462b      	mov	r3, r5
 8006878:	4680      	mov	r8, r0
 800687a:	4689      	mov	r9, r1
 800687c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006880:	f7f9 febe 	bl	8000600 <__aeabi_dmul>
 8006884:	460b      	mov	r3, r1
 8006886:	4604      	mov	r4, r0
 8006888:	460d      	mov	r5, r1
 800688a:	4602      	mov	r2, r0
 800688c:	4649      	mov	r1, r9
 800688e:	4640      	mov	r0, r8
 8006890:	e9cd 4500 	strd	r4, r5, [sp]
 8006894:	f7f9 fd02 	bl	800029c <__adddf3>
 8006898:	4b1c      	ldr	r3, [pc, #112]	; (800690c <__ieee754_pow+0x3c4>)
 800689a:	4299      	cmp	r1, r3
 800689c:	4606      	mov	r6, r0
 800689e:	460f      	mov	r7, r1
 80068a0:	468b      	mov	fp, r1
 80068a2:	f340 82f7 	ble.w	8006e94 <__ieee754_pow+0x94c>
 80068a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80068aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80068ae:	4303      	orrs	r3, r0
 80068b0:	f000 81ea 	beq.w	8006c88 <__ieee754_pow+0x740>
 80068b4:	a310      	add	r3, pc, #64	; (adr r3, 80068f8 <__ieee754_pow+0x3b0>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068be:	f7f9 fe9f 	bl	8000600 <__aeabi_dmul>
 80068c2:	a30d      	add	r3, pc, #52	; (adr r3, 80068f8 <__ieee754_pow+0x3b0>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	e6d5      	b.n	8006676 <__ieee754_pow+0x12e>
 80068ca:	bf00      	nop
 80068cc:	f3af 8000 	nop.w
 80068d0:	60000000 	.word	0x60000000
 80068d4:	3ff71547 	.word	0x3ff71547
 80068d8:	f85ddf44 	.word	0xf85ddf44
 80068dc:	3e54ae0b 	.word	0x3e54ae0b
 80068e0:	55555555 	.word	0x55555555
 80068e4:	3fd55555 	.word	0x3fd55555
 80068e8:	652b82fe 	.word	0x652b82fe
 80068ec:	3ff71547 	.word	0x3ff71547
 80068f0:	00000000 	.word	0x00000000
 80068f4:	bff00000 	.word	0xbff00000
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	7e37e43c 	.word	0x7e37e43c
 8006900:	3ff00000 	.word	0x3ff00000
 8006904:	3fd00000 	.word	0x3fd00000
 8006908:	3fe00000 	.word	0x3fe00000
 800690c:	408fffff 	.word	0x408fffff
 8006910:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	da05      	bge.n	8006926 <__ieee754_pow+0x3de>
 800691a:	4bd3      	ldr	r3, [pc, #844]	; (8006c68 <__ieee754_pow+0x720>)
 800691c:	f7f9 fe70 	bl	8000600 <__aeabi_dmul>
 8006920:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006924:	460c      	mov	r4, r1
 8006926:	1523      	asrs	r3, r4, #20
 8006928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800692c:	4413      	add	r3, r2
 800692e:	9307      	str	r3, [sp, #28]
 8006930:	4bce      	ldr	r3, [pc, #824]	; (8006c6c <__ieee754_pow+0x724>)
 8006932:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006936:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800693a:	429c      	cmp	r4, r3
 800693c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006940:	dd08      	ble.n	8006954 <__ieee754_pow+0x40c>
 8006942:	4bcb      	ldr	r3, [pc, #812]	; (8006c70 <__ieee754_pow+0x728>)
 8006944:	429c      	cmp	r4, r3
 8006946:	f340 815e 	ble.w	8006c06 <__ieee754_pow+0x6be>
 800694a:	9b07      	ldr	r3, [sp, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006954:	f04f 0a00 	mov.w	sl, #0
 8006958:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800695c:	930c      	str	r3, [sp, #48]	; 0x30
 800695e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006960:	4bc4      	ldr	r3, [pc, #784]	; (8006c74 <__ieee754_pow+0x72c>)
 8006962:	4413      	add	r3, r2
 8006964:	ed93 7b00 	vldr	d7, [r3]
 8006968:	4629      	mov	r1, r5
 800696a:	ec53 2b17 	vmov	r2, r3, d7
 800696e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006972:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006976:	f7f9 fc8f 	bl	8000298 <__aeabi_dsub>
 800697a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006986:	f7f9 fc89 	bl	800029c <__adddf3>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	2000      	movs	r0, #0
 8006990:	49b9      	ldr	r1, [pc, #740]	; (8006c78 <__ieee754_pow+0x730>)
 8006992:	f7f9 ff5f 	bl	8000854 <__aeabi_ddiv>
 8006996:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fe2d 	bl	8000600 <__aeabi_dmul>
 80069a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80069b2:	2300      	movs	r3, #0
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069ba:	106d      	asrs	r5, r5, #1
 80069bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80069c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80069c4:	2200      	movs	r2, #0
 80069c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80069ca:	4640      	mov	r0, r8
 80069cc:	4649      	mov	r1, r9
 80069ce:	4614      	mov	r4, r2
 80069d0:	461d      	mov	r5, r3
 80069d2:	f7f9 fe15 	bl	8000600 <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7f9 fc5b 	bl	8000298 <__aeabi_dsub>
 80069e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069e6:	4606      	mov	r6, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7f9 fc53 	bl	8000298 <__aeabi_dsub>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069fa:	f7f9 fc4d 	bl	8000298 <__aeabi_dsub>
 80069fe:	4642      	mov	r2, r8
 8006a00:	464b      	mov	r3, r9
 8006a02:	f7f9 fdfd 	bl	8000600 <__aeabi_dmul>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	f7f9 fc43 	bl	8000298 <__aeabi_dsub>
 8006a12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a16:	f7f9 fdf3 	bl	8000600 <__aeabi_dmul>
 8006a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	f7f9 fdeb 	bl	8000600 <__aeabi_dmul>
 8006a2a:	a37b      	add	r3, pc, #492	; (adr r3, 8006c18 <__ieee754_pow+0x6d0>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	f7f9 fde4 	bl	8000600 <__aeabi_dmul>
 8006a38:	a379      	add	r3, pc, #484	; (adr r3, 8006c20 <__ieee754_pow+0x6d8>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fc2d 	bl	800029c <__adddf3>
 8006a42:	4622      	mov	r2, r4
 8006a44:	462b      	mov	r3, r5
 8006a46:	f7f9 fddb 	bl	8000600 <__aeabi_dmul>
 8006a4a:	a377      	add	r3, pc, #476	; (adr r3, 8006c28 <__ieee754_pow+0x6e0>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fc24 	bl	800029c <__adddf3>
 8006a54:	4622      	mov	r2, r4
 8006a56:	462b      	mov	r3, r5
 8006a58:	f7f9 fdd2 	bl	8000600 <__aeabi_dmul>
 8006a5c:	a374      	add	r3, pc, #464	; (adr r3, 8006c30 <__ieee754_pow+0x6e8>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f7f9 fc1b 	bl	800029c <__adddf3>
 8006a66:	4622      	mov	r2, r4
 8006a68:	462b      	mov	r3, r5
 8006a6a:	f7f9 fdc9 	bl	8000600 <__aeabi_dmul>
 8006a6e:	a372      	add	r3, pc, #456	; (adr r3, 8006c38 <__ieee754_pow+0x6f0>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fc12 	bl	800029c <__adddf3>
 8006a78:	4622      	mov	r2, r4
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	f7f9 fdc0 	bl	8000600 <__aeabi_dmul>
 8006a80:	a36f      	add	r3, pc, #444	; (adr r3, 8006c40 <__ieee754_pow+0x6f8>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fc09 	bl	800029c <__adddf3>
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	462b      	mov	r3, r5
 8006a92:	4620      	mov	r0, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	f7f9 fdb3 	bl	8000600 <__aeabi_dmul>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7f9 fdad 	bl	8000600 <__aeabi_dmul>
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	460d      	mov	r5, r1
 8006aac:	464b      	mov	r3, r9
 8006aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ab2:	f7f9 fbf3 	bl	800029c <__adddf3>
 8006ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aba:	f7f9 fda1 	bl	8000600 <__aeabi_dmul>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f7f9 fbeb 	bl	800029c <__adddf3>
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
 8006acc:	464b      	mov	r3, r9
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	f7f9 fd95 	bl	8000600 <__aeabi_dmul>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4b68      	ldr	r3, [pc, #416]	; (8006c7c <__ieee754_pow+0x734>)
 8006ada:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ade:	f7f9 fbdd 	bl	800029c <__adddf3>
 8006ae2:	4632      	mov	r2, r6
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	f7f9 fbd9 	bl	800029c <__adddf3>
 8006aea:	9802      	ldr	r0, [sp, #8]
 8006aec:	460d      	mov	r5, r1
 8006aee:	4604      	mov	r4, r0
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4640      	mov	r0, r8
 8006af6:	4649      	mov	r1, r9
 8006af8:	f7f9 fd82 	bl	8000600 <__aeabi_dmul>
 8006afc:	2200      	movs	r2, #0
 8006afe:	4680      	mov	r8, r0
 8006b00:	4689      	mov	r9, r1
 8006b02:	4b5e      	ldr	r3, [pc, #376]	; (8006c7c <__ieee754_pow+0x734>)
 8006b04:	4620      	mov	r0, r4
 8006b06:	4629      	mov	r1, r5
 8006b08:	f7f9 fbc6 	bl	8000298 <__aeabi_dsub>
 8006b0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b10:	f7f9 fbc2 	bl	8000298 <__aeabi_dsub>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 fbbc 	bl	8000298 <__aeabi_dsub>
 8006b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b24:	f7f9 fd6c 	bl	8000600 <__aeabi_dmul>
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	462b      	mov	r3, r5
 8006b30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b34:	f7f9 fd64 	bl	8000600 <__aeabi_dmul>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f7f9 fbac 	bl	800029c <__adddf3>
 8006b44:	4606      	mov	r6, r0
 8006b46:	460f      	mov	r7, r1
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	4649      	mov	r1, r9
 8006b50:	f7f9 fba4 	bl	800029c <__adddf3>
 8006b54:	9802      	ldr	r0, [sp, #8]
 8006b56:	a33c      	add	r3, pc, #240	; (adr r3, 8006c48 <__ieee754_pow+0x700>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	460d      	mov	r5, r1
 8006b60:	f7f9 fd4e 	bl	8000600 <__aeabi_dmul>
 8006b64:	4642      	mov	r2, r8
 8006b66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	4629      	mov	r1, r5
 8006b70:	f7f9 fb92 	bl	8000298 <__aeabi_dsub>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	f7f9 fb8c 	bl	8000298 <__aeabi_dsub>
 8006b80:	a333      	add	r3, pc, #204	; (adr r3, 8006c50 <__ieee754_pow+0x708>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fd3b 	bl	8000600 <__aeabi_dmul>
 8006b8a:	a333      	add	r3, pc, #204	; (adr r3, 8006c58 <__ieee754_pow+0x710>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	4606      	mov	r6, r0
 8006b92:	460f      	mov	r7, r1
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fd32 	bl	8000600 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 fb7a 	bl	800029c <__adddf3>
 8006ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006baa:	4b35      	ldr	r3, [pc, #212]	; (8006c80 <__ieee754_pow+0x738>)
 8006bac:	4413      	add	r3, r2
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f7f9 fb73 	bl	800029c <__adddf3>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	9807      	ldr	r0, [sp, #28]
 8006bba:	460d      	mov	r5, r1
 8006bbc:	f7f9 fcba 	bl	8000534 <__aeabi_i2d>
 8006bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bc2:	4b30      	ldr	r3, [pc, #192]	; (8006c84 <__ieee754_pow+0x73c>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460f      	mov	r7, r1
 8006bce:	4622      	mov	r2, r4
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bd6:	f7f9 fb61 	bl	800029c <__adddf3>
 8006bda:	4642      	mov	r2, r8
 8006bdc:	464b      	mov	r3, r9
 8006bde:	f7f9 fb5d 	bl	800029c <__adddf3>
 8006be2:	4632      	mov	r2, r6
 8006be4:	463b      	mov	r3, r7
 8006be6:	f7f9 fb59 	bl	800029c <__adddf3>
 8006bea:	9802      	ldr	r0, [sp, #8]
 8006bec:	4632      	mov	r2, r6
 8006bee:	463b      	mov	r3, r7
 8006bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf4:	f7f9 fb50 	bl	8000298 <__aeabi_dsub>
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	f7f9 fb4c 	bl	8000298 <__aeabi_dsub>
 8006c00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c04:	e607      	b.n	8006816 <__ieee754_pow+0x2ce>
 8006c06:	f04f 0a01 	mov.w	sl, #1
 8006c0a:	e6a5      	b.n	8006958 <__ieee754_pow+0x410>
 8006c0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006c60 <__ieee754_pow+0x718>
 8006c10:	e613      	b.n	800683a <__ieee754_pow+0x2f2>
 8006c12:	bf00      	nop
 8006c14:	f3af 8000 	nop.w
 8006c18:	4a454eef 	.word	0x4a454eef
 8006c1c:	3fca7e28 	.word	0x3fca7e28
 8006c20:	93c9db65 	.word	0x93c9db65
 8006c24:	3fcd864a 	.word	0x3fcd864a
 8006c28:	a91d4101 	.word	0xa91d4101
 8006c2c:	3fd17460 	.word	0x3fd17460
 8006c30:	518f264d 	.word	0x518f264d
 8006c34:	3fd55555 	.word	0x3fd55555
 8006c38:	db6fabff 	.word	0xdb6fabff
 8006c3c:	3fdb6db6 	.word	0x3fdb6db6
 8006c40:	33333303 	.word	0x33333303
 8006c44:	3fe33333 	.word	0x3fe33333
 8006c48:	e0000000 	.word	0xe0000000
 8006c4c:	3feec709 	.word	0x3feec709
 8006c50:	dc3a03fd 	.word	0xdc3a03fd
 8006c54:	3feec709 	.word	0x3feec709
 8006c58:	145b01f5 	.word	0x145b01f5
 8006c5c:	be3e2fe0 	.word	0xbe3e2fe0
 8006c60:	00000000 	.word	0x00000000
 8006c64:	3ff00000 	.word	0x3ff00000
 8006c68:	43400000 	.word	0x43400000
 8006c6c:	0003988e 	.word	0x0003988e
 8006c70:	000bb679 	.word	0x000bb679
 8006c74:	08007500 	.word	0x08007500
 8006c78:	3ff00000 	.word	0x3ff00000
 8006c7c:	40080000 	.word	0x40080000
 8006c80:	08007520 	.word	0x08007520
 8006c84:	08007510 	.word	0x08007510
 8006c88:	a3b6      	add	r3, pc, #728	; (adr r3, 8006f64 <__ieee754_pow+0xa1c>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	4640      	mov	r0, r8
 8006c90:	4649      	mov	r1, r9
 8006c92:	f7f9 fb03 	bl	800029c <__adddf3>
 8006c96:	4622      	mov	r2, r4
 8006c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 faf9 	bl	8000298 <__aeabi_dsub>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cae:	f7f9 ff37 	bl	8000b20 <__aeabi_dcmpgt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f47f adfe 	bne.w	80068b4 <__ieee754_pow+0x36c>
 8006cb8:	4aa5      	ldr	r2, [pc, #660]	; (8006f50 <__ieee754_pow+0xa08>)
 8006cba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	f340 810c 	ble.w	8006edc <__ieee754_pow+0x994>
 8006cc4:	151b      	asrs	r3, r3, #20
 8006cc6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006cca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006cce:	fa4a f303 	asr.w	r3, sl, r3
 8006cd2:	445b      	add	r3, fp
 8006cd4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006cd8:	4e9e      	ldr	r6, [pc, #632]	; (8006f54 <__ieee754_pow+0xa0c>)
 8006cda:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006cde:	4116      	asrs	r6, r2
 8006ce0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	ea23 0106 	bic.w	r1, r3, r6
 8006cea:	f1c2 0214 	rsb	r2, r2, #20
 8006cee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006cf2:	fa4a fa02 	asr.w	sl, sl, r2
 8006cf6:	f1bb 0f00 	cmp.w	fp, #0
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	bfb8      	it	lt
 8006d04:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d08:	f7f9 fac6 	bl	8000298 <__aeabi_dsub>
 8006d0c:	e9cd 0100 	strd	r0, r1, [sp]
 8006d10:	4642      	mov	r2, r8
 8006d12:	464b      	mov	r3, r9
 8006d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d18:	f7f9 fac0 	bl	800029c <__adddf3>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	a37a      	add	r3, pc, #488	; (adr r3, 8006f08 <__ieee754_pow+0x9c0>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	f7f9 fc6a 	bl	8000600 <__aeabi_dmul>
 8006d2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d30:	4606      	mov	r6, r0
 8006d32:	460f      	mov	r7, r1
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	f7f9 faae 	bl	8000298 <__aeabi_dsub>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4640      	mov	r0, r8
 8006d42:	4649      	mov	r1, r9
 8006d44:	f7f9 faa8 	bl	8000298 <__aeabi_dsub>
 8006d48:	a371      	add	r3, pc, #452	; (adr r3, 8006f10 <__ieee754_pow+0x9c8>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 fc57 	bl	8000600 <__aeabi_dmul>
 8006d52:	a371      	add	r3, pc, #452	; (adr r3, 8006f18 <__ieee754_pow+0x9d0>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	4680      	mov	r8, r0
 8006d5a:	4689      	mov	r9, r1
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7f9 fc4e 	bl	8000600 <__aeabi_dmul>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	f7f9 fa96 	bl	800029c <__adddf3>
 8006d70:	4604      	mov	r4, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4630      	mov	r0, r6
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	f7f9 fa8e 	bl	800029c <__adddf3>
 8006d80:	4632      	mov	r2, r6
 8006d82:	463b      	mov	r3, r7
 8006d84:	4680      	mov	r8, r0
 8006d86:	4689      	mov	r9, r1
 8006d88:	f7f9 fa86 	bl	8000298 <__aeabi_dsub>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4620      	mov	r0, r4
 8006d92:	4629      	mov	r1, r5
 8006d94:	f7f9 fa80 	bl	8000298 <__aeabi_dsub>
 8006d98:	4642      	mov	r2, r8
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460f      	mov	r7, r1
 8006d9e:	464b      	mov	r3, r9
 8006da0:	4640      	mov	r0, r8
 8006da2:	4649      	mov	r1, r9
 8006da4:	f7f9 fc2c 	bl	8000600 <__aeabi_dmul>
 8006da8:	a35d      	add	r3, pc, #372	; (adr r3, 8006f20 <__ieee754_pow+0x9d8>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	4604      	mov	r4, r0
 8006db0:	460d      	mov	r5, r1
 8006db2:	f7f9 fc25 	bl	8000600 <__aeabi_dmul>
 8006db6:	a35c      	add	r3, pc, #368	; (adr r3, 8006f28 <__ieee754_pow+0x9e0>)
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	f7f9 fa6c 	bl	8000298 <__aeabi_dsub>
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	462b      	mov	r3, r5
 8006dc4:	f7f9 fc1c 	bl	8000600 <__aeabi_dmul>
 8006dc8:	a359      	add	r3, pc, #356	; (adr r3, 8006f30 <__ieee754_pow+0x9e8>)
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f7f9 fa65 	bl	800029c <__adddf3>
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	f7f9 fc13 	bl	8000600 <__aeabi_dmul>
 8006dda:	a357      	add	r3, pc, #348	; (adr r3, 8006f38 <__ieee754_pow+0x9f0>)
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f7f9 fa5a 	bl	8000298 <__aeabi_dsub>
 8006de4:	4622      	mov	r2, r4
 8006de6:	462b      	mov	r3, r5
 8006de8:	f7f9 fc0a 	bl	8000600 <__aeabi_dmul>
 8006dec:	a354      	add	r3, pc, #336	; (adr r3, 8006f40 <__ieee754_pow+0x9f8>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f7f9 fa53 	bl	800029c <__adddf3>
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	f7f9 fc01 	bl	8000600 <__aeabi_dmul>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	f7f9 fa47 	bl	8000298 <__aeabi_dsub>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fbf3 	bl	8000600 <__aeabi_dmul>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8006e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fa36 	bl	8000298 <__aeabi_dsub>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e34:	f7f9 fd0e 	bl	8000854 <__aeabi_ddiv>
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	463b      	mov	r3, r7
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	f7f9 fbdc 	bl	8000600 <__aeabi_dmul>
 8006e48:	4632      	mov	r2, r6
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	f7f9 fa26 	bl	800029c <__adddf3>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4620      	mov	r0, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	f7f9 fa1e 	bl	8000298 <__aeabi_dsub>
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	f7f9 fa1a 	bl	8000298 <__aeabi_dsub>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	2000      	movs	r0, #0
 8006e6a:	493b      	ldr	r1, [pc, #236]	; (8006f58 <__ieee754_pow+0xa10>)
 8006e6c:	f7f9 fa14 	bl	8000298 <__aeabi_dsub>
 8006e70:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006e74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	da31      	bge.n	8006ee2 <__ieee754_pow+0x99a>
 8006e7e:	4650      	mov	r0, sl
 8006e80:	ec43 2b10 	vmov	d0, r2, r3
 8006e84:	f000 f9bc 	bl	8007200 <scalbn>
 8006e88:	ec51 0b10 	vmov	r0, r1, d0
 8006e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e90:	f7ff bbf1 	b.w	8006676 <__ieee754_pow+0x12e>
 8006e94:	4b31      	ldr	r3, [pc, #196]	; (8006f5c <__ieee754_pow+0xa14>)
 8006e96:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006e9a:	429e      	cmp	r6, r3
 8006e9c:	f77f af0c 	ble.w	8006cb8 <__ieee754_pow+0x770>
 8006ea0:	4b2f      	ldr	r3, [pc, #188]	; (8006f60 <__ieee754_pow+0xa18>)
 8006ea2:	440b      	add	r3, r1
 8006ea4:	4303      	orrs	r3, r0
 8006ea6:	d00b      	beq.n	8006ec0 <__ieee754_pow+0x978>
 8006ea8:	a327      	add	r3, pc, #156	; (adr r3, 8006f48 <__ieee754_pow+0xa00>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb2:	f7f9 fba5 	bl	8000600 <__aeabi_dmul>
 8006eb6:	a324      	add	r3, pc, #144	; (adr r3, 8006f48 <__ieee754_pow+0xa00>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7ff bbdb 	b.w	8006676 <__ieee754_pow+0x12e>
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	f7f9 f9e8 	bl	8000298 <__aeabi_dsub>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4649      	mov	r1, r9
 8006ed0:	f7f9 fe12 	bl	8000af8 <__aeabi_dcmple>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f43f aeef 	beq.w	8006cb8 <__ieee754_pow+0x770>
 8006eda:	e7e5      	b.n	8006ea8 <__ieee754_pow+0x960>
 8006edc:	f04f 0a00 	mov.w	sl, #0
 8006ee0:	e716      	b.n	8006d10 <__ieee754_pow+0x7c8>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	e7d2      	b.n	8006e8c <__ieee754_pow+0x944>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	491b      	ldr	r1, [pc, #108]	; (8006f58 <__ieee754_pow+0xa10>)
 8006eea:	f7ff bb8d 	b.w	8006608 <__ieee754_pow+0xc0>
 8006eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ef2:	f7ff bb89 	b.w	8006608 <__ieee754_pow+0xc0>
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	f7ff bb85 	b.w	8006608 <__ieee754_pow+0xc0>
 8006efe:	4693      	mov	fp, r2
 8006f00:	f7ff bb96 	b.w	8006630 <__ieee754_pow+0xe8>
 8006f04:	f3af 8000 	nop.w
 8006f08:	00000000 	.word	0x00000000
 8006f0c:	3fe62e43 	.word	0x3fe62e43
 8006f10:	fefa39ef 	.word	0xfefa39ef
 8006f14:	3fe62e42 	.word	0x3fe62e42
 8006f18:	0ca86c39 	.word	0x0ca86c39
 8006f1c:	be205c61 	.word	0xbe205c61
 8006f20:	72bea4d0 	.word	0x72bea4d0
 8006f24:	3e663769 	.word	0x3e663769
 8006f28:	c5d26bf1 	.word	0xc5d26bf1
 8006f2c:	3ebbbd41 	.word	0x3ebbbd41
 8006f30:	af25de2c 	.word	0xaf25de2c
 8006f34:	3f11566a 	.word	0x3f11566a
 8006f38:	16bebd93 	.word	0x16bebd93
 8006f3c:	3f66c16c 	.word	0x3f66c16c
 8006f40:	5555553e 	.word	0x5555553e
 8006f44:	3fc55555 	.word	0x3fc55555
 8006f48:	c2f8f359 	.word	0xc2f8f359
 8006f4c:	01a56e1f 	.word	0x01a56e1f
 8006f50:	3fe00000 	.word	0x3fe00000
 8006f54:	000fffff 	.word	0x000fffff
 8006f58:	3ff00000 	.word	0x3ff00000
 8006f5c:	4090cbff 	.word	0x4090cbff
 8006f60:	3f6f3400 	.word	0x3f6f3400
 8006f64:	652b82fe 	.word	0x652b82fe
 8006f68:	3c971547 	.word	0x3c971547

08006f6c <__ieee754_sqrt>:
 8006f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f70:	ec55 4b10 	vmov	r4, r5, d0
 8006f74:	4e54      	ldr	r6, [pc, #336]	; (80070c8 <__ieee754_sqrt+0x15c>)
 8006f76:	43ae      	bics	r6, r5
 8006f78:	ee10 0a10 	vmov	r0, s0
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	462a      	mov	r2, r5
 8006f80:	4621      	mov	r1, r4
 8006f82:	d113      	bne.n	8006fac <__ieee754_sqrt+0x40>
 8006f84:	ee10 2a10 	vmov	r2, s0
 8006f88:	462b      	mov	r3, r5
 8006f8a:	ee10 0a10 	vmov	r0, s0
 8006f8e:	4629      	mov	r1, r5
 8006f90:	f7f9 fb36 	bl	8000600 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	f7f9 f97e 	bl	800029c <__adddf3>
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	ec45 4b10 	vmov	d0, r4, r5
 8006fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fac:	2d00      	cmp	r5, #0
 8006fae:	dc10      	bgt.n	8006fd2 <__ieee754_sqrt+0x66>
 8006fb0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fb4:	4330      	orrs	r0, r6
 8006fb6:	d0f5      	beq.n	8006fa4 <__ieee754_sqrt+0x38>
 8006fb8:	b15d      	cbz	r5, 8006fd2 <__ieee754_sqrt+0x66>
 8006fba:	ee10 2a10 	vmov	r2, s0
 8006fbe:	462b      	mov	r3, r5
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	f7f9 f968 	bl	8000298 <__aeabi_dsub>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	f7f9 fc42 	bl	8000854 <__aeabi_ddiv>
 8006fd0:	e7e6      	b.n	8006fa0 <__ieee754_sqrt+0x34>
 8006fd2:	151b      	asrs	r3, r3, #20
 8006fd4:	d10c      	bne.n	8006ff0 <__ieee754_sqrt+0x84>
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d06d      	beq.n	80070b6 <__ieee754_sqrt+0x14a>
 8006fda:	2000      	movs	r0, #0
 8006fdc:	02d6      	lsls	r6, r2, #11
 8006fde:	d56e      	bpl.n	80070be <__ieee754_sqrt+0x152>
 8006fe0:	1e44      	subs	r4, r0, #1
 8006fe2:	1b1b      	subs	r3, r3, r4
 8006fe4:	f1c0 0420 	rsb	r4, r0, #32
 8006fe8:	fa21 f404 	lsr.w	r4, r1, r4
 8006fec:	4322      	orrs	r2, r4
 8006fee:	4081      	lsls	r1, r0
 8006ff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ff4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006ff8:	07dd      	lsls	r5, r3, #31
 8006ffa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ffe:	bf42      	ittt	mi
 8007000:	0052      	lslmi	r2, r2, #1
 8007002:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8007006:	0049      	lslmi	r1, r1, #1
 8007008:	1058      	asrs	r0, r3, #1
 800700a:	2500      	movs	r5, #0
 800700c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8007010:	441a      	add	r2, r3
 8007012:	0049      	lsls	r1, r1, #1
 8007014:	2316      	movs	r3, #22
 8007016:	462c      	mov	r4, r5
 8007018:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800701c:	19a7      	adds	r7, r4, r6
 800701e:	4297      	cmp	r7, r2
 8007020:	bfde      	ittt	le
 8007022:	1bd2      	suble	r2, r2, r7
 8007024:	19bc      	addle	r4, r7, r6
 8007026:	19ad      	addle	r5, r5, r6
 8007028:	0052      	lsls	r2, r2, #1
 800702a:	3b01      	subs	r3, #1
 800702c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007030:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007034:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007038:	d1f0      	bne.n	800701c <__ieee754_sqrt+0xb0>
 800703a:	f04f 0e20 	mov.w	lr, #32
 800703e:	469c      	mov	ip, r3
 8007040:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007044:	42a2      	cmp	r2, r4
 8007046:	eb06 070c 	add.w	r7, r6, ip
 800704a:	dc02      	bgt.n	8007052 <__ieee754_sqrt+0xe6>
 800704c:	d112      	bne.n	8007074 <__ieee754_sqrt+0x108>
 800704e:	428f      	cmp	r7, r1
 8007050:	d810      	bhi.n	8007074 <__ieee754_sqrt+0x108>
 8007052:	2f00      	cmp	r7, #0
 8007054:	eb07 0c06 	add.w	ip, r7, r6
 8007058:	da34      	bge.n	80070c4 <__ieee754_sqrt+0x158>
 800705a:	f1bc 0f00 	cmp.w	ip, #0
 800705e:	db31      	blt.n	80070c4 <__ieee754_sqrt+0x158>
 8007060:	f104 0801 	add.w	r8, r4, #1
 8007064:	1b12      	subs	r2, r2, r4
 8007066:	428f      	cmp	r7, r1
 8007068:	bf88      	it	hi
 800706a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800706e:	1bc9      	subs	r1, r1, r7
 8007070:	4433      	add	r3, r6
 8007072:	4644      	mov	r4, r8
 8007074:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007078:	f1be 0e01 	subs.w	lr, lr, #1
 800707c:	443a      	add	r2, r7
 800707e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007082:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007086:	d1dd      	bne.n	8007044 <__ieee754_sqrt+0xd8>
 8007088:	430a      	orrs	r2, r1
 800708a:	d006      	beq.n	800709a <__ieee754_sqrt+0x12e>
 800708c:	1c5c      	adds	r4, r3, #1
 800708e:	bf13      	iteet	ne
 8007090:	3301      	addne	r3, #1
 8007092:	3501      	addeq	r5, #1
 8007094:	4673      	moveq	r3, lr
 8007096:	f023 0301 	bicne.w	r3, r3, #1
 800709a:	106a      	asrs	r2, r5, #1
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	07e9      	lsls	r1, r5, #31
 80070a0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80070a4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80070a8:	bf48      	it	mi
 80070aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80070ae:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80070b2:	461c      	mov	r4, r3
 80070b4:	e776      	b.n	8006fa4 <__ieee754_sqrt+0x38>
 80070b6:	0aca      	lsrs	r2, r1, #11
 80070b8:	3b15      	subs	r3, #21
 80070ba:	0549      	lsls	r1, r1, #21
 80070bc:	e78b      	b.n	8006fd6 <__ieee754_sqrt+0x6a>
 80070be:	0052      	lsls	r2, r2, #1
 80070c0:	3001      	adds	r0, #1
 80070c2:	e78b      	b.n	8006fdc <__ieee754_sqrt+0x70>
 80070c4:	46a0      	mov	r8, r4
 80070c6:	e7cd      	b.n	8007064 <__ieee754_sqrt+0xf8>
 80070c8:	7ff00000 	.word	0x7ff00000

080070cc <finite>:
 80070cc:	ee10 3a90 	vmov	r3, s1
 80070d0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80070d4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80070d8:	0fc0      	lsrs	r0, r0, #31
 80070da:	4770      	bx	lr

080070dc <matherr>:
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr

080070e0 <nan>:
 80070e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80070e8 <nan+0x8>
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	00000000 	.word	0x00000000
 80070ec:	7ff80000 	.word	0x7ff80000

080070f0 <rint>:
 80070f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070f2:	ec51 0b10 	vmov	r0, r1, d0
 80070f6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80070fa:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80070fe:	2e13      	cmp	r6, #19
 8007100:	ee10 7a10 	vmov	r7, s0
 8007104:	460b      	mov	r3, r1
 8007106:	4602      	mov	r2, r0
 8007108:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800710c:	dc58      	bgt.n	80071c0 <rint+0xd0>
 800710e:	2e00      	cmp	r6, #0
 8007110:	da2b      	bge.n	800716a <rint+0x7a>
 8007112:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007116:	4302      	orrs	r2, r0
 8007118:	d023      	beq.n	8007162 <rint+0x72>
 800711a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800711e:	4302      	orrs	r2, r0
 8007120:	4251      	negs	r1, r2
 8007122:	4311      	orrs	r1, r2
 8007124:	0b09      	lsrs	r1, r1, #12
 8007126:	0c5b      	lsrs	r3, r3, #17
 8007128:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800712c:	045b      	lsls	r3, r3, #17
 800712e:	ea41 0703 	orr.w	r7, r1, r3
 8007132:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <rint+0x108>)
 8007134:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007138:	4639      	mov	r1, r7
 800713a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800713e:	ee10 0a10 	vmov	r0, s0
 8007142:	4632      	mov	r2, r6
 8007144:	463b      	mov	r3, r7
 8007146:	f7f9 f8a9 	bl	800029c <__adddf3>
 800714a:	e9cd 0100 	strd	r0, r1, [sp]
 800714e:	463b      	mov	r3, r7
 8007150:	4632      	mov	r2, r6
 8007152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007156:	f7f9 f89f 	bl	8000298 <__aeabi_dsub>
 800715a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800715e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8007162:	ec41 0b10 	vmov	d0, r0, r1
 8007166:	b003      	add	sp, #12
 8007168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716a:	4c24      	ldr	r4, [pc, #144]	; (80071fc <rint+0x10c>)
 800716c:	4134      	asrs	r4, r6
 800716e:	ea01 0704 	and.w	r7, r1, r4
 8007172:	4307      	orrs	r7, r0
 8007174:	d0f5      	beq.n	8007162 <rint+0x72>
 8007176:	0861      	lsrs	r1, r4, #1
 8007178:	ea03 0001 	and.w	r0, r3, r1
 800717c:	4302      	orrs	r2, r0
 800717e:	d00b      	beq.n	8007198 <rint+0xa8>
 8007180:	ea23 0101 	bic.w	r1, r3, r1
 8007184:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007188:	2e13      	cmp	r6, #19
 800718a:	fa43 f306 	asr.w	r3, r3, r6
 800718e:	bf0c      	ite	eq
 8007190:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8007194:	2200      	movne	r2, #0
 8007196:	430b      	orrs	r3, r1
 8007198:	4619      	mov	r1, r3
 800719a:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <rint+0x108>)
 800719c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80071a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80071a4:	4610      	mov	r0, r2
 80071a6:	462b      	mov	r3, r5
 80071a8:	4622      	mov	r2, r4
 80071aa:	f7f9 f877 	bl	800029c <__adddf3>
 80071ae:	e9cd 0100 	strd	r0, r1, [sp]
 80071b2:	4622      	mov	r2, r4
 80071b4:	462b      	mov	r3, r5
 80071b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ba:	f7f9 f86d 	bl	8000298 <__aeabi_dsub>
 80071be:	e7d0      	b.n	8007162 <rint+0x72>
 80071c0:	2e33      	cmp	r6, #51	; 0x33
 80071c2:	dd08      	ble.n	80071d6 <rint+0xe6>
 80071c4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80071c8:	d1cb      	bne.n	8007162 <rint+0x72>
 80071ca:	ee10 2a10 	vmov	r2, s0
 80071ce:	460b      	mov	r3, r1
 80071d0:	f7f9 f864 	bl	800029c <__adddf3>
 80071d4:	e7c5      	b.n	8007162 <rint+0x72>
 80071d6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80071da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80071de:	40f4      	lsrs	r4, r6
 80071e0:	4220      	tst	r0, r4
 80071e2:	d0be      	beq.n	8007162 <rint+0x72>
 80071e4:	0861      	lsrs	r1, r4, #1
 80071e6:	420f      	tst	r7, r1
 80071e8:	bf1f      	itttt	ne
 80071ea:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80071ee:	ea27 0101 	bicne.w	r1, r7, r1
 80071f2:	4132      	asrne	r2, r6
 80071f4:	430a      	orrne	r2, r1
 80071f6:	e7cf      	b.n	8007198 <rint+0xa8>
 80071f8:	08007530 	.word	0x08007530
 80071fc:	000fffff 	.word	0x000fffff

08007200 <scalbn>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	ec55 4b10 	vmov	r4, r5, d0
 8007206:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800720a:	4606      	mov	r6, r0
 800720c:	462b      	mov	r3, r5
 800720e:	b9b2      	cbnz	r2, 800723e <scalbn+0x3e>
 8007210:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007214:	4323      	orrs	r3, r4
 8007216:	d03c      	beq.n	8007292 <scalbn+0x92>
 8007218:	2200      	movs	r2, #0
 800721a:	4b33      	ldr	r3, [pc, #204]	; (80072e8 <scalbn+0xe8>)
 800721c:	4629      	mov	r1, r5
 800721e:	ee10 0a10 	vmov	r0, s0
 8007222:	f7f9 f9ed 	bl	8000600 <__aeabi_dmul>
 8007226:	4a31      	ldr	r2, [pc, #196]	; (80072ec <scalbn+0xec>)
 8007228:	4296      	cmp	r6, r2
 800722a:	4604      	mov	r4, r0
 800722c:	460d      	mov	r5, r1
 800722e:	460b      	mov	r3, r1
 8007230:	da13      	bge.n	800725a <scalbn+0x5a>
 8007232:	a329      	add	r3, pc, #164	; (adr r3, 80072d8 <scalbn+0xd8>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f9 f9e2 	bl	8000600 <__aeabi_dmul>
 800723c:	e00a      	b.n	8007254 <scalbn+0x54>
 800723e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007242:	428a      	cmp	r2, r1
 8007244:	d10c      	bne.n	8007260 <scalbn+0x60>
 8007246:	ee10 2a10 	vmov	r2, s0
 800724a:	462b      	mov	r3, r5
 800724c:	4620      	mov	r0, r4
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 f824 	bl	800029c <__adddf3>
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	e01b      	b.n	8007292 <scalbn+0x92>
 800725a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800725e:	3a36      	subs	r2, #54	; 0x36
 8007260:	4432      	add	r2, r6
 8007262:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007266:	428a      	cmp	r2, r1
 8007268:	dd0b      	ble.n	8007282 <scalbn+0x82>
 800726a:	ec45 4b11 	vmov	d1, r4, r5
 800726e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80072e0 <scalbn+0xe0>
 8007272:	f000 f83f 	bl	80072f4 <copysign>
 8007276:	a31a      	add	r3, pc, #104	; (adr r3, 80072e0 <scalbn+0xe0>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	ec51 0b10 	vmov	r0, r1, d0
 8007280:	e7da      	b.n	8007238 <scalbn+0x38>
 8007282:	2a00      	cmp	r2, #0
 8007284:	dd08      	ble.n	8007298 <scalbn+0x98>
 8007286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800728a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800728e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007292:	ec45 4b10 	vmov	d0, r4, r5
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800729c:	da0d      	bge.n	80072ba <scalbn+0xba>
 800729e:	f24c 3350 	movw	r3, #50000	; 0xc350
 80072a2:	429e      	cmp	r6, r3
 80072a4:	ec45 4b11 	vmov	d1, r4, r5
 80072a8:	dce1      	bgt.n	800726e <scalbn+0x6e>
 80072aa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80072d8 <scalbn+0xd8>
 80072ae:	f000 f821 	bl	80072f4 <copysign>
 80072b2:	a309      	add	r3, pc, #36	; (adr r3, 80072d8 <scalbn+0xd8>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	e7e0      	b.n	800727c <scalbn+0x7c>
 80072ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072be:	3236      	adds	r2, #54	; 0x36
 80072c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	2200      	movs	r2, #0
 80072ce:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <scalbn+0xf0>)
 80072d0:	e7b2      	b.n	8007238 <scalbn+0x38>
 80072d2:	bf00      	nop
 80072d4:	f3af 8000 	nop.w
 80072d8:	c2f8f359 	.word	0xc2f8f359
 80072dc:	01a56e1f 	.word	0x01a56e1f
 80072e0:	8800759c 	.word	0x8800759c
 80072e4:	7e37e43c 	.word	0x7e37e43c
 80072e8:	43500000 	.word	0x43500000
 80072ec:	ffff3cb0 	.word	0xffff3cb0
 80072f0:	3c900000 	.word	0x3c900000

080072f4 <copysign>:
 80072f4:	ec53 2b10 	vmov	r2, r3, d0
 80072f8:	ee11 0a90 	vmov	r0, s3
 80072fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007300:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007304:	ea41 0300 	orr.w	r3, r1, r0
 8007308:	ec43 2b10 	vmov	d0, r2, r3
 800730c:	4770      	bx	lr
	...

08007310 <_init>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr

0800731c <_fini>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr
