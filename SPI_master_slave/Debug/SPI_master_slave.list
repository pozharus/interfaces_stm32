
SPI_master_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008488  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08008628  08008628  00018628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  20000000  08008998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005a4  20000210  08008ba8  00020210  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  200007b4  08008ba8  000207b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bde7  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b77  00000000  00000000  0002c027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ab0  00000000  00000000  0002dba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a08  00000000  00000000  0002e650  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004827  00000000  00000000  0002f058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a99  00000000  00000000  0003387f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037318  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003488  00000000  00000000  00037394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008610 	.word	0x08008610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	08008610 	.word	0x08008610

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MPU_begin>:
const uint8_t AK8963_RESET = 0x01;
const uint8_t AK8963_ASA = 0x10;
const uint8_t AK8963_WHO_AM_I = 0x00;

/* starts communication with the MPU-9250 */
int MPU_begin(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8000ec4:	236b      	movs	r3, #107	; 0x6b
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f934 	bl	8001138 <writeRegister>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da02      	bge.n	8000edc <MPU_begin+0x1c>
    return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eda:	e101      	b.n	80010e0 <MPU_begin+0x220>
  }
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8000edc:	236a      	movs	r3, #106	; 0x6a
 8000ede:	2220      	movs	r2, #32
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f928 	bl	8001138 <writeRegister>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da02      	bge.n	8000ef4 <MPU_begin+0x34>
    return -2;
 8000eee:	f06f 0301 	mvn.w	r3, #1
 8000ef2:	e0f5      	b.n	80010e0 <MPU_begin+0x220>
  }
  // set the I2C bus speed to 400 kHz
  if(writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 8000ef4:	2324      	movs	r3, #36	; 0x24
 8000ef6:	220d      	movs	r2, #13
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f91c 	bl	8001138 <writeRegister>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da02      	bge.n	8000f0c <MPU_begin+0x4c>
    return -3;
 8000f06:	f06f 0302 	mvn.w	r3, #2
 8000f0a:	e0e9      	b.n	80010e0 <MPU_begin+0x220>
  }
  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f9d0 	bl	80012b8 <writeAK8963Register>
  // reset the MPU9250
  writeRegister(PWR_MGMNT_1,PWR_RESET);
 8000f18:	236b      	movs	r3, #107	; 0x6b
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f90a 	bl	8001138 <writeRegister>
  // wait for MPU-9250 to come back up
  HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f002 f8b7 	bl	8003098 <HAL_Delay>
  // reset the AK8963
  writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f9c1 	bl	80012b8 <writeAK8963Register>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8000f36:	236b      	movs	r3, #107	; 0x6b
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f8fb 	bl	8001138 <writeRegister>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da02      	bge.n	8000f4e <MPU_begin+0x8e>
    return -4;
 8000f48:	f06f 0303 	mvn.w	r3, #3
 8000f4c:	e0c8      	b.n	80010e0 <MPU_begin+0x220>
  }
  // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
  if((whoAmI() != 113)&&(whoAmI() != 115)){
 8000f4e:	f000 f8cb 	bl	80010e8 <whoAmI>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b71      	cmp	r3, #113	; 0x71
 8000f56:	d007      	beq.n	8000f68 <MPU_begin+0xa8>
 8000f58:	f000 f8c6 	bl	80010e8 <whoAmI>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b73      	cmp	r3, #115	; 0x73
 8000f60:	d002      	beq.n	8000f68 <MPU_begin+0xa8>
    return -5;
 8000f62:	f06f 0304 	mvn.w	r3, #4
 8000f66:	e0bb      	b.n	80010e0 <MPU_begin+0x220>
  }
  // enable accelerometer and gyro
  if(writeRegister(PWR_MGMNT_2,SEN_ENABLE) < 0){
 8000f68:	236c      	movs	r3, #108	; 0x6c
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f8e2 	bl	8001138 <writeRegister>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	da02      	bge.n	8000f80 <MPU_begin+0xc0>
    return -6;
 8000f7a:	f06f 0305 	mvn.w	r3, #5
 8000f7e:	e0af      	b.n	80010e0 <MPU_begin+0x220>
  }
  // setting accel range to 16G as default
  if(writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
 8000f80:	231c      	movs	r3, #28
 8000f82:	2218      	movs	r2, #24
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f8d6 	bl	8001138 <writeRegister>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da02      	bge.n	8000f98 <MPU_begin+0xd8>
    return -7;
 8000f92:	f06f 0306 	mvn.w	r3, #6
 8000f96:	e0a3      	b.n	80010e0 <MPU_begin+0x220>
  }

  // setting the gyro range to 2000DPS as default
  if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
 8000f98:	231b      	movs	r3, #27
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f8ca 	bl	8001138 <writeRegister>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da02      	bge.n	8000fb0 <MPU_begin+0xf0>
    return -8;
 8000faa:	f06f 0307 	mvn.w	r3, #7
 8000fae:	e097      	b.n	80010e0 <MPU_begin+0x220>
  }

  // setting bandwidth to 184Hz as default
  if(writeRegister(ACCEL_CONFIG2,DLPF_184) < 0){
 8000fb0:	231d      	movs	r3, #29
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f8be 	bl	8001138 <writeRegister>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da02      	bge.n	8000fc8 <MPU_begin+0x108>
    return -9;
 8000fc2:	f06f 0308 	mvn.w	r3, #8
 8000fc6:	e08b      	b.n	80010e0 <MPU_begin+0x220>
  }
  if(writeRegister(CONFIG,DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
 8000fc8:	231a      	movs	r3, #26
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8b2 	bl	8001138 <writeRegister>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da02      	bge.n	8000fe0 <MPU_begin+0x120>
    return -10;
 8000fda:	f06f 0309 	mvn.w	r3, #9
 8000fde:	e07f      	b.n	80010e0 <MPU_begin+0x220>
  }

  // setting the sample rate divider to 0 as default
  if(writeRegister(SMPDIV,0x00) < 0){
 8000fe0:	2319      	movs	r3, #25
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f8a7 	bl	8001138 <writeRegister>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da02      	bge.n	8000ff6 <MPU_begin+0x136>
    return -11;
 8000ff0:	f06f 030a 	mvn.w	r3, #10
 8000ff4:	e074      	b.n	80010e0 <MPU_begin+0x220>
  }

  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8000ff6:	236a      	movs	r3, #106	; 0x6a
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f89b 	bl	8001138 <writeRegister>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	da02      	bge.n	800100e <MPU_begin+0x14e>
  	return -12;
 8001008:	f06f 030b 	mvn.w	r3, #11
 800100c:	e068      	b.n	80010e0 <MPU_begin+0x220>
  }
	// set the I2C bus speed to 400 kHz
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 800100e:	2324      	movs	r3, #36	; 0x24
 8001010:	220d      	movs	r2, #13
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f88f 	bl	8001138 <writeRegister>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	da02      	bge.n	8001026 <MPU_begin+0x166>
		return -13;
 8001020:	f06f 030c 	mvn.w	r3, #12
 8001024:	e05c      	b.n	80010e0 <MPU_begin+0x220>
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 72 ){
 8001026:	f000 f873 	bl	8001110 <whoAmIAK8963>
 800102a:	4603      	mov	r3, r0
 800102c:	2b48      	cmp	r3, #72	; 0x48
 800102e:	d002      	beq.n	8001036 <MPU_begin+0x176>
    return -14;
 8001030:	f06f 030d 	mvn.w	r3, #13
 8001034:	e054      	b.n	80010e0 <MPU_begin+0x220>
	}

  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8001036:	230a      	movs	r3, #10
 8001038:	2200      	movs	r2, #0
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f93b 	bl	80012b8 <writeAK8963Register>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	da02      	bge.n	800104e <MPU_begin+0x18e>
    return -15;
 8001048:	f06f 030e 	mvn.w	r3, #14
 800104c:	e048      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f002 f822 	bl	8003098 <HAL_Delay>
  // set AK8963 to FUSE ROM access
  if(writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM) < 0){
 8001054:	230a      	movs	r3, #10
 8001056:	220f      	movs	r2, #15
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f92c 	bl	80012b8 <writeAK8963Register>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	da02      	bge.n	800106c <MPU_begin+0x1ac>
    return -16;
 8001066:	f06f 030f 	mvn.w	r3, #15
 800106a:	e039      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f002 f813 	bl	8003098 <HAL_Delay>
  // read the AK8963 ASA registers and compute magnetometer scale factors
  readAK8963Registers(AK8963_ASA,3,_buffer);
 8001072:	2310      	movs	r3, #16
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <MPU_begin+0x224>)
 8001076:	2103      	movs	r1, #3
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f973 	bl	8001364 <readAK8963Registers>

  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 800107e:	230a      	movs	r3, #10
 8001080:	2200      	movs	r2, #0
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f917 	bl	80012b8 <writeAK8963Register>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	da02      	bge.n	8001096 <MPU_begin+0x1d6>
    return -17;
 8001090:	f06f 0310 	mvn.w	r3, #16
 8001094:	e024      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f001 fffe 	bl	8003098 <HAL_Delay>
  // set AK8963 to 16 bit resolution, 100 Hz update rate
  if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 800109c:	230a      	movs	r3, #10
 800109e:	2216      	movs	r2, #22
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f908 	bl	80012b8 <writeAK8963Register>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da02      	bge.n	80010b4 <MPU_begin+0x1f4>
    return -18;
 80010ae:	f06f 0311 	mvn.w	r3, #17
 80010b2:	e015      	b.n	80010e0 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f001 ffef 	bl	8003098 <HAL_Delay>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 80010ba:	236b      	movs	r3, #107	; 0x6b
 80010bc:	2201      	movs	r2, #1
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f839 	bl	8001138 <writeRegister>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da02      	bge.n	80010d2 <MPU_begin+0x212>
    return -19;
 80010cc:	f06f 0312 	mvn.w	r3, #18
 80010d0:	e006      	b.n	80010e0 <MPU_begin+0x220>
  }
  // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
  readAK8963Registers(AK8963_HXL,7,_buffer);
 80010d2:	2303      	movs	r3, #3
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <MPU_begin+0x224>)
 80010d6:	2107      	movs	r1, #7
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f943 	bl	8001364 <readAK8963Registers>

  // successful init, return 1
  return 1;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000025c 	.word	0x2000025c

080010e8 <whoAmI>:


/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
int whoAmI(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (readRegisters(WHO_AM_I,1,_buffer) < 0) {
 80010ec:	2375      	movs	r3, #117	; 0x75
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <whoAmI+0x24>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f848 	bl	8001188 <readRegisters>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da02      	bge.n	8001104 <whoAmI+0x1c>
    return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	e001      	b.n	8001108 <whoAmI+0x20>
  }
  // return the register value
  return _buffer[0];
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <whoAmI+0x24>)
 8001106:	781b      	ldrb	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000025c 	.word	0x2000025c

08001110 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
int whoAmIAK8963(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (readAK8963Registers(AK8963_WHO_AM_I,1,_buffer) < 0) {
 8001114:	2300      	movs	r3, #0
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <whoAmIAK8963+0x24>)
 8001118:	2101      	movs	r1, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f922 	bl	8001364 <readAK8963Registers>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	da02      	bge.n	800112c <whoAmIAK8963+0x1c>
    return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112a:	e001      	b.n	8001130 <whoAmIAK8963+0x20>
  }
  // return the register value
  return _buffer[0];
 800112c:	4b01      	ldr	r3, [pc, #4]	; (8001134 <whoAmIAK8963+0x24>)
 800112e:	781b      	ldrb	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000025c 	.word	0x2000025c

08001138 <writeRegister>:


/* writes a byte to MPU9250 register given a register address and data */
int writeRegister(uint8_t subAddress, uint8_t data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
  /* write data to device */
	HAL_StatusTypeDef status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
	//status = HAL_I2C_Mem_Write(&hi2c1, _address, subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x10000);
	MPU_SPI_Write(&data, subAddress, 1);
 800114c:	79f9      	ldrb	r1, [r7, #7]
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	2201      	movs	r2, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f884 	bl	8001260 <MPU_SPI_Write>
	HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f001 ff9d 	bl	8003098 <HAL_Delay>

  /* read back the register */
  readRegisters(subAddress,1,_buffer);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <writeRegister+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f80f 	bl	8001188 <readRegisters>
  /* check the read back register against the written register */
  if(_buffer[0] == data) {
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <writeRegister+0x4c>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	429a      	cmp	r2, r3
 8001172:	d101      	bne.n	8001178 <writeRegister+0x40>
    return 1;
 8001174:	2301      	movs	r3, #1
 8001176:	e001      	b.n	800117c <writeRegister+0x44>
  }
  else{
    return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000025c 	.word	0x2000025c

08001188 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	603a      	str	r2, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	460b      	mov	r3, r1
 8001196:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
//	status = HAL_I2C_Mem_Read(&hi2c1, _address, subAddress, I2C_MEMADD_SIZE_8BIT, dest, count, 0x10000);
	MPU_SPI_Read(dest, subAddress, count);
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4619      	mov	r1, r3
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f000 f829 	bl	80011fc <MPU_SPI_Read>
	if (status == HAL_OK) {
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <readRegisters+0x2c>
      return 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e001      	b.n	80011b8 <readRegisters+0x30>
    } else {
      return -1;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80011ce:	f107 020f 	add.w	r2, r7, #15
 80011d2:	1df9      	adds	r1, r7, #7
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <SPIx_WriteRead+0x38>)
 80011de:	f003 fb33 	bl	8004848 <HAL_SPI_TransmitReceive>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SPIx_WriteRead+0x2c>
	{
		return -1;
 80011e8:	23ff      	movs	r3, #255	; 0xff
 80011ea:	e000      	b.n	80011ee <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200005d8 	.word	0x200005d8

080011fc <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
 8001208:	4613      	mov	r3, r2
 800120a:	803b      	strh	r3, [r7, #0]
	ReadAddr |= (uint8_t)READWRITE_CMD;
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	4313      	orrs	r3, r2
 8001212:	70fb      	strb	r3, [r7, #3]
	CS_ON;
 8001214:	2200      	movs	r2, #0
 8001216:	2102      	movs	r1, #2
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <MPU_SPI_Read+0x60>)
 800121a:	f002 fdf1 	bl	8003e00 <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffcd 	bl	80011c0 <SPIx_WriteRead>
	while(NumByteToRead>0x00)
 8001226:	e00d      	b.n	8001244 <MPU_SPI_Read+0x48>
	{
		*pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8001228:	2300      	movs	r3, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffc8 	bl	80011c0 <SPIx_WriteRead>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 8001238:	883b      	ldrh	r3, [r7, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3301      	adds	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
	while(NumByteToRead>0x00)
 8001244:	883b      	ldrh	r3, [r7, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ee      	bne.n	8001228 <MPU_SPI_Read+0x2c>
	}
	CS_OFF;
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MPU_SPI_Read+0x60>)
 8001250:	f002 fdd6 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020400 	.word	0x40020400

08001260 <MPU_SPI_Write>:
//--------------------------------------
void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
 800126c:	4613      	mov	r3, r2
 800126e:	803b      	strh	r3, [r7, #0]
	CS_ON;
 8001270:	2200      	movs	r2, #0
 8001272:	2102      	movs	r1, #2
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MPU_SPI_Write+0x54>)
 8001276:	f002 fdc3 	bl	8003e00 <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff9f 	bl	80011c0 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8001282:	e00a      	b.n	800129a <MPU_SPI_Write+0x3a>
	{
		SPIx_WriteRead(*pBuffer);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff99 	bl	80011c0 <SPIx_WriteRead>
		NumByteToWrite--;
 800128e:	883b      	ldrh	r3, [r7, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 800129a:	883b      	ldrh	r3, [r7, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f1      	bne.n	8001284 <MPU_SPI_Write+0x24>
	}
	CS_OFF;
 80012a0:	2201      	movs	r2, #1
 80012a2:	2102      	movs	r1, #2
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MPU_SPI_Write+0x54>)
 80012a6:	f002 fdab 	bl	8003e00 <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020400 	.word	0x40020400

080012b8 <writeAK8963Register>:


/* writes a register to the AK8963 given a register address and data */
int writeAK8963Register(uint8_t subAddress, uint8_t data){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for write
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
 80012c8:	2325      	movs	r3, #37	; 0x25
 80012ca:	220c      	movs	r2, #12
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff32 	bl	8001138 <writeRegister>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da02      	bge.n	80012e0 <writeAK8963Register+0x28>
    return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012de:	e03b      	b.n	8001358 <writeAK8963Register+0xa0>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 80012e0:	2226      	movs	r2, #38	; 0x26
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f7ff ff26 	bl	8001138 <writeRegister>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da02      	bge.n	80012f8 <writeAK8963Register+0x40>
    return -2;
 80012f2:	f06f 0301 	mvn.w	r3, #1
 80012f6:	e02f      	b.n	8001358 <writeAK8963Register+0xa0>
  }
  // store the data for write
	if (writeRegister(I2C_SLV0_DO,data) < 0) {
 80012f8:	2263      	movs	r2, #99	; 0x63
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f7ff ff1a 	bl	8001138 <writeRegister>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	da02      	bge.n	8001310 <writeAK8963Register+0x58>
    return -3;
 800130a:	f06f 0302 	mvn.w	r3, #2
 800130e:	e023      	b.n	8001358 <writeAK8963Register+0xa0>
  }
  // enable I2C and send 1 byte
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1) < 0) {
 8001310:	2227      	movs	r2, #39	; 0x27
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f7ff ff0b 	bl	8001138 <writeRegister>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	da02      	bge.n	800132e <writeAK8963Register+0x76>
    return -4;
 8001328:	f06f 0303 	mvn.w	r3, #3
 800132c:	e014      	b.n	8001358 <writeAK8963Register+0xa0>
  }
	// read the register and confirm
	if (readAK8963Registers(subAddress,1,_buffer) < 0) {
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <writeAK8963Register+0xa8>)
 8001332:	2101      	movs	r1, #1
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f815 	bl	8001364 <readAK8963Registers>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	da02      	bge.n	8001346 <writeAK8963Register+0x8e>
    return -5;
 8001340:	f06f 0304 	mvn.w	r3, #4
 8001344:	e008      	b.n	8001358 <writeAK8963Register+0xa0>
  }
	if(_buffer[0] == data) {
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <writeAK8963Register+0xa8>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	79ba      	ldrb	r2, [r7, #6]
 800134c:	429a      	cmp	r2, r3
 800134e:	d101      	bne.n	8001354 <writeAK8963Register+0x9c>
  	return 1;
 8001350:	2301      	movs	r3, #1
 8001352:	e001      	b.n	8001358 <writeAK8963Register+0xa0>
  } else{
  	return -6;
 8001354:	f06f 0305 	mvn.w	r3, #5
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000025c 	.word	0x2000025c

08001364 <readAK8963Registers>:

/* reads registers from the AK8963 */
int readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	603a      	str	r2, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	460b      	mov	r3, r1
 8001372:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
 8001374:	2025      	movs	r0, #37	; 0x25
 8001376:	220c      	movs	r2, #12
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	4313      	orrs	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff feda 	bl	8001138 <writeRegister>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	da02      	bge.n	8001390 <readAK8963Registers+0x2c>
    return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138e:	e027      	b.n	80013e0 <readAK8963Registers+0x7c>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 8001390:	2226      	movs	r2, #38	; 0x26
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff fece 	bl	8001138 <writeRegister>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <readAK8963Registers+0x44>
    return -2;
 80013a2:	f06f 0301 	mvn.w	r3, #1
 80013a6:	e01b      	b.n	80013e0 <readAK8963Registers+0x7c>
  }
  // enable I2C and request the bytes
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count) < 0) {
 80013a8:	2027      	movs	r0, #39	; 0x27
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fec0 	bl	8001138 <writeRegister>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da02      	bge.n	80013c4 <readAK8963Registers+0x60>
    return -3;
 80013be:	f06f 0302 	mvn.w	r3, #2
 80013c2:	e00d      	b.n	80013e0 <readAK8963Registers+0x7c>
  }
	HAL_Delay(1); // takes some time for these registers to fill
 80013c4:	2001      	movs	r0, #1
 80013c6:	f001 fe67 	bl	8003098 <HAL_Delay>
  // read the bytes off the MPU9250 EXT_SENS_DATA registers
	_status = readRegisters(EXT_SENS_DATA_00,count,dest);
 80013ca:	2049      	movs	r0, #73	; 0x49
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fed9 	bl	8001188 <readRegisters>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <readAK8963Registers+0x84>)
 80013da:	601a      	str	r2, [r3, #0]
  return _status;
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <readAK8963Registers+0x84>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200002e8 	.word	0x200002e8

080013ec <setSrd>:
  }
 return 1;
}

/* sets the sample rate divider to values other than default */
int setSrd(uint8_t srd) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]

  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
 80013f6:	2319      	movs	r3, #25
 80013f8:	2113      	movs	r1, #19
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe9c 	bl	8001138 <writeRegister>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	da02      	bge.n	800140c <setSrd+0x20>
    return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140a:	e058      	b.n	80014be <setSrd+0xd2>
  }
  if(srd > 9){
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b09      	cmp	r3, #9
 8001410:	d924      	bls.n	800145c <setSrd+0x70>
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8001412:	230a      	movs	r3, #10
 8001414:	2200      	movs	r2, #0
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff4d 	bl	80012b8 <writeAK8963Register>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	da02      	bge.n	800142a <setSrd+0x3e>
      return -2;
 8001424:	f06f 0301 	mvn.w	r3, #1
 8001428:	e049      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	f001 fe34 	bl	8003098 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
 8001430:	230a      	movs	r3, #10
 8001432:	2212      	movs	r2, #18
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff3e 	bl	80012b8 <writeAK8963Register>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	da02      	bge.n	8001448 <setSrd+0x5c>
      return -3;
 8001442:	f06f 0302 	mvn.w	r3, #2
 8001446:	e03a      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8001448:	2064      	movs	r0, #100	; 0x64
 800144a:	f001 fe25 	bl	8003098 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 800144e:	2303      	movs	r3, #3
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <setSrd+0xdc>)
 8001452:	2107      	movs	r1, #7
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff85 	bl	8001364 <readAK8963Registers>
 800145a:	e023      	b.n	80014a4 <setSrd+0xb8>
  } else {
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 800145c:	230a      	movs	r3, #10
 800145e:	2200      	movs	r2, #0
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff28 	bl	80012b8 <writeAK8963Register>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	da02      	bge.n	8001474 <setSrd+0x88>
      return -2;
 800146e:	f06f 0301 	mvn.w	r3, #1
 8001472:	e024      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8001474:	2064      	movs	r0, #100	; 0x64
 8001476:	f001 fe0f 	bl	8003098 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 100 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 800147a:	230a      	movs	r3, #10
 800147c:	2216      	movs	r2, #22
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff19 	bl	80012b8 <writeAK8963Register>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	da02      	bge.n	8001492 <setSrd+0xa6>
      return -3;
 800148c:	f06f 0302 	mvn.w	r3, #2
 8001490:	e015      	b.n	80014be <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f001 fe00 	bl	8003098 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 8001498:	2303      	movs	r3, #3
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <setSrd+0xdc>)
 800149c:	2107      	movs	r1, #7
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff60 	bl	8001364 <readAK8963Registers>
  }
  /* setting the sample rate divider */
  if(writeRegister(SMPDIV,srd) < 0){ // setting the sample rate divider
 80014a4:	2219      	movs	r2, #25
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff fe44 	bl	8001138 <writeRegister>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da02      	bge.n	80014bc <setSrd+0xd0>
    return -4;
 80014b6:	f06f 0303 	mvn.w	r3, #3
 80014ba:	e000      	b.n	80014be <setSrd+0xd2>
  }
  return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000025c 	.word	0x2000025c

080014cc <enableDataReadyInterrupt>:


/* enables the data ready interrupt */
int enableDataReadyInterrupt() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* setting the interrupt */
  if (writeRegister(INT_PIN_CFG,INT_PULSE_50US) < 0){ // setup interrupt, 50 us pulse
 80014d0:	2337      	movs	r3, #55	; 0x37
 80014d2:	2200      	movs	r2, #0
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe2e 	bl	8001138 <writeRegister>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da02      	bge.n	80014e8 <enableDataReadyInterrupt+0x1c>
    return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e6:	e00c      	b.n	8001502 <enableDataReadyInterrupt+0x36>
  }
  if (writeRegister(INT_ENABLE,INT_RAW_RDY_EN) < 0){ // set to data ready
 80014e8:	2338      	movs	r3, #56	; 0x38
 80014ea:	2201      	movs	r2, #1
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe22 	bl	8001138 <writeRegister>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da02      	bge.n	8001500 <enableDataReadyInterrupt+0x34>
    return -2;
 80014fa:	f06f 0301 	mvn.w	r3, #1
 80014fe:	e000      	b.n	8001502 <enableDataReadyInterrupt+0x36>
  }
  return 1;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <readSensor>:
  return 1;
}


/* reads the most current data from MPU9250 and stores in buffer */
int readSensor() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
 800150c:	233b      	movs	r3, #59	; 0x3b
 800150e:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <readSensor+0x100>)
 8001510:	2115      	movs	r1, #21
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fe38 	bl	8001188 <readRegisters>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	da02      	bge.n	8001524 <readSensor+0x1c>
    return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001522:	e06e      	b.n	8001602 <readSensor+0xfa>
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <readSensor+0x100>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <readSensor+0x100>)
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	4b35      	ldr	r3, [pc, #212]	; (800160c <readSensor+0x104>)
 8001538:	801a      	strh	r2, [r3, #0]
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <readSensor+0x100>)
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <readSensor+0x100>)
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <readSensor+0x108>)
 800154e:	801a      	strh	r2, [r3, #0]
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <readSensor+0x100>)
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <readSensor+0x100>)
 800155a:	795b      	ldrb	r3, [r3, #5]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <readSensor+0x10c>)
 8001564:	801a      	strh	r2, [r3, #0]
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <readSensor+0x100>)
 8001568:	799b      	ldrb	r3, [r3, #6]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <readSensor+0x100>)
 8001570:	79db      	ldrb	r3, [r3, #7]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <readSensor+0x110>)
 800157a:	801a      	strh	r2, [r3, #0]
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <readSensor+0x100>)
 800157e:	7a1b      	ldrb	r3, [r3, #8]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <readSensor+0x100>)
 8001586:	7a5b      	ldrb	r3, [r3, #9]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <readSensor+0x114>)
 8001590:	801a      	strh	r2, [r3, #0]
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <readSensor+0x100>)
 8001594:	7a9b      	ldrb	r3, [r3, #10]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <readSensor+0x100>)
 800159c:	7adb      	ldrb	r3, [r3, #11]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <readSensor+0x118>)
 80015a6:	801a      	strh	r2, [r3, #0]
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <readSensor+0x100>)
 80015aa:	7b1b      	ldrb	r3, [r3, #12]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <readSensor+0x100>)
 80015b2:	7b5b      	ldrb	r3, [r3, #13]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <readSensor+0x11c>)
 80015bc:	801a      	strh	r2, [r3, #0]
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <readSensor+0x100>)
 80015c0:	7bdb      	ldrb	r3, [r3, #15]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <readSensor+0x100>)
 80015c8:	7b9b      	ldrb	r3, [r3, #14]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <readSensor+0x120>)
 80015d2:	801a      	strh	r2, [r3, #0]
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <readSensor+0x100>)
 80015d6:	7c5b      	ldrb	r3, [r3, #17]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <readSensor+0x100>)
 80015de:	7c1b      	ldrb	r3, [r3, #16]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <readSensor+0x124>)
 80015e8:	801a      	strh	r2, [r3, #0]
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <readSensor+0x100>)
 80015ec:	7cdb      	ldrb	r3, [r3, #19]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <readSensor+0x100>)
 80015f4:	7c9b      	ldrb	r3, [r3, #18]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <readSensor+0x128>)
 80015fe:	801a      	strh	r2, [r3, #0]
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000025c 	.word	0x2000025c
 800160c:	20000274 	.word	0x20000274
 8001610:	20000272 	.word	0x20000272
 8001614:	200002f0 	.word	0x200002f0
 8001618:	200002ee 	.word	0x200002ee
 800161c:	2000027c 	.word	0x2000027c
 8001620:	2000025a 	.word	0x2000025a
 8001624:	200002ec 	.word	0x200002ec
 8001628:	200002f2 	.word	0x200002f2
 800162c:	20000258 	.word	0x20000258
 8001630:	200002e4 	.word	0x200002e4

08001634 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163a:	f001 fcc1 	bl	8002fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163e:	f000 f8c1 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001642:	f000 fa39 	bl	8001ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001646:	f000 f9ef 	bl	8001a28 <MX_DMA_Init>
  MX_SPI1_Init();
 800164a:	f000 f925 	bl	8001898 <MX_SPI1_Init>
  MX_SPI2_Init();
 800164e:	f000 f959 	bl	8001904 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001652:	f000 f98d 	bl	8001970 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001656:	f000 f9bd 	bl	80019d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE); //Enble IDLE IRQs
 800165a:	4b4c      	ldr	r3, [pc, #304]	; (800178c <main+0x158>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a4b      	ldr	r2, [pc, #300]	; (800178c <main+0x158>)
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	68d2      	ldr	r2, [r2, #12]
 8001664:	f042 0210 	orr.w	r2, r2, #16
 8001668:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(&huart2, UART_recv_buff, RECV_BUFF_SIZE-1); //Start DMA
 800166a:	223b      	movs	r2, #59	; 0x3b
 800166c:	4948      	ldr	r1, [pc, #288]	; (8001790 <main+0x15c>)
 800166e:	4847      	ldr	r0, [pc, #284]	; (800178c <main+0x158>)
 8001670:	f004 f96a 	bl	8005948 <HAL_UART_Receive_DMA>

    int st;
    st = MPU_begin();
 8001674:	f7ff fc24 	bl	8000ec0 <MPU_begin>
 8001678:	6078      	str	r0, [r7, #4]
    HAL_Delay(100);
 800167a:	2064      	movs	r0, #100	; 0x64
 800167c:	f001 fd0c 	bl	8003098 <HAL_Delay>
    enableDataReadyInterrupt();
 8001680:	f7ff ff24 	bl	80014cc <enableDataReadyInterrupt>
    HAL_Delay(100);
 8001684:	2064      	movs	r0, #100	; 0x64
 8001686:	f001 fd07 	bl	8003098 <HAL_Delay>
    setSrd(0);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff feae 	bl	80013ec <setSrd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(irq_mcu9250 == 1) {
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <main+0x160>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d1fa      	bne.n	8001690 <main+0x5c>
			irq_mcu9250 = 0;
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <main+0x160>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

			//Get data to MCU2 from USART PC (to UART2)
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80016a0:	4b3a      	ldr	r3, [pc, #232]	; (800178c <main+0x158>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a39      	ldr	r2, [pc, #228]	; (800178c <main+0x158>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	f042 0210 	orr.w	r2, r2, #16
 80016ae:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_DMA(&huart2, UART_recv_buff, RECV_BUFF_SIZE-1);
 80016b0:	223b      	movs	r2, #59	; 0x3b
 80016b2:	4937      	ldr	r1, [pc, #220]	; (8001790 <main+0x15c>)
 80016b4:	4835      	ldr	r0, [pc, #212]	; (800178c <main+0x158>)
 80016b6:	f004 f947 	bl	8005948 <HAL_UART_Receive_DMA>

			if(has_command) {
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <main+0x164>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d016      	beq.n	80016f2 <main+0xbe>
				has_command = 0; //after transmit completed disable flag
 80016c4:	4b34      	ldr	r3, [pc, #208]	; (8001798 <main+0x164>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
				//Ready receiving bytes from SPI2 Master
				MASTER_CS_RESET;
 80016ca:	2200      	movs	r2, #0
 80016cc:	2102      	movs	r1, #2
 80016ce:	4833      	ldr	r0, [pc, #204]	; (800179c <main+0x168>)
 80016d0:	f002 fb96 	bl	8003e00 <HAL_GPIO_WritePin>
				uint32_t plug = *(uint32_t*)hspi3.Instance->DR; //check hardware buffer SPI3
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <main+0x16c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	603b      	str	r3, [r7, #0]
				HAL_SPI_Receive_DMA(&hspi3, SPI_recv_buff, RECV_BUFF_SIZE-1);
 80016de:	223b      	movs	r2, #59	; 0x3b
 80016e0:	4930      	ldr	r1, [pc, #192]	; (80017a4 <main+0x170>)
 80016e2:	482f      	ldr	r0, [pc, #188]	; (80017a0 <main+0x16c>)
 80016e4:	f003 fb06 	bl	8004cf4 <HAL_SPI_Receive_DMA>
				//Transmit bytes from SPI2 Master to SPI3 Slave
				HAL_SPI_Transmit_DMA(&hspi2, UART_recv_buff, RECV_BUFF_SIZE-1);
 80016e8:	223b      	movs	r2, #59	; 0x3b
 80016ea:	4929      	ldr	r1, [pc, #164]	; (8001790 <main+0x15c>)
 80016ec:	482e      	ldr	r0, [pc, #184]	; (80017a8 <main+0x174>)
 80016ee:	f003 fa4b 	bl	8004b88 <HAL_SPI_Transmit_DMA>
			}

			if(received_from_master) {
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <main+0x178>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <main+0xdc>
				received_from_master = 0;
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <main+0x178>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
				//Parse received command from SLAVE SPI3 on side MCU1
				cycle_flag = ParseCommand(SPI_recv_buff);
 8001702:	4828      	ldr	r0, [pc, #160]	; (80017a4 <main+0x170>)
 8001704:	f000 fef2 	bl	80024ec <ParseCommand>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <main+0x17c>)
 800170e:	701a      	strb	r2, [r3, #0]
			}

			if(received_from_slave) {
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <main+0x180>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0ba      	beq.n	8001690 <main+0x5c>
				received_from_slave = 0;
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <main+0x180>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]

				if(cycle_flag == 1) {
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <main+0x17c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <main+0x108>
					GetAccel();
 800172a:	f000 fe8b 	bl	8002444 <GetAccel>
					HAL_Delay(command_delay-100);
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <main+0x184>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3b64      	subs	r3, #100	; 0x64
 8001734:	4618      	mov	r0, r3
 8001736:	f001 fcaf 	bl	8003098 <HAL_Delay>
 800173a:	e00c      	b.n	8001756 <main+0x122>
				} else if(cycle_flag == 2) {
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <main+0x17c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d107      	bne.n	8001756 <main+0x122>
					GetAngel();
 8001746:	f000 fe97 	bl	8002478 <GetAngel>
					HAL_Delay(command_delay-100);
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <main+0x184>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3b64      	subs	r3, #100	; 0x64
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fca1 	bl	8003098 <HAL_Delay>
				}

				//UART terminal print on side MCU2
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)response_receive, strlen(response_receive));
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <main+0x188>)
 8001758:	f7fe fd42 	bl	80001e0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4916      	ldr	r1, [pc, #88]	; (80017bc <main+0x188>)
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <main+0x158>)
 8001766:	f004 f883 	bl	8005870 <HAL_UART_Transmit_DMA>
				HAL_Delay(100);
 800176a:	2064      	movs	r0, #100	; 0x64
 800176c:	f001 fc94 	bl	8003098 <HAL_Delay>

				/* Clear buffers */
				ClearBuff(UART_recv_buff);
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <main+0x15c>)
 8001772:	f001 f873 	bl	800285c <ClearBuff>
				ClearBuff(SPI_recv_buff);
 8001776:	480b      	ldr	r0, [pc, #44]	; (80017a4 <main+0x170>)
 8001778:	f001 f870 	bl	800285c <ClearBuff>
				ClearBuff(response_transmit);
 800177c:	4810      	ldr	r0, [pc, #64]	; (80017c0 <main+0x18c>)
 800177e:	f001 f86d 	bl	800285c <ClearBuff>
				ClearBuff(response_receive);
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <main+0x188>)
 8001784:	f001 f86a 	bl	800285c <ClearBuff>
	  if(irq_mcu9250 == 1) {
 8001788:	e782      	b.n	8001690 <main+0x5c>
 800178a:	bf00      	nop
 800178c:	20000630 	.word	0x20000630
 8001790:	20000484 	.word	0x20000484
 8001794:	2000022c 	.word	0x2000022c
 8001798:	2000022d 	.word	0x2000022d
 800179c:	40020800 	.word	0x40020800
 80017a0:	200004c0 	.word	0x200004c0
 80017a4:	20000674 	.word	0x20000674
 80017a8:	20000354 	.word	0x20000354
 80017ac:	2000022e 	.word	0x2000022e
 80017b0:	20000231 	.word	0x20000231
 80017b4:	2000022f 	.word	0x2000022f
 80017b8:	2000002c 	.word	0x2000002c
 80017bc:	200003ac 	.word	0x200003ac
 80017c0:	20000710 	.word	0x20000710

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b094      	sub	sp, #80	; 0x50
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 ffd8 	bl	8006788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	4a28      	ldr	r2, [pc, #160]	; (8001890 <SystemClock_Config+0xcc>)
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <SystemClock_Config+0xcc>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <SystemClock_Config+0xcc>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <SystemClock_Config+0xd0>)
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <SystemClock_Config+0xd0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <SystemClock_Config+0xd0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001820:	2301      	movs	r3, #1
 8001822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182a:	2302      	movs	r3, #2
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800182e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001834:	2308      	movs	r3, #8
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001838:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800183c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800183e:	2304      	movs	r3, #4
 8001840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001842:	2304      	movs	r3, #4
 8001844:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fb0a 	bl	8003e64 <HAL_RCC_OscConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001856:	f001 f819 	bl	800288c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185a:	230f      	movs	r3, #15
 800185c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185e:	2302      	movs	r3, #2
 8001860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2102      	movs	r1, #2
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fd6c 	bl	8004354 <HAL_RCC_ClockConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001882:	f001 f803 	bl	800288c <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	3750      	adds	r7, #80	; 0x50
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000

08001898 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_SPI1_Init+0x64>)
 800189e:	4a18      	ldr	r2, [pc, #96]	; (8001900 <MX_SPI1_Init+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_SPI1_Init+0x64>)
 80018a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_SPI1_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_SPI1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_SPI1_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_SPI1_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_SPI1_Init+0x64>)
 80018c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_SPI1_Init+0x64>)
 80018cc:	2218      	movs	r2, #24
 80018ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_SPI1_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_SPI1_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_SPI1_Init+0x64>)
 80018e4:	220a      	movs	r2, #10
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_SPI1_Init+0x64>)
 80018ea:	f002 ff25 	bl	8004738 <HAL_SPI_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018f4:	f000 ffca 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200005d8 	.word	0x200005d8
 8001900:	40013000 	.word	0x40013000

08001904 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_SPI2_Init+0x64>)
 800190a:	4a18      	ldr	r2, [pc, #96]	; (800196c <MX_SPI2_Init+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_SPI2_Init+0x64>)
 8001910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001914:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_SPI2_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_SPI2_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_SPI2_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_SPI2_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_SPI2_Init+0x64>)
 8001930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001934:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_SPI2_Init+0x64>)
 8001938:	2210      	movs	r2, #16
 800193a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <MX_SPI2_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_SPI2_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <MX_SPI2_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_SPI2_Init+0x64>)
 8001950:	220a      	movs	r2, #10
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_SPI2_Init+0x64>)
 8001956:	f002 feef 	bl	8004738 <HAL_SPI_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001960:	f000 ff94 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000354 	.word	0x20000354
 800196c:	40003800 	.word	0x40003800

08001970 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_SPI3_Init+0x5c>)
 8001976:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <MX_SPI3_Init+0x60>)
 8001978:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_SPI3_Init+0x5c>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_SPI3_Init+0x5c>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_SPI3_Init+0x5c>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_SPI3_Init+0x5c>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_SPI3_Init+0x5c>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_SPI3_Init+0x5c>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_SPI3_Init+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_SPI3_Init+0x5c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_SPI3_Init+0x5c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_SPI3_Init+0x5c>)
 80019b2:	220a      	movs	r2, #10
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_SPI3_Init+0x5c>)
 80019b8:	f002 febe 	bl	8004738 <HAL_SPI_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 80019c2:	f000 ff63 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200004c0 	.word	0x200004c0
 80019d0:	40003c00 	.word	0x40003c00

080019d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_USART2_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART2_UART_Init+0x4c>)
 8001a0c:	f003 fee2 	bl	80057d4 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f000 ff39 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000630 	.word	0x20000630
 8001a24:	40004400 	.word	0x40004400

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4a20      	ldr	r2, [pc, #128]	; (8001ab4 <MX_DMA_Init+0x8c>)
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <MX_DMA_Init+0x8c>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <MX_DMA_Init+0x8c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	200b      	movs	r0, #11
 8001a50:	f001 fc1d 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a54:	200b      	movs	r0, #11
 8001a56:	f001 fc36 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	200e      	movs	r0, #14
 8001a60:	f001 fc15 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a64:	200e      	movs	r0, #14
 8001a66:	f001 fc2e 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	200f      	movs	r0, #15
 8001a70:	f001 fc0d 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a74:	200f      	movs	r0, #15
 8001a76:	f001 fc26 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2010      	movs	r0, #16
 8001a80:	f001 fc05 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a84:	2010      	movs	r0, #16
 8001a86:	f001 fc1e 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2011      	movs	r0, #17
 8001a90:	f001 fbfd 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a94:	2011      	movs	r0, #17
 8001a96:	f001 fc16 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	202f      	movs	r0, #47	; 0x2f
 8001aa0:	f001 fbf5 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001aa4:	202f      	movs	r0, #47	; 0x2f
 8001aa6:	f001 fc0e 	bl	80032c6 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <MX_GPIO_Init+0x104>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2102      	movs	r1, #2
 8001b42:	481f      	ldr	r0, [pc, #124]	; (8001bc0 <MX_GPIO_Init+0x108>)
 8001b44:	f002 f95c 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	481d      	ldr	r0, [pc, #116]	; (8001bc4 <MX_GPIO_Init+0x10c>)
 8001b4e:	f002 f957 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 8001b52:	2302      	movs	r3, #2
 8001b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4815      	ldr	r0, [pc, #84]	; (8001bc0 <MX_GPIO_Init+0x108>)
 8001b6a:	f001 ffc7 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	480f      	ldr	r0, [pc, #60]	; (8001bc4 <MX_GPIO_Init+0x10c>)
 8001b86:	f001 ffb9 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_GPIO_Init+0x110>)
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <MX_GPIO_Init+0x10c>)
 8001b9e:	f001 ffad 	bl	8003afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2008      	movs	r0, #8
 8001ba8:	f001 fb71 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001bac:	2008      	movs	r0, #8
 8001bae:	f001 fb8a 	bl	80032c6 <HAL_NVIC_EnableIRQ>

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	10110000 	.word	0x10110000

08001bcc <PhysVectorsToAccel>:

/* USER CODE BEGIN 4 */
void PhysVectorsToAccel() {
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
         ACCEL_X = _axcounts * 256 + _gxcounts;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <PhysVectorsToAccel+0x4c>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <PhysVectorsToAccel+0x50>)
 8001bda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <PhysVectorsToAccel+0x54>)
 8001be2:	6013      	str	r3, [r2, #0]
         ACCEL_Y = _aycounts * 256 + _gycounts;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <PhysVectorsToAccel+0x58>)
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <PhysVectorsToAccel+0x5c>)
 8001bee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <PhysVectorsToAccel+0x60>)
 8001bf6:	6013      	str	r3, [r2, #0]
         ACCEL_Z = _azcounts * 256 + _gzcounts;
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <PhysVectorsToAccel+0x64>)
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <PhysVectorsToAccel+0x68>)
 8001c02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <PhysVectorsToAccel+0x6c>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000274 	.word	0x20000274
 8001c1c:	2000027c 	.word	0x2000027c
 8001c20:	20000234 	.word	0x20000234
 8001c24:	20000272 	.word	0x20000272
 8001c28:	2000025a 	.word	0x2000025a
 8001c2c:	20000238 	.word	0x20000238
 8001c30:	200002f0 	.word	0x200002f0
 8001c34:	200002ec 	.word	0x200002ec
 8001c38:	2000023c 	.word	0x2000023c
 8001c3c:	00000000 	.word	0x00000000

08001c40 <AccelToAngel>:

void AccelToAngel() {
 8001c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c44:	af00      	add	r7, sp, #0
         ACCEL_XANGLE = 57.295* atan((float)-ACCEL_X/ sqrt(pow((float)ACCEL_Y, 2)+ pow((float)ACCEL_Z, 2)));
 8001c46:	4b9a      	ldr	r3, [pc, #616]	; (8001eb0 <AccelToAngel+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	425b      	negs	r3, r3
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	ee17 0a90 	vmov	r0, s15
 8001c58:	f7fe fc7e 	bl	8000558 <__aeabi_f2d>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	460d      	mov	r5, r1
 8001c60:	4b94      	ldr	r3, [pc, #592]	; (8001eb4 <AccelToAngel+0x274>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	ee17 0a90 	vmov	r0, s15
 8001c70:	f7fe fc72 	bl	8000558 <__aeabi_f2d>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001ea0 <AccelToAngel+0x260>
 8001c7c:	ec43 2b10 	vmov	d0, r2, r3
 8001c80:	f005 fc0e 	bl	80074a0 <pow>
 8001c84:	ec59 8b10 	vmov	r8, r9, d0
 8001c88:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <AccelToAngel+0x278>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c94:	ee17 0a90 	vmov	r0, s15
 8001c98:	f7fe fc5e 	bl	8000558 <__aeabi_f2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8001ea0 <AccelToAngel+0x260>
 8001ca4:	ec43 2b10 	vmov	d0, r2, r3
 8001ca8:	f005 fbfa 	bl	80074a0 <pow>
 8001cac:	ec53 2b10 	vmov	r2, r3, d0
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	f7fe faf2 	bl	800029c <__adddf3>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	ec43 2b17 	vmov	d7, r2, r3
 8001cc0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc4:	eef0 0a67 	vmov.f32	s1, s15
 8001cc8:	f005 fd62 	bl	8007790 <sqrt>
 8001ccc:	ec53 2b10 	vmov	r2, r3, d0
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	f7fe fdbe 	bl	8000854 <__aeabi_ddiv>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	ec44 3b17 	vmov	d7, r3, r4
 8001ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce4:	eef0 0a67 	vmov.f32	s1, s15
 8001ce8:	f005 fa2a 	bl	8007140 <atan>
 8001cec:	ec51 0b10 	vmov	r0, r1, d0
 8001cf0:	a36d      	add	r3, pc, #436	; (adr r3, 8001ea8 <AccelToAngel+0x268>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc83 	bl	8000600 <__aeabi_dmul>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4621      	mov	r1, r4
 8001d02:	f7fe ff2d 	bl	8000b60 <__aeabi_d2iz>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <AccelToAngel+0x27c>)
 8001d0a:	601a      	str	r2, [r3, #0]
         ACCEL_YANGLE = 57.295* atan((float)-ACCEL_Y/ sqrt(pow((float)ACCEL_X, 2)+ pow((float)ACCEL_Z, 2)));
 8001d0c:	4b69      	ldr	r3, [pc, #420]	; (8001eb4 <AccelToAngel+0x274>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	425b      	negs	r3, r3
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	ee17 0a90 	vmov	r0, s15
 8001d1e:	f7fe fc1b 	bl	8000558 <__aeabi_f2d>
 8001d22:	4604      	mov	r4, r0
 8001d24:	460d      	mov	r5, r1
 8001d26:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <AccelToAngel+0x270>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	ee17 0a90 	vmov	r0, s15
 8001d36:	f7fe fc0f 	bl	8000558 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001ea0 <AccelToAngel+0x260>
 8001d42:	ec43 2b10 	vmov	d0, r2, r3
 8001d46:	f005 fbab 	bl	80074a0 <pow>
 8001d4a:	ec59 8b10 	vmov	r8, r9, d0
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <AccelToAngel+0x278>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5a:	ee17 0a90 	vmov	r0, s15
 8001d5e:	f7fe fbfb 	bl	8000558 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001ea0 <AccelToAngel+0x260>
 8001d6a:	ec43 2b10 	vmov	d0, r2, r3
 8001d6e:	f005 fb97 	bl	80074a0 <pow>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	4640      	mov	r0, r8
 8001d78:	4649      	mov	r1, r9
 8001d7a:	f7fe fa8f 	bl	800029c <__adddf3>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	ec43 2b17 	vmov	d7, r2, r3
 8001d86:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8a:	eef0 0a67 	vmov.f32	s1, s15
 8001d8e:	f005 fcff 	bl	8007790 <sqrt>
 8001d92:	ec53 2b10 	vmov	r2, r3, d0
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fd5b 	bl	8000854 <__aeabi_ddiv>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460c      	mov	r4, r1
 8001da2:	ec44 3b17 	vmov	d7, r3, r4
 8001da6:	eeb0 0a47 	vmov.f32	s0, s14
 8001daa:	eef0 0a67 	vmov.f32	s1, s15
 8001dae:	f005 f9c7 	bl	8007140 <atan>
 8001db2:	ec51 0b10 	vmov	r0, r1, d0
 8001db6:	a33c      	add	r3, pc, #240	; (adr r3, 8001ea8 <AccelToAngel+0x268>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f7fe fc20 	bl	8000600 <__aeabi_dmul>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	f7fe feca 	bl	8000b60 <__aeabi_d2iz>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <AccelToAngel+0x280>)
 8001dd0:	601a      	str	r2, [r3, #0]
         ACCEL_ZANGLE = 57.295* atan((float)-ACCEL_Z/ sqrt(pow((float)ACCEL_X, 2)+ pow((float)ACCEL_Y, 2)));
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <AccelToAngel+0x278>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	425b      	negs	r3, r3
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ee17 0a90 	vmov	r0, s15
 8001de4:	f7fe fbb8 	bl	8000558 <__aeabi_f2d>
 8001de8:	4604      	mov	r4, r0
 8001dea:	460d      	mov	r5, r1
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <AccelToAngel+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	ee17 0a90 	vmov	r0, s15
 8001dfc:	f7fe fbac 	bl	8000558 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001ea0 <AccelToAngel+0x260>
 8001e08:	ec43 2b10 	vmov	d0, r2, r3
 8001e0c:	f005 fb48 	bl	80074a0 <pow>
 8001e10:	ec59 8b10 	vmov	r8, r9, d0
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <AccelToAngel+0x274>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e20:	ee17 0a90 	vmov	r0, s15
 8001e24:	f7fe fb98 	bl	8000558 <__aeabi_f2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001ea0 <AccelToAngel+0x260>
 8001e30:	ec43 2b10 	vmov	d0, r2, r3
 8001e34:	f005 fb34 	bl	80074a0 <pow>
 8001e38:	ec53 2b10 	vmov	r2, r3, d0
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	4649      	mov	r1, r9
 8001e40:	f7fe fa2c 	bl	800029c <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	ec43 2b17 	vmov	d7, r2, r3
 8001e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e50:	eef0 0a67 	vmov.f32	s1, s15
 8001e54:	f005 fc9c 	bl	8007790 <sqrt>
 8001e58:	ec53 2b10 	vmov	r2, r3, d0
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fcf8 	bl	8000854 <__aeabi_ddiv>
 8001e64:	4603      	mov	r3, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	ec44 3b17 	vmov	d7, r3, r4
 8001e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e70:	eef0 0a67 	vmov.f32	s1, s15
 8001e74:	f005 f964 	bl	8007140 <atan>
 8001e78:	ec51 0b10 	vmov	r0, r1, d0
 8001e7c:	a30a      	add	r3, pc, #40	; (adr r3, 8001ea8 <AccelToAngel+0x268>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fbbd 	bl	8000600 <__aeabi_dmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	f7fe fe67 	bl	8000b60 <__aeabi_d2iz>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <AccelToAngel+0x284>)
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e9e:	bf00      	nop
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	40000000 	.word	0x40000000
 8001ea8:	8f5c28f6 	.word	0x8f5c28f6
 8001eac:	404ca5c2 	.word	0x404ca5c2
 8001eb0:	20000234 	.word	0x20000234
 8001eb4:	20000238 	.word	0x20000238
 8001eb8:	2000023c 	.word	0x2000023c
 8001ebc:	20000240 	.word	0x20000240
 8001ec0:	20000244 	.word	0x20000244
 8001ec4:	20000248 	.word	0x20000248

08001ec8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
        if (GPIO_Pin==GPIO_PIN_2) //PB1 EXTI1 (from MPU9250)
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d102      	bne.n	8001ede <HAL_GPIO_EXTI_Callback+0x16>
        {
                irq_mcu9250 = 1;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_GPIO_EXTI_Callback+0x24>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
        }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000022c 	.word	0x2000022c

08001ef0 <SPISendError>:

//Print error about invalid command
void SPISendError() {
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	sprintf(return_err, "Invalid command!\r\n");
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <SPISendError+0x4c>)
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <SPISendError+0x50>)
 8001ef8:	4615      	mov	r5, r2
 8001efa:	461c      	mov	r4, r3
 8001efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efe:	6028      	str	r0, [r5, #0]
 8001f00:	6069      	str	r1, [r5, #4]
 8001f02:	60aa      	str	r2, [r5, #8]
 8001f04:	60eb      	str	r3, [r5, #12]
 8001f06:	8823      	ldrh	r3, [r4, #0]
 8001f08:	78a2      	ldrb	r2, [r4, #2]
 8001f0a:	822b      	strh	r3, [r5, #16]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	74ab      	strb	r3, [r5, #18]
	HAL_Delay(500);
 8001f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f14:	f001 f8c0 	bl	8003098 <HAL_Delay>
	//Ready receiving bytes from SPI3 Slave
	MASTER_CS_RESET;
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <SPISendError+0x54>)
 8001f1e:	f001 ff6f 	bl	8003e00 <HAL_GPIO_WritePin>
	//Transmit bytes from SPI3 Slave to SPI2 Master
	HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)return_err, RECV_BUFF_SIZE-1);
 8001f22:	223b      	movs	r2, #59	; 0x3b
 8001f24:	4905      	ldr	r1, [pc, #20]	; (8001f3c <SPISendError+0x4c>)
 8001f26:	4808      	ldr	r0, [pc, #32]	; (8001f48 <SPISendError+0x58>)
 8001f28:	f002 fe2e 	bl	8004b88 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 8001f2c:	223b      	movs	r2, #59	; 0x3b
 8001f2e:	4907      	ldr	r1, [pc, #28]	; (8001f4c <SPISendError+0x5c>)
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <SPISendError+0x60>)
 8001f32:	f002 fedf 	bl	8004cf4 <HAL_SPI_Receive_DMA>
}
 8001f36:	bf00      	nop
 8001f38:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000448 	.word	0x20000448
 8001f40:	08008628 	.word	0x08008628
 8001f44:	40020800 	.word	0x40020800
 8001f48:	200004c0 	.word	0x200004c0
 8001f4c:	200003ac 	.word	0x200003ac
 8001f50:	20000354 	.word	0x20000354

08001f54 <SPISendData>:

//Determine state machine with 2^3-1 combinations and print results
//for GetAccel() and GetAngel()
void SPISendData(uint32_t x_val, uint32_t y_val, uint32_t z_val) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b096      	sub	sp, #88	; 0x58
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	char X = ' ';
 8001f60:	2320      	movs	r3, #32
 8001f62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char Y = ' ';
 8001f66:	2320      	movs	r3, #32
 8001f68:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	char Z = ' ';
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	X = args_buff[0];
 8001f72:	4b9d      	ldr	r3, [pc, #628]	; (80021e8 <SPISendData+0x294>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Y = args_buff[1];
 8001f7a:	4b9b      	ldr	r3, [pc, #620]	; (80021e8 <SPISendData+0x294>)
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	Z = args_buff[2];
 8001f82:	4b99      	ldr	r3, [pc, #612]	; (80021e8 <SPISendData+0x294>)
 8001f84:	789b      	ldrb	r3, [r3, #2]
 8001f86:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//State machine with 2^3-1 combinations
	if(X == 'X' && Y == '\n' && Z == '\n') {
 8001f8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f8e:	2b58      	cmp	r3, #88	; 0x58
 8001f90:	d146      	bne.n	8002020 <SPISendData+0xcc>
 8001f92:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d142      	bne.n	8002020 <SPISendData+0xcc>
 8001f9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f9e:	2b0a      	cmp	r3, #10
 8001fa0:	d13e      	bne.n	8002020 <SPISendData+0xcc>
		//X
		if(flag == 1) {
 8001fa2:	4b92      	ldr	r3, [pc, #584]	; (80021ec <SPISendData+0x298>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d119      	bne.n	8001fe0 <SPISendData+0x8c>
			//Accel

			sprintf(response_transmit, "x:%08d rad/sec\r\n", x_val);
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4990      	ldr	r1, [pc, #576]	; (80021f0 <SPISendData+0x29c>)
 8001fb0:	4890      	ldr	r0, [pc, #576]	; (80021f4 <SPISendData+0x2a0>)
 8001fb2:	f004 fbf1 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2102      	movs	r1, #2
 8001fba:	488f      	ldr	r0, [pc, #572]	; (80021f8 <SPISendData+0x2a4>)
 8001fbc:	f001 ff20 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 8001fc0:	223b      	movs	r2, #59	; 0x3b
 8001fc2:	498c      	ldr	r1, [pc, #560]	; (80021f4 <SPISendData+0x2a0>)
 8001fc4:	488d      	ldr	r0, [pc, #564]	; (80021fc <SPISendData+0x2a8>)
 8001fc6:	f002 fddf 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 8001fca:	4b8d      	ldr	r3, [pc, #564]	; (8002200 <SPISendData+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 8001fd4:	223b      	movs	r2, #59	; 0x3b
 8001fd6:	498b      	ldr	r1, [pc, #556]	; (8002204 <SPISendData+0x2b0>)
 8001fd8:	4889      	ldr	r0, [pc, #548]	; (8002200 <SPISendData+0x2ac>)
 8001fda:	f002 fe8b 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 8001fde:	e20a      	b.n	80023f6 <SPISendData+0x4a2>

		} else if(flag == 2) {
 8001fe0:	4b82      	ldr	r3, [pc, #520]	; (80021ec <SPISendData+0x298>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	f040 8205 	bne.w	80023f6 <SPISendData+0x4a2>
			//Angel

			sprintf(response_transmit, "x:%04d gr\r\n", x_val);
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4986      	ldr	r1, [pc, #536]	; (8002208 <SPISendData+0x2b4>)
 8001ff0:	4880      	ldr	r0, [pc, #512]	; (80021f4 <SPISendData+0x2a0>)
 8001ff2:	f004 fbd1 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	487f      	ldr	r0, [pc, #508]	; (80021f8 <SPISendData+0x2a4>)
 8001ffc:	f001 ff00 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 8002000:	223b      	movs	r2, #59	; 0x3b
 8002002:	497c      	ldr	r1, [pc, #496]	; (80021f4 <SPISendData+0x2a0>)
 8002004:	487d      	ldr	r0, [pc, #500]	; (80021fc <SPISendData+0x2a8>)
 8002006:	f002 fdbf 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 800200a:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <SPISendData+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	647b      	str	r3, [r7, #68]	; 0x44
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 8002014:	223b      	movs	r2, #59	; 0x3b
 8002016:	497b      	ldr	r1, [pc, #492]	; (8002204 <SPISendData+0x2b0>)
 8002018:	4879      	ldr	r0, [pc, #484]	; (8002200 <SPISendData+0x2ac>)
 800201a:	f002 fe6b 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 800201e:	e1ea      	b.n	80023f6 <SPISendData+0x4a2>

		}

	} else if (X == '\n' && Y == 'Y' && Z == '\n') {
 8002020:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002024:	2b0a      	cmp	r3, #10
 8002026:	d146      	bne.n	80020b6 <SPISendData+0x162>
 8002028:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800202c:	2b59      	cmp	r3, #89	; 0x59
 800202e:	d142      	bne.n	80020b6 <SPISendData+0x162>
 8002030:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002034:	2b0a      	cmp	r3, #10
 8002036:	d13e      	bne.n	80020b6 <SPISendData+0x162>
		//Y

		if(flag == 1) {
 8002038:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <SPISendData+0x298>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d119      	bne.n	8002076 <SPISendData+0x122>
			//Accel

			sprintf(response_transmit, "y:%08d rad/sec\r\n", y_val);
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4971      	ldr	r1, [pc, #452]	; (800220c <SPISendData+0x2b8>)
 8002046:	486b      	ldr	r0, [pc, #428]	; (80021f4 <SPISendData+0x2a0>)
 8002048:	f004 fba6 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 800204c:	2200      	movs	r2, #0
 800204e:	2102      	movs	r1, #2
 8002050:	4869      	ldr	r0, [pc, #420]	; (80021f8 <SPISendData+0x2a4>)
 8002052:	f001 fed5 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 8002056:	223b      	movs	r2, #59	; 0x3b
 8002058:	4966      	ldr	r1, [pc, #408]	; (80021f4 <SPISendData+0x2a0>)
 800205a:	4868      	ldr	r0, [pc, #416]	; (80021fc <SPISendData+0x2a8>)
 800205c:	f002 fd94 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 8002060:	4b67      	ldr	r3, [pc, #412]	; (8002200 <SPISendData+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	643b      	str	r3, [r7, #64]	; 0x40
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 800206a:	223b      	movs	r2, #59	; 0x3b
 800206c:	4965      	ldr	r1, [pc, #404]	; (8002204 <SPISendData+0x2b0>)
 800206e:	4864      	ldr	r0, [pc, #400]	; (8002200 <SPISendData+0x2ac>)
 8002070:	f002 fe40 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 8002074:	e1c1      	b.n	80023fa <SPISendData+0x4a6>

		} else if(flag == 2) {
 8002076:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <SPISendData+0x298>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	f040 81bc 	bne.w	80023fa <SPISendData+0x4a6>
			//Angel

			sprintf(response_transmit, "y:%04d gr\r\n", y_val);
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4962      	ldr	r1, [pc, #392]	; (8002210 <SPISendData+0x2bc>)
 8002086:	485b      	ldr	r0, [pc, #364]	; (80021f4 <SPISendData+0x2a0>)
 8002088:	f004 fb86 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 800208c:	2200      	movs	r2, #0
 800208e:	2102      	movs	r1, #2
 8002090:	4859      	ldr	r0, [pc, #356]	; (80021f8 <SPISendData+0x2a4>)
 8002092:	f001 feb5 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 8002096:	223b      	movs	r2, #59	; 0x3b
 8002098:	4956      	ldr	r1, [pc, #344]	; (80021f4 <SPISendData+0x2a0>)
 800209a:	4858      	ldr	r0, [pc, #352]	; (80021fc <SPISendData+0x2a8>)
 800209c:	f002 fd74 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 80020a0:	4b57      	ldr	r3, [pc, #348]	; (8002200 <SPISendData+0x2ac>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 80020aa:	223b      	movs	r2, #59	; 0x3b
 80020ac:	4955      	ldr	r1, [pc, #340]	; (8002204 <SPISendData+0x2b0>)
 80020ae:	4854      	ldr	r0, [pc, #336]	; (8002200 <SPISendData+0x2ac>)
 80020b0:	f002 fe20 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 80020b4:	e1a1      	b.n	80023fa <SPISendData+0x4a6>

		}

	} else if (X == '\n' && Y == '\n' && Z == 'Z') {
 80020b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020ba:	2b0a      	cmp	r3, #10
 80020bc:	d146      	bne.n	800214c <SPISendData+0x1f8>
 80020be:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80020c2:	2b0a      	cmp	r3, #10
 80020c4:	d142      	bne.n	800214c <SPISendData+0x1f8>
 80020c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020ca:	2b5a      	cmp	r3, #90	; 0x5a
 80020cc:	d13e      	bne.n	800214c <SPISendData+0x1f8>
		//Z

		if(flag == 1) {
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <SPISendData+0x298>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d119      	bne.n	800210c <SPISendData+0x1b8>
			//Accel

			sprintf(response_transmit, "z:%08d rad/sec\r\n", z_val);
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	494e      	ldr	r1, [pc, #312]	; (8002214 <SPISendData+0x2c0>)
 80020dc:	4845      	ldr	r0, [pc, #276]	; (80021f4 <SPISendData+0x2a0>)
 80020de:	f004 fb5b 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 80020e2:	2200      	movs	r2, #0
 80020e4:	2102      	movs	r1, #2
 80020e6:	4844      	ldr	r0, [pc, #272]	; (80021f8 <SPISendData+0x2a4>)
 80020e8:	f001 fe8a 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 80020ec:	223b      	movs	r2, #59	; 0x3b
 80020ee:	4941      	ldr	r1, [pc, #260]	; (80021f4 <SPISendData+0x2a0>)
 80020f0:	4842      	ldr	r0, [pc, #264]	; (80021fc <SPISendData+0x2a8>)
 80020f2:	f002 fd49 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 80020f6:	4b42      	ldr	r3, [pc, #264]	; (8002200 <SPISendData+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 8002100:	223b      	movs	r2, #59	; 0x3b
 8002102:	4940      	ldr	r1, [pc, #256]	; (8002204 <SPISendData+0x2b0>)
 8002104:	483e      	ldr	r0, [pc, #248]	; (8002200 <SPISendData+0x2ac>)
 8002106:	f002 fdf5 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 800210a:	e178      	b.n	80023fe <SPISendData+0x4aa>

		} else if(flag == 2) {
 800210c:	4b37      	ldr	r3, [pc, #220]	; (80021ec <SPISendData+0x298>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	f040 8173 	bne.w	80023fe <SPISendData+0x4aa>
			//Angel

			sprintf(response_transmit, "z:%04d gr\r\n", z_val);
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	493f      	ldr	r1, [pc, #252]	; (8002218 <SPISendData+0x2c4>)
 800211c:	4835      	ldr	r0, [pc, #212]	; (80021f4 <SPISendData+0x2a0>)
 800211e:	f004 fb3b 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 8002122:	2200      	movs	r2, #0
 8002124:	2102      	movs	r1, #2
 8002126:	4834      	ldr	r0, [pc, #208]	; (80021f8 <SPISendData+0x2a4>)
 8002128:	f001 fe6a 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 800212c:	223b      	movs	r2, #59	; 0x3b
 800212e:	4931      	ldr	r1, [pc, #196]	; (80021f4 <SPISendData+0x2a0>)
 8002130:	4832      	ldr	r0, [pc, #200]	; (80021fc <SPISendData+0x2a8>)
 8002132:	f002 fd29 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <SPISendData+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 8002140:	223b      	movs	r2, #59	; 0x3b
 8002142:	4930      	ldr	r1, [pc, #192]	; (8002204 <SPISendData+0x2b0>)
 8002144:	482e      	ldr	r0, [pc, #184]	; (8002200 <SPISendData+0x2ac>)
 8002146:	f002 fdd5 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 800214a:	e158      	b.n	80023fe <SPISendData+0x4aa>

		}

	} else if (X == 'X' && Y == 'Y' && Z == '\n') {
 800214c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002150:	2b58      	cmp	r3, #88	; 0x58
 8002152:	d167      	bne.n	8002224 <SPISendData+0x2d0>
 8002154:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002158:	2b59      	cmp	r3, #89	; 0x59
 800215a:	d163      	bne.n	8002224 <SPISendData+0x2d0>
 800215c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002160:	2b0a      	cmp	r3, #10
 8002162:	d15f      	bne.n	8002224 <SPISendData+0x2d0>
		//XY

		if(flag == 1) {
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <SPISendData+0x298>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d11a      	bne.n	80021a4 <SPISendData+0x250>
			//Accel

			sprintf(response_transmit, "x:%08d rad/sec;y:%08d rad/sec\r\n", x_val, y_val);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	492a      	ldr	r1, [pc, #168]	; (800221c <SPISendData+0x2c8>)
 8002174:	481f      	ldr	r0, [pc, #124]	; (80021f4 <SPISendData+0x2a0>)
 8002176:	f004 fb0f 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 800217a:	2200      	movs	r2, #0
 800217c:	2102      	movs	r1, #2
 800217e:	481e      	ldr	r0, [pc, #120]	; (80021f8 <SPISendData+0x2a4>)
 8002180:	f001 fe3e 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 8002184:	223b      	movs	r2, #59	; 0x3b
 8002186:	491b      	ldr	r1, [pc, #108]	; (80021f4 <SPISendData+0x2a0>)
 8002188:	481c      	ldr	r0, [pc, #112]	; (80021fc <SPISendData+0x2a8>)
 800218a:	f002 fcfd 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <SPISendData+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 8002198:	223b      	movs	r2, #59	; 0x3b
 800219a:	491a      	ldr	r1, [pc, #104]	; (8002204 <SPISendData+0x2b0>)
 800219c:	4818      	ldr	r0, [pc, #96]	; (8002200 <SPISendData+0x2ac>)
 800219e:	f002 fda9 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 80021a2:	e12e      	b.n	8002402 <SPISendData+0x4ae>

		} else if(flag == 2) {
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <SPISendData+0x298>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	f040 8129 	bne.w	8002402 <SPISendData+0x4ae>
			//Angel

			sprintf(response_transmit, "x:%04d gr;y:%04d gr\r\n", x_val, y_val);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <SPISendData+0x2cc>)
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <SPISendData+0x2a0>)
 80021b8:	f004 faee 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 80021bc:	2200      	movs	r2, #0
 80021be:	2102      	movs	r1, #2
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <SPISendData+0x2a4>)
 80021c2:	f001 fe1d 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 80021c6:	223b      	movs	r2, #59	; 0x3b
 80021c8:	490a      	ldr	r1, [pc, #40]	; (80021f4 <SPISendData+0x2a0>)
 80021ca:	480c      	ldr	r0, [pc, #48]	; (80021fc <SPISendData+0x2a8>)
 80021cc:	f002 fcdc 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <SPISendData+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 80021da:	223b      	movs	r2, #59	; 0x3b
 80021dc:	4909      	ldr	r1, [pc, #36]	; (8002204 <SPISendData+0x2b0>)
 80021de:	4808      	ldr	r0, [pc, #32]	; (8002200 <SPISendData+0x2ac>)
 80021e0:	f002 fd88 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 80021e4:	e10d      	b.n	8002402 <SPISendData+0x4ae>
 80021e6:	bf00      	nop
 80021e8:	20000020 	.word	0x20000020
 80021ec:	20000230 	.word	0x20000230
 80021f0:	0800863c 	.word	0x0800863c
 80021f4:	20000710 	.word	0x20000710
 80021f8:	40020800 	.word	0x40020800
 80021fc:	200004c0 	.word	0x200004c0
 8002200:	20000354 	.word	0x20000354
 8002204:	200003ac 	.word	0x200003ac
 8002208:	08008650 	.word	0x08008650
 800220c:	0800865c 	.word	0x0800865c
 8002210:	08008670 	.word	0x08008670
 8002214:	0800867c 	.word	0x0800867c
 8002218:	08008690 	.word	0x08008690
 800221c:	0800869c 	.word	0x0800869c
 8002220:	080086bc 	.word	0x080086bc
		}

	} else if (X == '\n' && Y == 'Y' && Z == 'Z') {
 8002224:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002228:	2b0a      	cmp	r3, #10
 800222a:	d148      	bne.n	80022be <SPISendData+0x36a>
 800222c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002230:	2b59      	cmp	r3, #89	; 0x59
 8002232:	d144      	bne.n	80022be <SPISendData+0x36a>
 8002234:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002238:	2b5a      	cmp	r3, #90	; 0x5a
 800223a:	d140      	bne.n	80022be <SPISendData+0x36a>
		//YZ

		if(flag == 1) {
 800223c:	4b75      	ldr	r3, [pc, #468]	; (8002414 <SPISendData+0x4c0>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d11a      	bne.n	800227c <SPISendData+0x328>
			//Accel

			sprintf(response_transmit, "y:%08d rad/sec;z:%08d rad/sec\r\n", y_val, z_val);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4973      	ldr	r1, [pc, #460]	; (8002418 <SPISendData+0x4c4>)
 800224c:	4873      	ldr	r0, [pc, #460]	; (800241c <SPISendData+0x4c8>)
 800224e:	f004 faa3 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 8002252:	2200      	movs	r2, #0
 8002254:	2102      	movs	r1, #2
 8002256:	4872      	ldr	r0, [pc, #456]	; (8002420 <SPISendData+0x4cc>)
 8002258:	f001 fdd2 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 800225c:	223b      	movs	r2, #59	; 0x3b
 800225e:	496f      	ldr	r1, [pc, #444]	; (800241c <SPISendData+0x4c8>)
 8002260:	4870      	ldr	r0, [pc, #448]	; (8002424 <SPISendData+0x4d0>)
 8002262:	f002 fc91 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 8002266:	4b70      	ldr	r3, [pc, #448]	; (8002428 <SPISendData+0x4d4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 8002270:	223b      	movs	r2, #59	; 0x3b
 8002272:	496e      	ldr	r1, [pc, #440]	; (800242c <SPISendData+0x4d8>)
 8002274:	486c      	ldr	r0, [pc, #432]	; (8002428 <SPISendData+0x4d4>)
 8002276:	f002 fd3d 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 800227a:	e0c4      	b.n	8002406 <SPISendData+0x4b2>

		} else if(flag == 2) {
 800227c:	4b65      	ldr	r3, [pc, #404]	; (8002414 <SPISendData+0x4c0>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	f040 80bf 	bne.w	8002406 <SPISendData+0x4b2>
			//Angel

			sprintf(response_transmit, "y:%04d gr;z:%04d gr;\r\n", y_val, z_val);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4968      	ldr	r1, [pc, #416]	; (8002430 <SPISendData+0x4dc>)
 800228e:	4863      	ldr	r0, [pc, #396]	; (800241c <SPISendData+0x4c8>)
 8002290:	f004 fa82 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 8002294:	2200      	movs	r2, #0
 8002296:	2102      	movs	r1, #2
 8002298:	4861      	ldr	r0, [pc, #388]	; (8002420 <SPISendData+0x4cc>)
 800229a:	f001 fdb1 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 800229e:	223b      	movs	r2, #59	; 0x3b
 80022a0:	495e      	ldr	r1, [pc, #376]	; (800241c <SPISendData+0x4c8>)
 80022a2:	4860      	ldr	r0, [pc, #384]	; (8002424 <SPISendData+0x4d0>)
 80022a4:	f002 fc70 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 80022a8:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <SPISendData+0x4d4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 80022b2:	223b      	movs	r2, #59	; 0x3b
 80022b4:	495d      	ldr	r1, [pc, #372]	; (800242c <SPISendData+0x4d8>)
 80022b6:	485c      	ldr	r0, [pc, #368]	; (8002428 <SPISendData+0x4d4>)
 80022b8:	f002 fd1c 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 80022bc:	e0a3      	b.n	8002406 <SPISendData+0x4b2>
		}

	} else if (X == 'X' && Y == '\n' && Z == 'Z') {
 80022be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022c2:	2b58      	cmp	r3, #88	; 0x58
 80022c4:	d147      	bne.n	8002356 <SPISendData+0x402>
 80022c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80022ca:	2b0a      	cmp	r3, #10
 80022cc:	d143      	bne.n	8002356 <SPISendData+0x402>
 80022ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022d2:	2b5a      	cmp	r3, #90	; 0x5a
 80022d4:	d13f      	bne.n	8002356 <SPISendData+0x402>
		//XZ

		if(flag == 1) {
 80022d6:	4b4f      	ldr	r3, [pc, #316]	; (8002414 <SPISendData+0x4c0>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d11a      	bne.n	8002316 <SPISendData+0x3c2>
			//Accel

			sprintf(response_transmit, "x:%08d rad/sec;z:%08d rad/sec\r\n", x_val, z_val);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4953      	ldr	r1, [pc, #332]	; (8002434 <SPISendData+0x4e0>)
 80022e6:	484d      	ldr	r0, [pc, #308]	; (800241c <SPISendData+0x4c8>)
 80022e8:	f004 fa56 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 80022ec:	2200      	movs	r2, #0
 80022ee:	2102      	movs	r1, #2
 80022f0:	484b      	ldr	r0, [pc, #300]	; (8002420 <SPISendData+0x4cc>)
 80022f2:	f001 fd85 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 80022f6:	223b      	movs	r2, #59	; 0x3b
 80022f8:	4948      	ldr	r1, [pc, #288]	; (800241c <SPISendData+0x4c8>)
 80022fa:	484a      	ldr	r0, [pc, #296]	; (8002424 <SPISendData+0x4d0>)
 80022fc:	f002 fc44 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 8002300:	4b49      	ldr	r3, [pc, #292]	; (8002428 <SPISendData+0x4d4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	623b      	str	r3, [r7, #32]
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 800230a:	223b      	movs	r2, #59	; 0x3b
 800230c:	4947      	ldr	r1, [pc, #284]	; (800242c <SPISendData+0x4d8>)
 800230e:	4846      	ldr	r0, [pc, #280]	; (8002428 <SPISendData+0x4d4>)
 8002310:	f002 fcf0 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 8002314:	e079      	b.n	800240a <SPISendData+0x4b6>

		} else if(flag == 2) {
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <SPISendData+0x4c0>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d174      	bne.n	800240a <SPISendData+0x4b6>
			//Angel

			sprintf(response_transmit, "x:%04d gr;z:%04d gr\r\n", x_val, z_val);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4944      	ldr	r1, [pc, #272]	; (8002438 <SPISendData+0x4e4>)
 8002326:	483d      	ldr	r0, [pc, #244]	; (800241c <SPISendData+0x4c8>)
 8002328:	f004 fa36 	bl	8006798 <siprintf>

			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 800232c:	2200      	movs	r2, #0
 800232e:	2102      	movs	r1, #2
 8002330:	483b      	ldr	r0, [pc, #236]	; (8002420 <SPISendData+0x4cc>)
 8002332:	f001 fd65 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 8002336:	223b      	movs	r2, #59	; 0x3b
 8002338:	4938      	ldr	r1, [pc, #224]	; (800241c <SPISendData+0x4c8>)
 800233a:	483a      	ldr	r0, [pc, #232]	; (8002424 <SPISendData+0x4d0>)
 800233c:	f002 fc24 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <SPISendData+0x4d4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61fb      	str	r3, [r7, #28]
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 800234a:	223b      	movs	r2, #59	; 0x3b
 800234c:	4937      	ldr	r1, [pc, #220]	; (800242c <SPISendData+0x4d8>)
 800234e:	4836      	ldr	r0, [pc, #216]	; (8002428 <SPISendData+0x4d4>)
 8002350:	f002 fcd0 	bl	8004cf4 <HAL_SPI_Receive_DMA>
		if(flag == 1) {
 8002354:	e059      	b.n	800240a <SPISendData+0x4b6>

		}

	} else if (X == 'X' && Y == 'Y' && Z == 'Z') {
 8002356:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800235a:	2b58      	cmp	r3, #88	; 0x58
 800235c:	d156      	bne.n	800240c <SPISendData+0x4b8>
 800235e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002362:	2b59      	cmp	r3, #89	; 0x59
 8002364:	d152      	bne.n	800240c <SPISendData+0x4b8>
 8002366:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800236a:	2b5a      	cmp	r3, #90	; 0x5a
 800236c:	d14e      	bne.n	800240c <SPISendData+0x4b8>
		//XYZ

		if(flag == 1) {
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <SPISendData+0x4c0>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d11c      	bne.n	80023b2 <SPISendData+0x45e>
			//Accel
			sprintf(response_transmit, "x:%08d rad/sec;y:%08d rad/sec;z:%08d rad/sec\r\n", x_val, y_val, z_val);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	492e      	ldr	r1, [pc, #184]	; (800243c <SPISendData+0x4e8>)
 8002382:	4826      	ldr	r0, [pc, #152]	; (800241c <SPISendData+0x4c8>)
 8002384:	f004 fa08 	bl	8006798 <siprintf>
			//Ready receiving bytes from SPI3 Slave
			MASTER_CS_RESET;
 8002388:	2200      	movs	r2, #0
 800238a:	2102      	movs	r1, #2
 800238c:	4824      	ldr	r0, [pc, #144]	; (8002420 <SPISendData+0x4cc>)
 800238e:	f001 fd37 	bl	8003e00 <HAL_GPIO_WritePin>
			//Transmit bytes from SPI3 Slave to SPI2 Master
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 8002392:	223b      	movs	r2, #59	; 0x3b
 8002394:	4921      	ldr	r1, [pc, #132]	; (800241c <SPISendData+0x4c8>)
 8002396:	4823      	ldr	r0, [pc, #140]	; (8002424 <SPISendData+0x4d0>)
 8002398:	f002 fbf6 	bl	8004b88 <HAL_SPI_Transmit_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <SPISendData+0x4d4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 80023a6:	223b      	movs	r2, #59	; 0x3b
 80023a8:	4920      	ldr	r1, [pc, #128]	; (800242c <SPISendData+0x4d8>)
 80023aa:	481f      	ldr	r0, [pc, #124]	; (8002428 <SPISendData+0x4d4>)
 80023ac:	f002 fca2 	bl	8004cf4 <HAL_SPI_Receive_DMA>

			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
		}
	}
}
 80023b0:	e02c      	b.n	800240c <SPISendData+0x4b8>
		} else if(flag == 2) {
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <SPISendData+0x4c0>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d127      	bne.n	800240c <SPISendData+0x4b8>
			sprintf(response_transmit, "x:%04d gr;y:%04d gr;z:%04d gr\r\n", x_val, y_val, z_val);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	491e      	ldr	r1, [pc, #120]	; (8002440 <SPISendData+0x4ec>)
 80023c6:	4815      	ldr	r0, [pc, #84]	; (800241c <SPISendData+0x4c8>)
 80023c8:	f004 f9e6 	bl	8006798 <siprintf>
			MASTER_CS_RESET;
 80023cc:	2200      	movs	r2, #0
 80023ce:	2102      	movs	r1, #2
 80023d0:	4813      	ldr	r0, [pc, #76]	; (8002420 <SPISendData+0x4cc>)
 80023d2:	f001 fd15 	bl	8003e00 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)response_transmit, RECV_BUFF_SIZE-1);
 80023d6:	223b      	movs	r2, #59	; 0x3b
 80023d8:	4910      	ldr	r1, [pc, #64]	; (800241c <SPISendData+0x4c8>)
 80023da:	4812      	ldr	r0, [pc, #72]	; (8002424 <SPISendData+0x4d0>)
 80023dc:	f002 fbd4 	bl	8004b88 <HAL_SPI_Transmit_DMA>
			uint32_t plug = *(uint32_t*)hspi2.Instance->DR;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <SPISendData+0x4d4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	617b      	str	r3, [r7, #20]
			HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)response_receive, RECV_BUFF_SIZE-1);
 80023ea:	223b      	movs	r2, #59	; 0x3b
 80023ec:	490f      	ldr	r1, [pc, #60]	; (800242c <SPISendData+0x4d8>)
 80023ee:	480e      	ldr	r0, [pc, #56]	; (8002428 <SPISendData+0x4d4>)
 80023f0:	f002 fc80 	bl	8004cf4 <HAL_SPI_Receive_DMA>
}
 80023f4:	e00a      	b.n	800240c <SPISendData+0x4b8>
		if(flag == 1) {
 80023f6:	bf00      	nop
 80023f8:	e008      	b.n	800240c <SPISendData+0x4b8>
		if(flag == 1) {
 80023fa:	bf00      	nop
 80023fc:	e006      	b.n	800240c <SPISendData+0x4b8>
		if(flag == 1) {
 80023fe:	bf00      	nop
 8002400:	e004      	b.n	800240c <SPISendData+0x4b8>
		if(flag == 1) {
 8002402:	bf00      	nop
 8002404:	e002      	b.n	800240c <SPISendData+0x4b8>
		if(flag == 1) {
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <SPISendData+0x4b8>
		if(flag == 1) {
 800240a:	bf00      	nop
}
 800240c:	bf00      	nop
 800240e:	3750      	adds	r7, #80	; 0x50
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000230 	.word	0x20000230
 8002418:	080086d4 	.word	0x080086d4
 800241c:	20000710 	.word	0x20000710
 8002420:	40020800 	.word	0x40020800
 8002424:	200004c0 	.word	0x200004c0
 8002428:	20000354 	.word	0x20000354
 800242c:	200003ac 	.word	0x200003ac
 8002430:	080086f4 	.word	0x080086f4
 8002434:	0800870c 	.word	0x0800870c
 8002438:	0800872c 	.word	0x0800872c
 800243c:	08008744 	.word	0x08008744
 8002440:	08008774 	.word	0x08008774

08002444 <GetAccel>:

void GetAccel() {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	readSensor(); //get data from registers
 8002448:	f7ff f85e 	bl	8001508 <readSensor>
	PhysVectorsToAccel(); //set values in global vars
 800244c:	f7ff fbbe 	bl	8001bcc <PhysVectorsToAccel>
	SPISendData(ACCEL_X, ACCEL_Y, ACCEL_Z); //pass next to determinate and print values
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <GetAccel+0x28>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <GetAccel+0x2c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <GetAccel+0x30>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	f7ff fd77 	bl	8001f54 <SPISendData>
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000234 	.word	0x20000234
 8002470:	20000238 	.word	0x20000238
 8002474:	2000023c 	.word	0x2000023c

08002478 <GetAngel>:

void GetAngel() {
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	readSensor(); //get data from registers
 800247c:	f7ff f844 	bl	8001508 <readSensor>
	PhysVectorsToAccel(); //get accel vectors (globals)
 8002480:	f7ff fba4 	bl	8001bcc <PhysVectorsToAccel>
	AccelToAngel(); //get angels from accels vectors (global)
 8002484:	f7ff fbdc 	bl	8001c40 <AccelToAngel>
	SPISendData(ACCEL_XANGLE, ACCEL_YANGLE, ACCEL_ZANGLE); //pass next to determinate and print values
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <GetAngel+0x2c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <GetAngel+0x30>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <GetAngel+0x34>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	f7ff fd5b 	bl	8001f54 <SPISendData>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000240 	.word	0x20000240
 80024a8:	20000244 	.word	0x20000244
 80024ac:	20000248 	.word	0x20000248

080024b0 <SetInterval>:

void SetInterval(uint16_t interval) {
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
	if(interval > 500 && interval <= 9999) {
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024c0:	d908      	bls.n	80024d4 <SetInterval+0x24>
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d803      	bhi.n	80024d4 <SetInterval+0x24>
		command_delay = interval;
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <SetInterval+0x38>)
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e003      	b.n	80024dc <SetInterval+0x2c>
	} else {
		//pass wrong value of interval
		//set default
		command_delay = 500;
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SetInterval+0x38>)
 80024d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024da:	601a      	str	r2, [r3, #0]
	}
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	2000002c 	.word	0x2000002c

080024ec <ParseCommand>:

//Interpreting received UART commands
uint8_t ParseCommand(uint8_t* UART_receive) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b098      	sub	sp, #96	; 0x60
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

	//Set time 500 ; Set time 1000 ; Set time 1500 ; Set time 2000 ;

	//Copy array to buffer
	uint8_t buffer[RECV_BUFF_SIZE];
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80024fa:	e010      	b.n	800251e <ParseCommand+0x32>
		buffer[i] = UART_receive[i];
 80024fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002500:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	440a      	add	r2, r1
 8002508:	7812      	ldrb	r2, [r2, #0]
 800250a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800250e:	440b      	add	r3, r1
 8002510:	f803 2c58 	strb.w	r2, [r3, #-88]
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002514:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002518:	3301      	adds	r3, #1
 800251a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800251e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002522:	2b3b      	cmp	r3, #59	; 0x3b
 8002524:	d9ea      	bls.n	80024fc <ParseCommand+0x10>
	}


	/* Search wildcards using checksum */
	uint8_t local_flag = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	uint16_t checksum_1 = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002532:	2300      	movs	r3, #0
 8002534:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002538:	e023      	b.n	8002582 <ParseCommand+0x96>
		if(checksum_1 == checksum_accelrule) {
 800253a:	4b84      	ldr	r3, [pc, #528]	; (800274c <ParseCommand+0x260>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002542:	429a      	cmp	r2, r3
 8002544:	d106      	bne.n	8002554 <ParseCommand+0x68>
			local_flag = 1; //Get Accel
 8002546:	2301      	movs	r3, #1
 8002548:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			flag = 1;
 800254c:	4b80      	ldr	r3, [pc, #512]	; (8002750 <ParseCommand+0x264>)
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
			break; //Stop cycle after searching command-name wildcard
 8002552:	e01c      	b.n	800258e <ParseCommand+0xa2>
		}

		if(buffer[i] == get_accelrule[i]) {
 8002554:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002558:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800255c:	4413      	add	r3, r2
 800255e:	f813 2c58 	ldrb.w	r2, [r3, #-88]
 8002562:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002566:	497b      	ldr	r1, [pc, #492]	; (8002754 <ParseCommand+0x268>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	429a      	cmp	r2, r3
 800256c:	d10e      	bne.n	800258c <ParseCommand+0xa0>
			checksum_1++;
 800256e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002572:	3301      	adds	r3, #1
 8002574:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002578:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002582:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002586:	2b3b      	cmp	r3, #59	; 0x3b
 8002588:	d9d7      	bls.n	800253a <ParseCommand+0x4e>
 800258a:	e000      	b.n	800258e <ParseCommand+0xa2>
		} else {
			break; //break cycle if have mismatch
 800258c:	bf00      	nop
		}
	}

	uint16_t checksum_2 = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002594:	2300      	movs	r3, #0
 8002596:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800259a:	e023      	b.n	80025e4 <ParseCommand+0xf8>
		if(checksum_2 == checksum_angelrule) {
 800259c:	4b6e      	ldr	r3, [pc, #440]	; (8002758 <ParseCommand+0x26c>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d106      	bne.n	80025b6 <ParseCommand+0xca>
			local_flag = 2; //Get Angel
 80025a8:	2302      	movs	r3, #2
 80025aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			flag = 2;
 80025ae:	4b68      	ldr	r3, [pc, #416]	; (8002750 <ParseCommand+0x264>)
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
			break; //Stop cycle after searching command-name wildcard
 80025b4:	e01c      	b.n	80025f0 <ParseCommand+0x104>
		}

		if(buffer[i] == get_angelrule[i]) {
 80025b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80025ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025be:	4413      	add	r3, r2
 80025c0:	f813 2c58 	ldrb.w	r2, [r3, #-88]
 80025c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80025c8:	4964      	ldr	r1, [pc, #400]	; (800275c <ParseCommand+0x270>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d10e      	bne.n	80025ee <ParseCommand+0x102>
			checksum_2++;
 80025d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 80025da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80025de:	3301      	adds	r3, #1
 80025e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80025e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80025e8:	2b3b      	cmp	r3, #59	; 0x3b
 80025ea:	d9d7      	bls.n	800259c <ParseCommand+0xb0>
 80025ec:	e000      	b.n	80025f0 <ParseCommand+0x104>
		} else {
			break;
 80025ee:	bf00      	nop
		}
	}

	uint16_t checksum_3 = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80025fc:	e020      	b.n	8002640 <ParseCommand+0x154>
		if(checksum_3 == checksum_timerule) {
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <ParseCommand+0x274>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002606:	429a      	cmp	r2, r3
 8002608:	d103      	bne.n	8002612 <ParseCommand+0x126>
			local_flag = 3; //Get time
 800260a:	2303      	movs	r3, #3
 800260c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			break; //Stop cycle after searching command-name wildcard
 8002610:	e01c      	b.n	800264c <ParseCommand+0x160>
		}

		if(buffer[i] == get_timerule[i]) {
 8002612:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002616:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800261a:	4413      	add	r3, r2
 800261c:	f813 2c58 	ldrb.w	r2, [r3, #-88]
 8002620:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002624:	494f      	ldr	r1, [pc, #316]	; (8002764 <ParseCommand+0x278>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	429a      	cmp	r2, r3
 800262a:	d10e      	bne.n	800264a <ParseCommand+0x15e>
			checksum_3++;
 800262c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002630:	3301      	adds	r3, #1
 8002632:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002636:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800263a:	3301      	adds	r3, #1
 800263c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002640:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002644:	2b3b      	cmp	r3, #59	; 0x3b
 8002646:	d9da      	bls.n	80025fe <ParseCommand+0x112>
 8002648:	e000      	b.n	800264c <ParseCommand+0x160>
		} else {
			break;
 800264a:	bf00      	nop
		}
	}

	//Determine range of args and push params in arr
	uint16_t lhs_range = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t rhs_range = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	switch(local_flag) {
 8002658:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800265c:	2b02      	cmp	r3, #2
 800265e:	d00e      	beq.n	800267e <ParseCommand+0x192>
 8002660:	2b03      	cmp	r3, #3
 8002662:	d017      	beq.n	8002694 <ParseCommand+0x1a8>
 8002664:	2b01      	cmp	r3, #1
 8002666:	d120      	bne.n	80026aa <ParseCommand+0x1be>
	case 1:
		//checksum + 1; //checksum + 5;
		lhs_range = checksum_1 + 1;
 8002668:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800266c:	3301      	adds	r3, #1
 800266e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		rhs_range = checksum_1 + 5;
 8002672:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002676:	3305      	adds	r3, #5
 8002678:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		break;
 800267c:	e015      	b.n	80026aa <ParseCommand+0x1be>
	case 2:
		lhs_range = checksum_2 + 1;
 800267e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002682:	3301      	adds	r3, #1
 8002684:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		rhs_range = checksum_2 + 5;
 8002688:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800268c:	3305      	adds	r3, #5
 800268e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		break;
 8002692:	e00a      	b.n	80026aa <ParseCommand+0x1be>
	case 3:
		lhs_range = checksum_3 + 1;
 8002694:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002698:	3301      	adds	r3, #1
 800269a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		rhs_range = checksum_3 + 5;
 800269e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026a2:	3305      	adds	r3, #5
 80026a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		break;
 80026a8:	bf00      	nop
	}

	for(uint16_t i = lhs_range, j = 0; i < rhs_range; i++, j++) {
 80026aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80026b8:	e014      	b.n	80026e4 <ParseCommand+0x1f8>
		args_buff[j] = buffer[i];
 80026ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026be:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80026c2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80026c6:	440a      	add	r2, r1
 80026c8:	f812 1c58 	ldrb.w	r1, [r2, #-88]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <ParseCommand+0x27c>)
 80026ce:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = lhs_range, j = 0; i < rhs_range; i++, j++) {
 80026d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026d4:	3301      	adds	r3, #1
 80026d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80026da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026de:	3301      	adds	r3, #1
 80026e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80026e4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80026e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3e4      	bcc.n	80026ba <ParseCommand+0x1ce>
	}

	/* Parse arguments using checksum and wildcards */
	if(local_flag == 1) {
 80026f0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <ParseCommand+0x212>

		GetAccel();
 80026f8:	f7ff fea4 	bl	8002444 <GetAccel>
 80026fc:	e01f      	b.n	800273e <ParseCommand+0x252>

	} else if(local_flag == 2) {
 80026fe:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002702:	2b02      	cmp	r3, #2
 8002704:	d102      	bne.n	800270c <ParseCommand+0x220>

		GetAngel();
 8002706:	f7ff feb7 	bl	8002478 <GetAngel>
 800270a:	e018      	b.n	800273e <ParseCommand+0x252>

	} else if (local_flag == 3) {
 800270c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002710:	2b03      	cmp	r3, #3
 8002712:	d10e      	bne.n	8002732 <ParseCommand+0x246>
		uint16_t value = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		value = atoi(args_buff);
 800271a:	4813      	ldr	r0, [pc, #76]	; (8002768 <ParseCommand+0x27c>)
 800271c:	f004 f805 	bl	800672a <atoi>
 8002720:	4603      	mov	r3, r0
 8002722:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		SetInterval(value);
 8002726:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fec0 	bl	80024b0 <SetInterval>
 8002730:	e005      	b.n	800273e <ParseCommand+0x252>
	} else if (local_flag == 0) {
 8002732:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <ParseCommand+0x252>
		SPISendError();
 800273a:	f7ff fbd9 	bl	8001ef0 <SPISendError>
	}

	return local_flag;
 800273e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
}
 8002742:	4618      	mov	r0, r3
 8002744:	3760      	adds	r7, #96	; 0x60
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000024 	.word	0x20000024
 8002750:	20000230 	.word	0x20000230
 8002754:	20000000 	.word	0x20000000
 8002758:	20000026 	.word	0x20000026
 800275c:	2000000c 	.word	0x2000000c
 8002760:	20000028 	.word	0x20000028
 8002764:	20000018 	.word	0x20000018
 8002768:	20000020 	.word	0x20000020

0800276c <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) { //Determine serial port
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <USER_UART_IRQHandler+0x44>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d114      	bne.n	80027a8 <USER_UART_IRQHandler+0x3c>
		if(RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) { //Checking source IDLE IRQ
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	d10d      	bne.n	80027a8 <USER_UART_IRQHandler+0x3c>
			__HAL_UART_CLEAR_IDLEFLAG(huart); //Clear IDLE IRQ sign
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
			USER_UART_IDLECallback(huart); //Call interrupt handler
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f844 	bl	8002830 <USER_UART_IDLECallback>
		}
	}
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40004400 	.word	0x40004400

080027b4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_SPI_TxCpltCallback+0x24>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d104      	bne.n	80027d0 <HAL_SPI_TxCpltCallback+0x1c>
		MASTER_CS_SET;
 80027c6:	2201      	movs	r2, #1
 80027c8:	2102      	movs	r1, #2
 80027ca:	4804      	ldr	r0, [pc, #16]	; (80027dc <HAL_SPI_TxCpltCallback+0x28>)
 80027cc:	f001 fb18 	bl	8003e00 <HAL_GPIO_WritePin>
	}
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40003800 	.word	0x40003800
 80027dc:	40020800 	.word	0x40020800

080027e0 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI3) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0b      	ldr	r2, [pc, #44]	; (800281c <HAL_SPI_RxCpltCallback+0x3c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d102      	bne.n	80027f8 <HAL_SPI_RxCpltCallback+0x18>
		received_from_master = 1;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_SPI_RxCpltCallback+0x40>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
	}
	if(hspi->Instance == SPI2) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_SPI_RxCpltCallback+0x44>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d107      	bne.n	8002812 <HAL_SPI_RxCpltCallback+0x32>
		received_from_slave = 1;
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_SPI_RxCpltCallback+0x48>)
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
		MASTER_CS_SET;
 8002808:	2201      	movs	r2, #1
 800280a:	2102      	movs	r1, #2
 800280c:	4807      	ldr	r0, [pc, #28]	; (800282c <HAL_SPI_RxCpltCallback+0x4c>)
 800280e:	f001 faf7 	bl	8003e00 <HAL_GPIO_WritePin>
	}
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40003c00 	.word	0x40003c00
 8002820:	2000022e 	.word	0x2000022e
 8002824:	40003800 	.word	0x40003800
 8002828:	2000022f 	.word	0x2000022f
 800282c:	40020800 	.word	0x40020800

08002830 <USER_UART_IDLECallback>:

void USER_UART_IDLECallback(UART_HandleTypeDef *huart) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(huart); //Stop DMA transmission
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f003 f8b5 	bl	80059a8 <HAL_UART_DMAStop>
	Unprocessed_UART_buff_detected = SET;
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <USER_UART_IDLECallback+0x24>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
	//Next DMA transmission will be allowed after buffer processing
	has_command = 1;
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <USER_UART_IDLECallback+0x28>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000232 	.word	0x20000232
 8002858:	2000022d 	.word	0x2000022d

0800285c <ClearBuff>:

//Clear USART receive buff (pushing '\0' in all positions)
void ClearBuff(uint8_t* buff) {
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002864:	2300      	movs	r3, #0
 8002866:	81fb      	strh	r3, [r7, #14]
 8002868:	e007      	b.n	800287a <ClearBuff+0x1e>
		buff[i] = '\0';
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < RECV_BUFF_SIZE; i++) {
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	3301      	adds	r3, #1
 8002878:	81fb      	strh	r3, [r7, #14]
 800287a:	89fb      	ldrh	r3, [r7, #14]
 800287c:	2b3b      	cmp	r3, #59	; 0x3b
 800287e:	d9f4      	bls.n	800286a <ClearBuff+0xe>
	}
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002892:	e7fe      	b.n	8002892 <Error_Handler+0x6>

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <HAL_MspInit+0x4c>)
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_MspInit+0x4c>)
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_MspInit+0x4c>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_MspInit+0x4c>)
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_MspInit+0x4c>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_MspInit+0x4c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028d2:	2007      	movs	r0, #7
 80028d4:	f000 fcd0 	bl	8003278 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b090      	sub	sp, #64	; 0x40
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a71      	ldr	r2, [pc, #452]	; (8002ac8 <HAL_SPI_MspInit+0x1e4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d12c      	bne.n	8002960 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	4a70      	ldr	r2, [pc, #448]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 800290c:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
 8002926:	4a69      	ldr	r2, [pc, #420]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800293e:	23e0      	movs	r3, #224	; 0xe0
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800294e:	2305      	movs	r3, #5
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002956:	4619      	mov	r1, r3
 8002958:	485d      	ldr	r0, [pc, #372]	; (8002ad0 <HAL_SPI_MspInit+0x1ec>)
 800295a:	f001 f8cf 	bl	8003afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800295e:	e199      	b.n	8002c94 <HAL_SPI_MspInit+0x3b0>
  else if(hspi->Instance==SPI2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a5b      	ldr	r2, [pc, #364]	; (8002ad4 <HAL_SPI_MspInit+0x1f0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 80c2 	bne.w	8002af0 <HAL_SPI_MspInit+0x20c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	4a56      	ldr	r2, [pc, #344]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 8002972:	4b56      	ldr	r3, [pc, #344]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297a:	6413      	str	r3, [r2, #64]	; 0x40
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 800298e:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6313      	str	r3, [r2, #48]	; 0x30
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 80029aa:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	6313      	str	r3, [r2, #48]	; 0x30
 80029b4:	4b45      	ldr	r3, [pc, #276]	; (8002acc <HAL_SPI_MspInit+0x1e8>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029c0:	230c      	movs	r3, #12
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029d0:	2305      	movs	r3, #5
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d8:	4619      	mov	r1, r3
 80029da:	483f      	ldr	r0, [pc, #252]	; (8002ad8 <HAL_SPI_MspInit+0x1f4>)
 80029dc:	f001 f88e 	bl	8003afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029f2:	2305      	movs	r3, #5
 80029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fa:	4619      	mov	r1, r3
 80029fc:	4837      	ldr	r0, [pc, #220]	; (8002adc <HAL_SPI_MspInit+0x1f8>)
 80029fe:	f001 f87d 	bl	8003afc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a04:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <HAL_SPI_MspInit+0x200>)
 8002a06:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002a08:	4b35      	ldr	r3, [pc, #212]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a14:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a20:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a22:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a40:	4827      	ldr	r0, [pc, #156]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a42:	f000 fc5b 	bl	80032fc <HAL_DMA_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8002a4c:	f7ff ff1e 	bl	800288c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a56:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <HAL_SPI_MspInit+0x1fc>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a5e:	4a23      	ldr	r2, [pc, #140]	; (8002aec <HAL_SPI_MspInit+0x208>)
 8002a60:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a9a:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002a9c:	f000 fc2e 	bl	80032fc <HAL_DMA_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 8002aa6:	f7ff fef1 	bl	800288c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002aae:	649a      	str	r2, [r3, #72]	; 0x48
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <HAL_SPI_MspInit+0x204>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2024      	movs	r0, #36	; 0x24
 8002abc:	f000 fbe7 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002ac0:	2024      	movs	r0, #36	; 0x24
 8002ac2:	f000 fc00 	bl	80032c6 <HAL_NVIC_EnableIRQ>
}
 8002ac6:	e0e5      	b.n	8002c94 <HAL_SPI_MspInit+0x3b0>
 8002ac8:	40013000 	.word	0x40013000
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40003800 	.word	0x40003800
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	200003e8 	.word	0x200003e8
 8002ae4:	40026058 	.word	0x40026058
 8002ae8:	200006b0 	.word	0x200006b0
 8002aec:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a69      	ldr	r2, [pc, #420]	; (8002c9c <HAL_SPI_MspInit+0x3b8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	f040 80cc 	bne.w	8002c94 <HAL_SPI_MspInit+0x3b0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	4a67      	ldr	r2, [pc, #412]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b02:	4b67      	ldr	r3, [pc, #412]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0c:	4b64      	ldr	r3, [pc, #400]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	4a60      	ldr	r2, [pc, #384]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6313      	str	r3, [r2, #48]	; 0x30
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4a59      	ldr	r2, [pc, #356]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b3a:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	6313      	str	r3, [r2, #48]	; 0x30
 8002b44:	4b56      	ldr	r3, [pc, #344]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b56:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_SPI_MspInit+0x3bc>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b7c:	2306      	movs	r3, #6
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	4847      	ldr	r0, [pc, #284]	; (8002ca4 <HAL_SPI_MspInit+0x3c0>)
 8002b88:	f000 ffb8 	bl	8003afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	483f      	ldr	r0, [pc, #252]	; (8002ca8 <HAL_SPI_MspInit+0x3c4>)
 8002baa:	f000 ffa7 	bl	8003afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002bae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bc0:	2306      	movs	r3, #6
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4838      	ldr	r0, [pc, #224]	; (8002cac <HAL_SPI_MspInit+0x3c8>)
 8002bcc:	f000 ff96 	bl	8003afc <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002bd2:	4a38      	ldr	r2, [pc, #224]	; (8002cb4 <HAL_SPI_MspInit+0x3d0>)
 8002bd4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bee:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c02:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c08:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002c0e:	4828      	ldr	r0, [pc, #160]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002c10:	f000 fb74 	bl	80032fc <HAL_DMA_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_SPI_MspInit+0x33a>
      Error_Handler();
 8002c1a:	f7ff fe37 	bl	800288c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002c22:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c24:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <HAL_SPI_MspInit+0x3cc>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <HAL_SPI_MspInit+0x3d8>)
 8002c2e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c38:	2240      	movs	r2, #64	; 0x40
 8002c3a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c48:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002c68:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c6a:	f000 fb47 	bl	80032fc <HAL_DMA_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_SPI_MspInit+0x394>
      Error_Handler();
 8002c74:	f7ff fe0a 	bl	800288c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c7c:	649a      	str	r2, [r3, #72]	; 0x48
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_SPI_MspInit+0x3d4>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	2033      	movs	r0, #51	; 0x33
 8002c8a:	f000 fb00 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002c8e:	2033      	movs	r0, #51	; 0x33
 8002c90:	f000 fb19 	bl	80032c6 <HAL_NVIC_EnableIRQ>
}
 8002c94:	bf00      	nop
 8002c96:	3740      	adds	r7, #64	; 0x40
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40003c00 	.word	0x40003c00
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	2000074c 	.word	0x2000074c
 8002cb4:	40026010 	.word	0x40026010
 8002cb8:	20000518 	.word	0x20000518
 8002cbc:	400260b8 	.word	0x400260b8

08002cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a4b      	ldr	r2, [pc, #300]	; (8002e0c <HAL_UART_MspInit+0x14c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	f040 8090 	bne.w	8002e04 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	4a49      	ldr	r2, [pc, #292]	; (8002e10 <HAL_UART_MspInit+0x150>)
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_UART_MspInit+0x150>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf4:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_UART_MspInit+0x150>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	4a42      	ldr	r2, [pc, #264]	; (8002e10 <HAL_UART_MspInit+0x150>)
 8002d06:	4b42      	ldr	r3, [pc, #264]	; (8002e10 <HAL_UART_MspInit+0x150>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d10:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_UART_MspInit+0x150>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d1c:	230c      	movs	r3, #12
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4837      	ldr	r0, [pc, #220]	; (8002e14 <HAL_UART_MspInit+0x154>)
 8002d38:	f000 fee0 	bl	8003afc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d3e:	4a37      	ldr	r2, [pc, #220]	; (8002e1c <HAL_UART_MspInit+0x15c>)
 8002d40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d42:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d48:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d4a:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d70:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d7c:	4826      	ldr	r0, [pc, #152]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d7e:	f000 fabd 	bl	80032fc <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002d88:	f7ff fd80 	bl	800288c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
 8002d92:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_UART_MspInit+0x158>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_UART_MspInit+0x164>)
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002da8:	2240      	movs	r2, #64	; 0x40
 8002daa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dac:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002dd8:	4811      	ldr	r0, [pc, #68]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dda:	f000 fa8f 	bl	80032fc <HAL_DMA_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002de4:	f7ff fd52 	bl	800288c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a0d      	ldr	r2, [pc, #52]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34
 8002dee:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <HAL_UART_MspInit+0x160>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	2026      	movs	r0, #38	; 0x26
 8002dfa:	f000 fa48 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dfe:	2026      	movs	r0, #38	; 0x26
 8002e00:	f000 fa61 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40004400 	.word	0x40004400
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	200002f4 	.word	0x200002f4
 8002e1c:	40026088 	.word	0x40026088
 8002e20:	20000578 	.word	0x20000578
 8002e24:	400260a0 	.word	0x400260a0

08002e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <NMI_Handler+0x4>

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e74:	f000 f8f0 	bl	8003058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e80:	2004      	movs	r0, #4
 8002e82:	f000 ffd7 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <DMA1_Stream0_IRQHandler+0x10>)
 8002e92:	f000 fbcb 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000074c 	.word	0x2000074c

08002ea0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <DMA1_Stream3_IRQHandler+0x10>)
 8002ea6:	f000 fbc1 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200003e8 	.word	0x200003e8

08002eb4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <DMA1_Stream4_IRQHandler+0x10>)
 8002eba:	f000 fbb7 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200006b0 	.word	0x200006b0

08002ec8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <DMA1_Stream5_IRQHandler+0x10>)
 8002ece:	f000 fbad 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200002f4 	.word	0x200002f4

08002edc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <DMA1_Stream6_IRQHandler+0x10>)
 8002ee2:	f000 fba3 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000578 	.word	0x20000578

08002ef0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <SPI2_IRQHandler+0x10>)
 8002ef6:	f002 f8c7 	bl	8005088 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  /* USER CODE END SPI2_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000354 	.word	0x20000354

08002f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f08:	4803      	ldr	r0, [pc, #12]	; (8002f18 <USART2_IRQHandler+0x14>)
 8002f0a:	f002 fda9 	bl	8005a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 8002f0e:	4802      	ldr	r0, [pc, #8]	; (8002f18 <USART2_IRQHandler+0x14>)
 8002f10:	f7ff fc2c 	bl	800276c <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000630 	.word	0x20000630

08002f1c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <DMA1_Stream7_IRQHandler+0x10>)
 8002f22:	f000 fb83 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000518 	.word	0x20000518

08002f30 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <SPI3_IRQHandler+0x10>)
 8002f36:	f002 f8a7 	bl	8005088 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200004c0 	.word	0x200004c0

08002f44 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <_sbrk+0x50>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <_sbrk+0x16>
		heap_end = &end;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <_sbrk+0x50>)
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <_sbrk+0x54>)
 8002f58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <_sbrk+0x50>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <_sbrk+0x50>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	466a      	mov	r2, sp
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d907      	bls.n	8002f7e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002f6e:	f003 fbe1 	bl	8006734 <__errno>
 8002f72:	4602      	mov	r2, r0
 8002f74:	230c      	movs	r3, #12
 8002f76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7c:	e006      	b.n	8002f8c <_sbrk+0x48>
	}

	heap_end += incr;
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <_sbrk+0x50>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <_sbrk+0x50>)
 8002f88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	2000024c 	.word	0x2000024c
 8002f98:	200007b4 	.word	0x200007b4

08002f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <SystemInit+0x20>)
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <SystemInit+0x20>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_Init+0x34>)
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_Init+0x34>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fce:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd0:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <HAL_Init+0x34>)
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_Init+0x34>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fdc:	2003      	movs	r0, #3
 8002fde:	f000 f94b 	bl	8003278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f000 f808 	bl	8002ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe8:	f7ff fc54 	bl	8002894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00

08002ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_InitTick+0x54>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_InitTick+0x58>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f963 	bl	80032e2 <HAL_SYSTICK_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e00e      	b.n	8003044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b0f      	cmp	r3, #15
 800302a:	d80a      	bhi.n	8003042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800302c:	2200      	movs	r2, #0
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003034:	f000 f92b 	bl	800328e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <HAL_InitTick+0x5c>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000030 	.word	0x20000030
 8003050:	20000038 	.word	0x20000038
 8003054:	20000034 	.word	0x20000034

08003058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_IncTick+0x20>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_IncTick+0x24>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4413      	add	r3, r2
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_IncTick+0x24>)
 800306a:	6013      	str	r3, [r2, #0]
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000038 	.word	0x20000038
 800307c:	200007ac 	.word	0x200007ac

08003080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return uwTick;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_GetTick+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200007ac 	.word	0x200007ac

08003098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff ffee 	bl	8003080 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b0:	d005      	beq.n	80030be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_Delay+0x40>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030be:	bf00      	nop
 80030c0:	f7ff ffde 	bl	8003080 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad2      	subs	r2, r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d3f7      	bcc.n	80030c0 <HAL_Delay+0x28>
  {
  }
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000038 	.word	0x20000038

080030dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f8:	4013      	ands	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310e:	4a04      	ldr	r2, [pc, #16]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60d3      	str	r3, [r2, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <__NVIC_GetPriorityGrouping+0x18>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 0307 	and.w	r3, r3, #7
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003152:	4909      	ldr	r1, [pc, #36]	; (8003178 <__NVIC_EnableIRQ+0x38>)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	79fa      	ldrb	r2, [r7, #7]
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000e100 	.word	0xe000e100

0800317c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	2b00      	cmp	r3, #0
 800318e:	db0a      	blt.n	80031a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003190:	490d      	ldr	r1, [pc, #52]	; (80031c8 <__NVIC_SetPriority+0x4c>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a4:	e00a      	b.n	80031bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a6:	4909      	ldr	r1, [pc, #36]	; (80031cc <__NVIC_SetPriority+0x50>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	3b04      	subs	r3, #4
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	440b      	add	r3, r1
 80031ba:	761a      	strb	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f1c3 0307 	rsb	r3, r3, #7
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	bf28      	it	cs
 80031ee:	2304      	movcs	r3, #4
 80031f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d902      	bls.n	8003200 <NVIC_EncodePriority+0x30>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3b03      	subs	r3, #3
 80031fe:	e000      	b.n	8003202 <NVIC_EncodePriority+0x32>
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	2201      	movs	r2, #1
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	1e5a      	subs	r2, r3, #1
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	401a      	ands	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003216:	2101      	movs	r1, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	1e59      	subs	r1, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4313      	orrs	r3, r2
         );
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003244:	d301      	bcc.n	800324a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003246:	2301      	movs	r3, #1
 8003248:	e00f      	b.n	800326a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <SysTick_Config+0x40>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003252:	210f      	movs	r1, #15
 8003254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003258:	f7ff ff90 	bl	800317c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <SysTick_Config+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <SysTick_Config+0x40>)
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000e010 	.word	0xe000e010

08003278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff2b 	bl	80030dc <__NVIC_SetPriorityGrouping>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a0:	f7ff ff40 	bl	8003124 <__NVIC_GetPriorityGrouping>
 80032a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	6978      	ldr	r0, [r7, #20]
 80032ac:	f7ff ff90 	bl	80031d0 <NVIC_EncodePriority>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff5f 	bl	800317c <__NVIC_SetPriority>
}
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff33 	bl	8003140 <__NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ffa2 	bl	8003234 <SysTick_Config>
 80032f0:	4603      	mov	r3, r0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff feba 	bl	8003080 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e099      	b.n	800344c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003338:	e00f      	b.n	800335a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800333a:	f7ff fea1 	bl	8003080 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b05      	cmp	r3, #5
 8003346:	d908      	bls.n	800335a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e078      	b.n	800344c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e8      	bne.n	800333a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4b38      	ldr	r3, [pc, #224]	; (8003454 <HAL_DMA_Init+0x158>)
 8003374:	4013      	ands	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4313      	orrs	r3, r2
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0307 	bic.w	r3, r3, #7
 80033da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d117      	bne.n	800341e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb01 	bl	8003a08 <DMA_CheckFifoParam>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800341a:	2301      	movs	r3, #1
 800341c:	e016      	b.n	800344c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fab8 	bl	800399c <DMA_CalcBaseAndBitshift>
 800342c:	4603      	mov	r3, r0
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	223f      	movs	r2, #63	; 0x3f
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	f010803f 	.word	0xf010803f

08003458 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_DMA_Start_IT+0x26>
 800347a:	2302      	movs	r3, #2
 800347c:	e040      	b.n	8003500 <HAL_DMA_Start_IT+0xa8>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d12f      	bne.n	80034f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa4a 	bl	8003940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	223f      	movs	r2, #63	; 0x3f
 80034b2:	409a      	lsls	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	f042 0216 	orr.w	r2, r2, #22
 80034c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e005      	b.n	80034fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003516:	f7ff fdb3 	bl	8003080 <HAL_GetTick>
 800351a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d008      	beq.n	800353a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e052      	b.n	80035e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	f022 0216 	bic.w	r2, r2, #22
 8003548:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	6952      	ldr	r2, [r2, #20]
 8003554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003558:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_DMA_Abort+0x62>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	f022 0208 	bic.w	r2, r2, #8
 8003578:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800358a:	e013      	b.n	80035b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800358c:	f7ff fd78 	bl	8003080 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b05      	cmp	r3, #5
 8003598:	d90c      	bls.n	80035b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2203      	movs	r2, #3
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e015      	b.n	80035e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e4      	bne.n	800358c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	223f      	movs	r2, #63	; 0x3f
 80035c8:	409a      	lsls	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d004      	beq.n	8003606 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00c      	b.n	8003620 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003638:	4b92      	ldr	r3, [pc, #584]	; (8003884 <HAL_DMA_IRQHandler+0x258>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a92      	ldr	r2, [pc, #584]	; (8003888 <HAL_DMA_IRQHandler+0x25c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	2208      	movs	r2, #8
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01a      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2208      	movs	r2, #8
 8003686:	409a      	lsls	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2201      	movs	r2, #1
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d012      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2204      	movs	r2, #4
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	2210      	movs	r2, #16
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d043      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03c      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	2210      	movs	r2, #16
 8003728:	409a      	lsls	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d018      	beq.n	800376e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d024      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
 800375a:	e01f      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01b      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e016      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	f022 0208 	bic.w	r2, r2, #8
 800378a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	2220      	movs	r2, #32
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 808e 	beq.w	80038ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8086 	beq.w	80038ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	2220      	movs	r2, #32
 80037c4:	409a      	lsls	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d136      	bne.n	8003844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f022 0216 	bic.w	r2, r2, #22
 80037e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	6952      	ldr	r2, [r2, #20]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_DMA_IRQHandler+0x1da>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	223f      	movs	r2, #63	; 0x3f
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	2b00      	cmp	r3, #0
 8003838:	d07d      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
        }
        return;
 8003842:	e078      	b.n	8003936 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01c      	beq.n	800388c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	2b00      	cmp	r3, #0
 8003866:	d030      	beq.n	80038ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e02b      	b.n	80038ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d027      	beq.n	80038ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
 8003882:	e022      	b.n	80038ca <HAL_DMA_IRQHandler+0x29e>
 8003884:	20000030 	.word	0x20000030
 8003888:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f022 0210 	bic.w	r2, r2, #16
 80038a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d032      	beq.n	8003938 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d022      	beq.n	8003924 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2205      	movs	r2, #5
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3301      	adds	r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4293      	cmp	r3, r2
 8003900:	d807      	bhi.n	8003912 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f2      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x2ca>
 8003910:	e000      	b.n	8003914 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003912:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
 8003934:	e000      	b.n	8003938 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003936:	bf00      	nop
    }
  }
}
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop

08003940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800395c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3b10      	subs	r3, #16
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <DMA_CalcBaseAndBitshift+0x64>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <DMA_CalcBaseAndBitshift+0x68>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d909      	bls.n	80039de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	659a      	str	r2, [r3, #88]	; 0x58
 80039dc:	e007      	b.n	80039ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	aaaaaaab 	.word	0xaaaaaaab
 8003a04:	080087ac 	.word	0x080087ac

08003a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11f      	bne.n	8003a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d855      	bhi.n	8003ad4 <DMA_CheckFifoParam+0xcc>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <DMA_CheckFifoParam+0x28>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a53 	.word	0x08003a53
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003ad5 	.word	0x08003ad5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d045      	beq.n	8003ad8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e042      	b.n	8003ad8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5a:	d13f      	bne.n	8003adc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e03c      	b.n	8003adc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	d121      	bne.n	8003ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d836      	bhi.n	8003ae0 <DMA_CheckFifoParam+0xd8>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <DMA_CheckFifoParam+0x70>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a8f 	.word	0x08003a8f
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003aa1 	.word	0x08003aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e02f      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d024      	beq.n	8003ae4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e021      	b.n	8003ae4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa8:	d11e      	bne.n	8003ae8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aae:	e01b      	b.n	8003ae8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <DMA_CheckFifoParam+0xb4>
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d003      	beq.n	8003ac2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aba:	e018      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e015      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00e      	beq.n	8003aec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad2:	e00b      	b.n	8003aec <DMA_CheckFifoParam+0xe4>
      break;
 8003ad4:	bf00      	nop
 8003ad6:	e00a      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ad8:	bf00      	nop
 8003ada:	e008      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003adc:	bf00      	nop
 8003ade:	e006      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ae0:	bf00      	nop
 8003ae2:	e004      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ae4:	bf00      	nop
 8003ae6:	e002      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;   
 8003ae8:	bf00      	nop
 8003aea:	e000      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003aec:	bf00      	nop
    }
  } 
  
  return status; 
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	; 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e159      	b.n	8003dcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b18:	2201      	movs	r2, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	f040 8148 	bne.w	8003dc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d005      	beq.n	8003b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d130      	bne.n	8003bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	2203      	movs	r2, #3
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b84:	2201      	movs	r2, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 0201 	and.w	r2, r3, #1
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d017      	beq.n	8003bec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d123      	bne.n	8003c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	08da      	lsrs	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3208      	adds	r2, #8
 8003c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	220f      	movs	r2, #15
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	08da      	lsrs	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3208      	adds	r2, #8
 8003c3a:	69b9      	ldr	r1, [r7, #24]
 8003c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0203 	and.w	r2, r3, #3
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a2 	beq.w	8003dc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	4a56      	ldr	r2, [pc, #344]	; (8003de0 <HAL_GPIO_Init+0x2e4>)
 8003c88:	4b55      	ldr	r3, [pc, #340]	; (8003de0 <HAL_GPIO_Init+0x2e4>)
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c90:	6453      	str	r3, [r2, #68]	; 0x44
 8003c92:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <HAL_GPIO_Init+0x2e4>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c9e:	4a51      	ldr	r2, [pc, #324]	; (8003de4 <HAL_GPIO_Init+0x2e8>)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a48      	ldr	r2, [pc, #288]	; (8003de8 <HAL_GPIO_Init+0x2ec>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d019      	beq.n	8003cfe <HAL_GPIO_Init+0x202>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a47      	ldr	r2, [pc, #284]	; (8003dec <HAL_GPIO_Init+0x2f0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_GPIO_Init+0x1fe>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a46      	ldr	r2, [pc, #280]	; (8003df0 <HAL_GPIO_Init+0x2f4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_GPIO_Init+0x1fa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a45      	ldr	r2, [pc, #276]	; (8003df4 <HAL_GPIO_Init+0x2f8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <HAL_GPIO_Init+0x1f6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a44      	ldr	r2, [pc, #272]	; (8003df8 <HAL_GPIO_Init+0x2fc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <HAL_GPIO_Init+0x1f2>
 8003cea:	2304      	movs	r3, #4
 8003cec:	e008      	b.n	8003d00 <HAL_GPIO_Init+0x204>
 8003cee:	2307      	movs	r3, #7
 8003cf0:	e006      	b.n	8003d00 <HAL_GPIO_Init+0x204>
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e004      	b.n	8003d00 <HAL_GPIO_Init+0x204>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e002      	b.n	8003d00 <HAL_GPIO_Init+0x204>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_GPIO_Init+0x204>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	f002 0203 	and.w	r2, r2, #3
 8003d06:	0092      	lsls	r2, r2, #2
 8003d08:	4093      	lsls	r3, r2
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d10:	4934      	ldr	r1, [pc, #208]	; (8003de4 <HAL_GPIO_Init+0x2e8>)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	3302      	adds	r3, #2
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d42:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6c:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d96:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dc0:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_GPIO_Init+0x300>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	f67f aea2 	bls.w	8003b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	3724      	adds	r7, #36	; 0x24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40013800 	.word	0x40013800
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40020400 	.word	0x40020400
 8003df0:	40020800 	.word	0x40020800
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40013c00 	.word	0x40013c00

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e4a:	4a05      	ldr	r2, [pc, #20]	; (8003e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe f838 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e264      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d075      	beq.n	8003f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e82:	4ba3      	ldr	r3, [pc, #652]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8e:	4ba0      	ldr	r3, [pc, #640]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d112      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9a:	4b9d      	ldr	r3, [pc, #628]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	4b99      	ldr	r3, [pc, #612]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05b      	beq.n	8003f6c <HAL_RCC_OscConfig+0x108>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d157      	bne.n	8003f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e23f      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x74>
 8003eca:	4a91      	ldr	r2, [pc, #580]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	4b90      	ldr	r3, [pc, #576]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e01d      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x98>
 8003ee2:	4a8b      	ldr	r2, [pc, #556]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	4b8a      	ldr	r3, [pc, #552]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4a88      	ldr	r2, [pc, #544]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	4b87      	ldr	r3, [pc, #540]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003efc:	4a84      	ldr	r2, [pc, #528]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	4b84      	ldr	r3, [pc, #528]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4a81      	ldr	r2, [pc, #516]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	4b81      	ldr	r3, [pc, #516]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7ff f8b0 	bl	8003080 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f24:	f7ff f8ac 	bl	8003080 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e204      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0xc0>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7ff f89c 	bl	8003080 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7ff f898 	bl	8003080 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e1f0      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0xe8>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f86:	4b62      	ldr	r3, [pc, #392]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d11c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d116      	bne.n	8003fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	4b5c      	ldr	r3, [pc, #368]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x152>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1c4      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4956      	ldr	r1, [pc, #344]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	e03a      	b.n	8004042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <HAL_RCC_OscConfig+0x2b0>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7ff f851 	bl	8003080 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe2:	f7ff f84d 	bl	8003080 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e1a5      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4943      	ldr	r1, [pc, #268]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]
 8004014:	e015      	b.n	8004042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_OscConfig+0x2b0>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7ff f830 	bl	8003080 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004024:	f7ff f82c 	bl	8003080 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e184      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d030      	beq.n	80040b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004056:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_RCC_OscConfig+0x2b4>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7ff f810 	bl	8003080 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004064:	f7ff f80c 	bl	8003080 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e164      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x200>
 8004082:	e015      	b.n	80040b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_OscConfig+0x2b4>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe fff9 	bl	8003080 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004092:	f7fe fff5 	bl	8003080 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e14d      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a0 	beq.w	80041fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_OscConfig+0x2b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d121      	bne.n	800413e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fa:	4a08      	ldr	r2, [pc, #32]	; (800411c <HAL_RCC_OscConfig+0x2b8>)
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_RCC_OscConfig+0x2b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004106:	f7fe ffbb 	bl	8003080 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	e011      	b.n	8004132 <HAL_RCC_OscConfig+0x2ce>
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800
 8004114:	42470000 	.word	0x42470000
 8004118:	42470e80 	.word	0x42470e80
 800411c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fe ffae 	bl	8003080 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e106      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b85      	ldr	r3, [pc, #532]	; (8004348 <HAL_RCC_OscConfig+0x4e4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <HAL_RCC_OscConfig+0x2f0>
 8004146:	4a81      	ldr	r2, [pc, #516]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 8004148:	4b80      	ldr	r3, [pc, #512]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
 8004152:	e01c      	b.n	800418e <HAL_RCC_OscConfig+0x32a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d10c      	bne.n	8004176 <HAL_RCC_OscConfig+0x312>
 800415c:	4a7b      	ldr	r2, [pc, #492]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800415e:	4b7b      	ldr	r3, [pc, #492]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	4a78      	ldr	r2, [pc, #480]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800416a:	4b78      	ldr	r3, [pc, #480]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
 8004174:	e00b      	b.n	800418e <HAL_RCC_OscConfig+0x32a>
 8004176:	4a75      	ldr	r2, [pc, #468]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 8004178:	4b74      	ldr	r3, [pc, #464]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	6713      	str	r3, [r2, #112]	; 0x70
 8004182:	4a72      	ldr	r2, [pc, #456]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 8004184:	4b71      	ldr	r3, [pc, #452]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d015      	beq.n	80041c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fe ff73 	bl	8003080 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fe ff6f 	bl	8003080 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e0c5      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ee      	beq.n	800419e <HAL_RCC_OscConfig+0x33a>
 80041c0:	e014      	b.n	80041ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c2:	f7fe ff5d 	bl	8003080 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fe ff59 	bl	8003080 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e0af      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e0:	4b5a      	ldr	r3, [pc, #360]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ee      	bne.n	80041ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d105      	bne.n	80041fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f2:	4a56      	ldr	r2, [pc, #344]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 80041f4:	4b55      	ldr	r3, [pc, #340]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 809b 	beq.w	800433e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004208:	4b50      	ldr	r3, [pc, #320]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b08      	cmp	r3, #8
 8004212:	d05c      	beq.n	80042ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d141      	bne.n	80042a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421c:	4b4c      	ldr	r3, [pc, #304]	; (8004350 <HAL_RCC_OscConfig+0x4ec>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fe ff2d 	bl	8003080 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422a:	f7fe ff29 	bl	8003080 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e081      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004248:	4940      	ldr	r1, [pc, #256]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	019b      	lsls	r3, r3, #6
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	3b01      	subs	r3, #1
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCC_OscConfig+0x4ec>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe ff02 	bl	8003080 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004280:	f7fe fefe 	bl	8003080 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e056      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	4b2e      	ldr	r3, [pc, #184]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x41c>
 800429e:	e04e      	b.n	800433e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a0:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <HAL_RCC_OscConfig+0x4ec>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fe feeb 	bl	8003080 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fe fee7 	bl	8003080 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e03f      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c0:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x44a>
 80042cc:	e037      	b.n	800433e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e032      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042da:	4b1c      	ldr	r3, [pc, #112]	; (800434c <HAL_RCC_OscConfig+0x4e8>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d028      	beq.n	800433a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d121      	bne.n	800433a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d11a      	bne.n	800433a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004310:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004312:	4293      	cmp	r3, r2
 8004314:	d111      	bne.n	800433a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d107      	bne.n	800433a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40007000 	.word	0x40007000
 800434c:	40023800 	.word	0x40023800
 8004350:	42470060 	.word	0x42470060

08004354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0cc      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004368:	4b68      	ldr	r3, [pc, #416]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0207 	and.w	r2, r3, #7
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d20c      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b63      	ldr	r3, [pc, #396]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0207 	and.w	r2, r3, #7
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0b8      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a8:	4a59      	ldr	r2, [pc, #356]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	4b59      	ldr	r3, [pc, #356]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043c0:	4a53      	ldr	r2, [pc, #332]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043cc:	4950      	ldr	r1, [pc, #320]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4b50      	ldr	r3, [pc, #320]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d044      	beq.n	8004474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b47      	ldr	r3, [pc, #284]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d119      	bne.n	8004432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e07f      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d003      	beq.n	8004412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440e:	2b03      	cmp	r3, #3
 8004410:	d107      	bne.n	8004422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e06f      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004422:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e067      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004432:	4937      	ldr	r1, [pc, #220]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 0203 	bic.w	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004444:	f7fe fe1c 	bl	8003080 <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	e00a      	b.n	8004462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444c:	f7fe fe18 	bl	8003080 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e04f      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	4b2b      	ldr	r3, [pc, #172]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 020c 	and.w	r2, r3, #12
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	429a      	cmp	r2, r3
 8004472:	d1eb      	bne.n	800444c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0207 	and.w	r2, r3, #7
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d90c      	bls.n	800449c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b22      	ldr	r3, [pc, #136]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0207 	and.w	r2, r3, #7
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e032      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a8:	4919      	ldr	r1, [pc, #100]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044c6:	4912      	ldr	r1, [pc, #72]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044da:	f000 f821 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 80044de:	4601      	mov	r1, r0
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <HAL_RCC_ClockConfig+0x1c0>)
 80044ec:	5cd3      	ldrb	r3, [r2, r3]
 80044ee:	fa21 f303 	lsr.w	r3, r1, r3
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fd7c 	bl	8002ff8 <HAL_InitTick>

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023c00 	.word	0x40023c00
 8004510:	40023800 	.word	0x40023800
 8004514:	08008794 	.word	0x08008794
 8004518:	20000030 	.word	0x20000030
 800451c:	20000034 	.word	0x20000034

08004520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	b08f      	sub	sp, #60	; 0x3c
 8004526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800452c:	2300      	movs	r3, #0
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
 8004530:	2300      	movs	r3, #0
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004538:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	2b04      	cmp	r3, #4
 8004542:	d007      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x34>
 8004544:	2b08      	cmp	r3, #8
 8004546:	d008      	beq.n	800455a <HAL_RCC_GetSysClockFreq+0x3a>
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 80b2 	bne.w	80046b2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800454e:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004552:	e0b1      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004554:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004558:	e0ae      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800455a:	4b5a      	ldr	r3, [pc, #360]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004564:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d04e      	beq.n	800460e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004570:	4b54      	ldr	r3, [pc, #336]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	099b      	lsrs	r3, r3, #6
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	ea01 0103 	and.w	r1, r1, r3
 8004586:	ea02 0204 	and.w	r2, r2, r4
 800458a:	460b      	mov	r3, r1
 800458c:	4614      	mov	r4, r2
 800458e:	0160      	lsls	r0, r4, #5
 8004590:	6278      	str	r0, [r7, #36]	; 0x24
 8004592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004594:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004598:	6278      	str	r0, [r7, #36]	; 0x24
 800459a:	015b      	lsls	r3, r3, #5
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80045a2:	1a5b      	subs	r3, r3, r1
 80045a4:	eb64 0402 	sbc.w	r4, r4, r2
 80045a8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80045ac:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80045b0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80045b4:	ebb8 0803 	subs.w	r8, r8, r3
 80045b8:	eb69 0904 	sbc.w	r9, r9, r4
 80045bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80045d4:	eb18 0801 	adds.w	r8, r8, r1
 80045d8:	eb49 0902 	adc.w	r9, r9, r2
 80045dc:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80045f4:	4640      	mov	r0, r8
 80045f6:	4649      	mov	r1, r9
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	f04f 0400 	mov.w	r4, #0
 80045fe:	461a      	mov	r2, r3
 8004600:	4623      	mov	r3, r4
 8004602:	f7fc fad5 	bl	8000bb0 <__aeabi_uldivmod>
 8004606:	4603      	mov	r3, r0
 8004608:	460c      	mov	r4, r1
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
 800460c:	e043      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460e:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	ea01 0103 	and.w	r1, r1, r3
 8004624:	ea02 0204 	and.w	r2, r2, r4
 8004628:	460b      	mov	r3, r1
 800462a:	4614      	mov	r4, r2
 800462c:	0160      	lsls	r0, r4, #5
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	015b      	lsls	r3, r3, #5
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004640:	1a5b      	subs	r3, r3, r1
 8004642:	eb64 0402 	sbc.w	r4, r4, r2
 8004646:	01a6      	lsls	r6, r4, #6
 8004648:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800464c:	019d      	lsls	r5, r3, #6
 800464e:	1aed      	subs	r5, r5, r3
 8004650:	eb66 0604 	sbc.w	r6, r6, r4
 8004654:	00f3      	lsls	r3, r6, #3
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	00eb      	lsls	r3, r5, #3
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	e897 0060 	ldmia.w	r7, {r5, r6}
 8004668:	186d      	adds	r5, r5, r1
 800466a:	eb46 0602 	adc.w	r6, r6, r2
 800466e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004672:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8004676:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800467a:	4655      	mov	r5, sl
 800467c:	465e      	mov	r6, fp
 800467e:	4628      	mov	r0, r5
 8004680:	4631      	mov	r1, r6
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	f04f 0400 	mov.w	r4, #0
 8004688:	461a      	mov	r2, r3
 800468a:	4623      	mov	r3, r4
 800468c:	f7fc fa90 	bl	8000bb0 <__aeabi_uldivmod>
 8004690:	4603      	mov	r3, r0
 8004692:	460c      	mov	r4, r1
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0c1b      	lsrs	r3, r3, #16
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	3301      	adds	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80046a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046b0:	e002      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	373c      	adds	r7, #60	; 0x3c
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	40023800 	.word	0x40023800
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000030 	.word	0x20000030

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4601      	mov	r1, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4a03      	ldr	r2, [pc, #12]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
 8004700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	080087a4 	.word	0x080087a4

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffdc 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8004718:	4601      	mov	r1, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0b5b      	lsrs	r3, r3, #13
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4a03      	ldr	r2, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5cd3      	ldrb	r3, [r2, r3]
 8004728:	fa21 f303 	lsr.w	r3, r1, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	080087a4 	.word	0x080087a4

08004738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07a      	b.n	8004840 <HAL_SPI_Init+0x108>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475a:	d009      	beq.n	8004770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	61da      	str	r2, [r3, #28]
 8004762:	e005      	b.n	8004770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fe f8aa 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6852      	ldr	r2, [r2, #4]
 80047b0:	f402 7182 	and.w	r1, r2, #260	; 0x104
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6892      	ldr	r2, [r2, #8]
 80047b8:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80047bc:	4311      	orrs	r1, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68d2      	ldr	r2, [r2, #12]
 80047c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6912      	ldr	r2, [r2, #16]
 80047cc:	f002 0202 	and.w	r2, r2, #2
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6952      	ldr	r2, [r2, #20]
 80047d6:	f002 0201 	and.w	r2, r2, #1
 80047da:	4311      	orrs	r1, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6992      	ldr	r2, [r2, #24]
 80047e0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80047e4:	4311      	orrs	r1, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	69d2      	ldr	r2, [r2, #28]
 80047ea:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80047ee:	4311      	orrs	r1, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6a12      	ldr	r2, [r2, #32]
 80047f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80047f8:	4311      	orrs	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004802:	430a      	orrs	r2, r1
 8004804:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6992      	ldr	r2, [r2, #24]
 800480e:	0c12      	lsrs	r2, r2, #16
 8004810:	f002 0104 	and.w	r1, r2, #4
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004818:	f002 0210 	and.w	r2, r2, #16
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	69d2      	ldr	r2, [r2, #28]
 800482a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800482e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	; 0x30
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004856:	2301      	movs	r3, #1
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_SPI_TransmitReceive+0x26>
 800486a:	2302      	movs	r3, #2
 800486c:	e188      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x338>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004876:	f7fe fc03 	bl	8003080 <HAL_GetTick>
 800487a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800488c:	887b      	ldrh	r3, [r7, #2]
 800488e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004894:	2b01      	cmp	r3, #1
 8004896:	d00f      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x70>
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489e:	d107      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d103      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x68>
 80048a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d003      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048b6:	e159      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_SPI_TransmitReceive+0x82>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_SPI_TransmitReceive+0x82>
 80048c4:	887b      	ldrh	r3, [r7, #2]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048d0:	e14c      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d003      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2205      	movs	r2, #5
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	887a      	ldrh	r2, [r7, #2]
 80048f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	887a      	ldrh	r2, [r7, #2]
 800490e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d007      	beq.n	800493a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004942:	d178      	bne.n	8004a36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x10a>
 800494c:	8b7b      	ldrh	r3, [r7, #26]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d166      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800495a:	8812      	ldrh	r2, [r2, #0]
 800495c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	1c9a      	adds	r2, r3, #2
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004976:	e053      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b02      	cmp	r3, #2
 8004984:	d11b      	bne.n	80049be <HAL_SPI_TransmitReceive+0x176>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d016      	beq.n	80049be <HAL_SPI_TransmitReceive+0x176>
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d113      	bne.n	80049be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d119      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x1b8>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d014      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	68d2      	ldr	r2, [r2, #12]
 80049e0:	b292      	uxth	r2, r2
 80049e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	1c9a      	adds	r2, r3, #2
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049fc:	2301      	movs	r3, #1
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a00:	f7fe fb3e 	bl	8003080 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	1ad2      	subs	r2, r2, r3
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d307      	bcc.n	8004a20 <HAL_SPI_TransmitReceive+0x1d8>
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a16:	d003      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a1e:	e0a5      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1a6      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x130>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1a1      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x130>
 8004a34:	e07c      	b.n	8004b30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x1fc>
 8004a3e:	8b7b      	ldrh	r3, [r7, #26]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d16b      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a6a:	e057      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d11c      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x26c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <HAL_SPI_TransmitReceive+0x26c>
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d114      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d119      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x2ae>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d014      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004af2:	2301      	movs	r3, #1
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004af6:	f7fe fac3 	bl	8003080 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d303      	bcc.n	8004b0e <HAL_SPI_TransmitReceive+0x2c6>
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0c:	d102      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x2cc>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d103      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b1a:	e027      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1a2      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x224>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d19d      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fe0b 	bl	8005750 <SPI_EndRxTxTransaction>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b4c:	e00e      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3730      	adds	r7, #48	; 0x30
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_SPI_Transmit_DMA+0x20>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e09b      	b.n	8004ce0 <HAL_SPI_Transmit_DMA+0x158>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bc0:	e089      	b.n	8004cd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_SPI_Transmit_DMA+0x46>
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bd2:	e080      	b.n	8004cd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	88fa      	ldrh	r2, [r7, #6]
 8004bf2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1a:	d10f      	bne.n	8004c3c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <HAL_SPI_Transmit_DMA+0x160>)
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <HAL_SPI_Transmit_DMA+0x164>)
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_SPI_Transmit_DMA+0x168>)
 8004c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	2200      	movs	r2, #0
 8004c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	4619      	mov	r1, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c74:	f7fe fbf0 	bl	8003458 <HAL_DMA_Start_IT>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f043 0210 	orr.w	r2, r3, #16
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004c96:	e01e      	b.n	8004cd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d007      	beq.n	8004cb6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	6852      	ldr	r2, [r2, #4]
 8004cc0:	f042 0220 	orr.w	r2, r2, #32
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	6852      	ldr	r2, [r2, #4]
 8004cd0:	f042 0202 	orr.w	r2, r2, #2
 8004cd4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	080054b9 	.word	0x080054b9
 8004cec:	080052d9 	.word	0x080052d9
 8004cf0:	0800550d 	.word	0x0800550d

08004cf4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d110      	bne.n	8004d30 <HAL_SPI_Receive_DMA+0x3c>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d16:	d10b      	bne.n	8004d30 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f8ac 	bl	8004e84 <HAL_SPI_TransmitReceive_DMA>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	e09f      	b.n	8004e70 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_Receive_DMA+0x4a>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e098      	b.n	8004e70 <HAL_SPI_Receive_DMA+0x17c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d002      	beq.n	8004d58 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
 8004d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d56:	e086      	b.n	8004e66 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_Receive_DMA+0x70>
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d68:	e07d      	b.n	8004e66 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004daa:	d10f      	bne.n	8004dcc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd0:	4a29      	ldr	r2, [pc, #164]	; (8004e78 <HAL_SPI_Receive_DMA+0x184>)
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd8:	4a28      	ldr	r2, [pc, #160]	; (8004e7c <HAL_SPI_Receive_DMA+0x188>)
 8004dda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <HAL_SPI_Receive_DMA+0x18c>)
 8004de2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de8:	2200      	movs	r2, #0
 8004dea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	4619      	mov	r1, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e02:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004e04:	f7fe fb28 	bl	8003458 <HAL_DMA_Start_IT>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	f043 0210 	orr.w	r2, r3, #16
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004e26:	e01e      	b.n	8004e66 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d007      	beq.n	8004e46 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	6852      	ldr	r2, [r2, #4]
 8004e50:	f042 0220 	orr.w	r2, r2, #32
 8004e54:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	080054d5 	.word	0x080054d5
 8004e7c:	08005381 	.word	0x08005381
 8004e80:	0800550d 	.word	0x0800550d

08004e84 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0e3      	b.n	800506c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004eba:	7dbb      	ldrb	r3, [r7, #22]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d00d      	beq.n	8004edc <HAL_SPI_TransmitReceive_DMA+0x58>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec6:	d106      	bne.n	8004ed6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004ed0:	7dbb      	ldrb	r3, [r7, #22]
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d002      	beq.n	8004edc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eda:	e0c2      	b.n	8005062 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ef2:	e0b6      	b.n	8005062 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d003      	beq.n	8004f08 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2205      	movs	r2, #5
 8004f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	887a      	ldrh	r2, [r7, #2]
 8004f1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	887a      	ldrh	r2, [r7, #2]
 8004f30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d108      	bne.n	8004f5c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4e:	4a49      	ldr	r2, [pc, #292]	; (8005074 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	4a48      	ldr	r2, [pc, #288]	; (8005078 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004f58:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f5a:	e007      	b.n	8004f6c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	4a46      	ldr	r2, [pc, #280]	; (800507c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f68:	4a45      	ldr	r2, [pc, #276]	; (8005080 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f70:	4a44      	ldr	r2, [pc, #272]	; (8005084 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004f72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f78:	2200      	movs	r2, #0
 8004f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	4619      	mov	r1, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f94:	f7fe fa60 	bl	8003458 <HAL_DMA_Start_IT>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	f043 0210 	orr.w	r2, r3, #16
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004fb6:	e054      	b.n	8005062 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	6852      	ldr	r2, [r2, #4]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fdc:	2200      	movs	r2, #0
 8004fde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005000:	f7fe fa2a 	bl	8003458 <HAL_DMA_Start_IT>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	f043 0210 	orr.w	r2, r3, #16
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005022:	e01e      	b.n	8005062 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d007      	beq.n	8005042 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005040:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	6852      	ldr	r2, [r2, #4]
 800504c:	f042 0220 	orr.w	r2, r2, #32
 8005050:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	f042 0202 	orr.w	r2, r2, #2
 8005060:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800506a:	7dfb      	ldrb	r3, [r7, #23]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	080054d5 	.word	0x080054d5
 8005078:	08005381 	.word	0x08005381
 800507c:	080054f1 	.word	0x080054f1
 8005080:	08005429 	.word	0x08005429
 8005084:	0800550d 	.word	0x0800550d

08005088 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10e      	bne.n	80050c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
    return;
 80050c6:	e0cf      	b.n	8005268 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_SPI_IRQHandler+0x5e>
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
    return;
 80050e4:	e0c0      	b.n	8005268 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <HAL_SPI_IRQHandler+0x7e>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80b1 	beq.w	8005268 <HAL_SPI_IRQHandler+0x1e0>
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80ab 	beq.w	8005268 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d023      	beq.n	8005164 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b03      	cmp	r3, #3
 8005126:	d011      	beq.n	800514c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	f043 0204 	orr.w	r2, r3, #4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	e00b      	b.n	8005164 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800514c:	2300      	movs	r3, #0
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]
        return;
 8005162:	e081      	b.n	8005268 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d014      	beq.n	8005198 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f043 0208 	orr.w	r2, r3, #8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d050      	beq.n	8005266 <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	6852      	ldr	r2, [r2, #4]
 80051ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <HAL_SPI_IRQHandler+0x168>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d034      	beq.n	800525a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	6852      	ldr	r2, [r2, #4]
 80051fa:	f022 0203 	bic.w	r2, r2, #3
 80051fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d011      	beq.n	800522c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <HAL_SPI_IRQHandler+0x1e8>)
 800520e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe f9e7 	bl	80035e8 <HAL_DMA_Abort_IT>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005230:	2b00      	cmp	r3, #0
 8005232:	d016      	beq.n	8005262 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	4a0d      	ldr	r2, [pc, #52]	; (8005270 <HAL_SPI_IRQHandler+0x1e8>)
 800523a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe f9d1 	bl	80035e8 <HAL_DMA_Abort_IT>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005258:	e003      	b.n	8005262 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f832 	bl	80052c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005260:	e000      	b.n	8005264 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005262:	bf00      	nop
    return;
 8005264:	bf00      	nop
 8005266:	bf00      	nop
  }
}
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	0800554d 	.word	0x0800554d

08005274 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e6:	f7fd fecb 	bl	8003080 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d03b      	beq.n	8005374 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	6852      	ldr	r2, [r2, #4]
 8005306:	f022 0220 	bic.w	r2, r2, #32
 800530a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	6852      	ldr	r2, [r2, #4]
 8005316:	f022 0202 	bic.w	r2, r2, #2
 800531a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	6978      	ldr	r0, [r7, #20]
 8005322:	f000 fa15 	bl	8005750 <SPI_EndRxTxTransaction>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800536c:	6978      	ldr	r0, [r7, #20]
 800536e:	f7ff ffa9 	bl	80052c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005372:	e002      	b.n	800537a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005374:	6978      	ldr	r0, [r7, #20]
 8005376:	f7fd fa1d 	bl	80027b4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800538e:	f7fd fe77 	bl	8003080 <HAL_GetTick>
 8005392:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	d03b      	beq.n	800541c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	6852      	ldr	r2, [r2, #4]
 80053ae:	f022 0220 	bic.w	r2, r2, #32
 80053b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10d      	bne.n	80053d8 <SPI_DMAReceiveCplt+0x58>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c4:	d108      	bne.n	80053d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	6852      	ldr	r2, [r2, #4]
 80053d0:	f022 0203 	bic.w	r2, r2, #3
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	e007      	b.n	80053e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	6852      	ldr	r2, [r2, #4]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	2164      	movs	r1, #100	; 0x64
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f949 	bl	8005684 <SPI_EndRxTransaction>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff ff55 	bl	80052c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800541a:	e002      	b.n	8005422 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7fd f9df 	bl	80027e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005436:	f7fd fe23 	bl	8003080 <HAL_GetTick>
 800543a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	d02f      	beq.n	80054ac <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	6852      	ldr	r2, [r2, #4]
 8005456:	f022 0220 	bic.w	r2, r2, #32
 800545a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	2164      	movs	r1, #100	; 0x64
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f975 	bl	8005750 <SPI_EndRxTxTransaction>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	f022 0203 	bic.w	r2, r2, #3
 8005486:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff ff0d 	bl	80052c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80054aa:	e002      	b.n	80054b2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff fee1 	bl	8005274 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff fede 	bl	8005288 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054cc:	bf00      	nop
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff feda 	bl	800529c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fed6 	bl	80052b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	6852      	ldr	r2, [r2, #4]
 8005524:	f022 0203 	bic.w	r2, r2, #3
 8005528:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f043 0210 	orr.w	r2, r3, #16
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff fec0 	bl	80052c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff feac 	bl	80052c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005584:	f7fd fd7c 	bl	8003080 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	1a9a      	subs	r2, r3, r2
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	4413      	add	r3, r2
 8005592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005594:	f7fd fd74 	bl	8003080 <HAL_GetTick>
 8005598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800559a:	4b39      	ldr	r3, [pc, #228]	; (8005680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	015b      	lsls	r3, r3, #5
 80055a0:	0d1b      	lsrs	r3, r3, #20
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055aa:	e054      	b.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b2:	d050      	beq.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055b4:	f7fd fd64 	bl	8003080 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1ad2      	subs	r2, r2, r3
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d202      	bcs.n	80055ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d13d      	bne.n	8005646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	6852      	ldr	r2, [r2, #4]
 80055d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055e2:	d111      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d004      	beq.n	80055f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f6:	d107      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005610:	d10f      	bne.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e017      	b.n	8005676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3b01      	subs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	401a      	ands	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d19b      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000030 	.word	0x20000030

08005684 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005698:	d111      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a2:	d004      	beq.n	80056ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d107      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c6:	d12a      	bne.n	800571e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d0:	d012      	beq.n	80056f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	2180      	movs	r1, #128	; 0x80
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ff49 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d02d      	beq.n	8005744 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e026      	b.n	8005746 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	2101      	movs	r1, #1
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff ff36 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01a      	beq.n	8005744 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e013      	b.n	8005746 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	2101      	movs	r1, #1
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff23 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e000      	b.n	8005746 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <SPI_EndRxTxTransaction+0x7c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <SPI_EndRxTxTransaction+0x80>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0d5b      	lsrs	r3, r3, #21
 8005768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800576c:	fb02 f303 	mul.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577a:	d112      	bne.n	80057a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f7ff fef4 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e00f      	b.n	80057c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d0f2      	beq.n	80057a2 <SPI_EndRxTxTransaction+0x52>
 80057bc:	e000      	b.n	80057c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80057be:	bf00      	nop
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000030 	.word	0x20000030
 80057d0:	165e9f81 	.word	0x165e9f81

080057d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e03f      	b.n	8005866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fd fa60 	bl	8002cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	; 0x24
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fdad 	bl	8006378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	6912      	ldr	r2, [r2, #16]
 8005828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800582c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	6952      	ldr	r2, [r2, #20]
 8005838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800583c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	68d2      	ldr	r2, [r2, #12]
 8005848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800584c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b20      	cmp	r3, #32
 8005888:	d153      	bne.n	8005932 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_UART_Transmit_DMA+0x26>
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e04c      	b.n	8005934 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Transmit_DMA+0x38>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e045      	b.n	8005934 <HAL_UART_Transmit_DMA+0xc4>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	88fa      	ldrh	r2, [r7, #6]
 80058c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2221      	movs	r2, #33	; 0x21
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_UART_Transmit_DMA+0xcc>)
 80058d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_UART_Transmit_DMA+0xd0>)
 80058de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_UART_Transmit_DMA+0xd4>)
 80058e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	2200      	movs	r2, #0
 80058ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80058f0:	f107 0308 	add.w	r3, r7, #8
 80058f4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6819      	ldr	r1, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3304      	adds	r3, #4
 8005904:	461a      	mov	r2, r3
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	f7fd fda6 	bl	8003458 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005914:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6952      	ldr	r2, [r2, #20]
 8005928:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800592c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	08005e35 	.word	0x08005e35
 8005940:	08005e87 	.word	0x08005e87
 8005944:	08005f6f 	.word	0x08005f6f

08005948 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b20      	cmp	r3, #32
 8005960:	d11d      	bne.n	800599e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_UART_Receive_DMA+0x26>
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e016      	b.n	80059a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_UART_Receive_DMA+0x38>
 800597c:	2302      	movs	r3, #2
 800597e:	e00f      	b.n	80059a0 <HAL_UART_Receive_DMA+0x58>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	461a      	mov	r2, r3
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fb35 	bl	8006004 <UART_Start_Receive_DMA>
 800599a:	4603      	mov	r3, r0
 800599c:	e000      	b.n	80059a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b21      	cmp	r3, #33	; 0x21
 80059d4:	d116      	bne.n	8005a04 <HAL_UART_DMAStop+0x5c>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d013      	beq.n	8005a04 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	6952      	ldr	r2, [r2, #20]
 80059e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059ea:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fd fd85 	bl	8003508 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fb64 	bl	80060cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	bf0c      	ite	eq
 8005a12:	2301      	moveq	r3, #1
 8005a14:	2300      	movne	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b22      	cmp	r3, #34	; 0x22
 8005a24:	d116      	bne.n	8005a54 <HAL_UART_DMAStop+0xac>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d013      	beq.n	8005a54 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	6952      	ldr	r2, [r2, #20]
 8005a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fd fd5d 	bl	8003508 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fb52 	bl	80060f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10d      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x52>
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fbcc 	bl	8006248 <UART_Receive_IT>
      return;
 8005ab0:	e17d      	b.n	8005dae <HAL_UART_IRQHandler+0x34e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80b1 	beq.w	8005c1c <HAL_UART_IRQHandler+0x1bc>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d105      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x70>
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80a6 	beq.w	8005c1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_UART_IRQHandler+0x90>
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	f043 0201 	orr.w	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_UART_IRQHandler+0xb0>
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f043 0202 	orr.w	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <HAL_UART_IRQHandler+0xd0>
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	f043 0204 	orr.w	r2, r3, #4
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00f      	beq.n	8005b5a <HAL_UART_IRQHandler+0xfa>
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <HAL_UART_IRQHandler+0xee>
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f043 0208 	orr.w	r2, r3, #8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8120 	beq.w	8005da4 <HAL_UART_IRQHandler+0x344>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_UART_IRQHandler+0x11e>
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fb65 	bl	8006248 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x146>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d031      	beq.n	8005c0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 faa6 	bl	80060f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d123      	bne.n	8005c02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	6952      	ldr	r2, [r2, #20]
 8005bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d013      	beq.n	8005bfa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	4a77      	ldr	r2, [pc, #476]	; (8005db4 <HAL_UART_IRQHandler+0x354>)
 8005bd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fd fd02 	bl	80035e8 <HAL_DMA_Abort_IT>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	e00e      	b.n	8005c18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f904 	bl	8005e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	e00a      	b.n	8005c18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f900 	bl	8005e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	e006      	b.n	8005c18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8fc 	bl	8005e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c16:	e0c5      	b.n	8005da4 <HAL_UART_IRQHandler+0x344>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	bf00      	nop
    return;
 8005c1a:	e0c3      	b.n	8005da4 <HAL_UART_IRQHandler+0x344>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	f040 80a2 	bne.w	8005d6a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 809c 	beq.w	8005d6a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8096 	beq.w	8005d6a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d14f      	bne.n	8005d02 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8005c6c:	8a7b      	ldrh	r3, [r7, #18]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 809a 	beq.w	8005da8 <HAL_UART_IRQHandler+0x348>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c78:	8a7a      	ldrh	r2, [r7, #18]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	f080 8094 	bcs.w	8005da8 <HAL_UART_IRQHandler+0x348>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8a7a      	ldrh	r2, [r7, #18]
 8005c84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c90:	d02b      	beq.n	8005cea <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	68d2      	ldr	r2, [r2, #12]
 8005c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ca0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	6952      	ldr	r2, [r2, #20]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	6952      	ldr	r2, [r2, #20]
 8005cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	68d2      	ldr	r2, [r2, #12]
 8005cda:	f022 0210 	bic.w	r2, r2, #16
 8005cde:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fd fc0f 	bl	8003508 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f88e 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d00:	e052      	b.n	8005da8 <HAL_UART_IRQHandler+0x348>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d048      	beq.n	8005dac <HAL_UART_IRQHandler+0x34c>
          &&(nb_rx_data > 0U) )
 8005d1a:	8a3b      	ldrh	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d045      	beq.n	8005dac <HAL_UART_IRQHandler+0x34c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	68d2      	ldr	r2, [r2, #12]
 8005d2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d2e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	6952      	ldr	r2, [r2, #20]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	68d2      	ldr	r2, [r2, #12]
 8005d58:	f022 0210 	bic.w	r2, r2, #16
 8005d5c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d5e:	8a3b      	ldrh	r3, [r7, #16]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f85a 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d68:	e020      	b.n	8005dac <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_UART_IRQHandler+0x326>
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9fb 	bl	800617a <UART_Transmit_IT>
    return;
 8005d84:	e013      	b.n	8005dae <HAL_UART_IRQHandler+0x34e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00e      	beq.n	8005dae <HAL_UART_IRQHandler+0x34e>
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_UART_IRQHandler+0x34e>
  {
    UART_EndTransmit_IT(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa3c 	bl	8006218 <UART_EndTransmit_IT>
    return;
 8005da0:	bf00      	nop
 8005da2:	e004      	b.n	8005dae <HAL_UART_IRQHandler+0x34e>
    return;
 8005da4:	bf00      	nop
 8005da6:	e002      	b.n	8005dae <HAL_UART_IRQHandler+0x34e>
      return;
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <HAL_UART_IRQHandler+0x34e>
      return;
 8005dac:	bf00      	nop
  }
}
 8005dae:	3728      	adds	r7, #40	; 0x28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	08006153 	.word	0x08006153

08005db8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d113      	bne.n	8005e78 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	6952      	ldr	r2, [r2, #20]
 8005e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e64:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	68d2      	ldr	r2, [r2, #12]
 8005e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e74:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e76:	e002      	b.n	8005e7e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff ff9d 	bl	8005db8 <HAL_UART_TxCpltCallback>
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff ff99 	bl	8005dcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d12a      	bne.n	8005f14 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	68d2      	ldr	r2, [r2, #12]
 8005ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ed2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	6952      	ldr	r2, [r2, #20]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	6952      	ldr	r2, [r2, #20]
 8005eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	68d2      	ldr	r2, [r2, #12]
 8005f0e:	f022 0210 	bic.w	r2, r2, #16
 8005f12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d106      	bne.n	8005f2a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f20:	4619      	mov	r1, r3
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff ff7a 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f28:	e002      	b.n	8005f30 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff ff58 	bl	8005de0 <HAL_UART_RxCpltCallback>
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d108      	bne.n	8005f60 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7ff ff5f 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f5e:	e002      	b.n	8005f66 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ff47 	bl	8005df4 <HAL_UART_RxHalfCpltCallback>
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b21      	cmp	r3, #33	; 0x21
 8005fa0:	d108      	bne.n	8005fb4 <UART_DMAError+0x46>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2200      	movs	r2, #0
 8005fac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005fae:	68b8      	ldr	r0, [r7, #8]
 8005fb0:	f000 f88c 	bl	80060cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b22      	cmp	r3, #34	; 0x22
 8005fd4:	d108      	bne.n	8005fe8 <UART_DMAError+0x7a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fe2:	68b8      	ldr	r0, [r7, #8]
 8005fe4:	f000 f888 	bl	80060f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f043 0210 	orr.w	r2, r3, #16
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff4:	68b8      	ldr	r0, [r7, #8]
 8005ff6:	f7ff ff07 	bl	8005e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2222      	movs	r2, #34	; 0x22
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	4a23      	ldr	r2, [pc, #140]	; (80060c0 <UART_Start_Receive_DMA+0xbc>)
 8006032:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <UART_Start_Receive_DMA+0xc0>)
 800603a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	4a21      	ldr	r2, [pc, #132]	; (80060c8 <UART_Start_Receive_DMA+0xc4>)
 8006042:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	2200      	movs	r2, #0
 800604a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	f7fd f9f8 	bl	8003458 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	68d2      	ldr	r2, [r2, #12]
 8006090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006094:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	6952      	ldr	r2, [r2, #20]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	6952      	ldr	r2, [r2, #20]
 80060b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060b4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	08005ea3 	.word	0x08005ea3
 80060c4:	08005f39 	.word	0x08005f39
 80060c8:	08005f6f 	.word	0x08005f6f

080060cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	68d2      	ldr	r2, [r2, #12]
 80060de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80060e2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	68d2      	ldr	r2, [r2, #12]
 800610a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800610e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	6952      	ldr	r2, [r2, #20]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	68d2      	ldr	r2, [r2, #12]
 8006132:	f022 0210 	bic.w	r2, r2, #16
 8006136:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fe4b 	bl	8005e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b21      	cmp	r3, #33	; 0x21
 800618c:	d13d      	bne.n	800620a <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006196:	d113      	bne.n	80061c0 <UART_Transmit_IT+0x46>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10f      	bne.n	80061c0 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	8812      	ldrh	r2, [r2, #0]
 80061ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]
 80061be:	e008      	b.n	80061d2 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	1c58      	adds	r0, r3, #1
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	6208      	str	r0, [r1, #32]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	4619      	mov	r1, r3
 80061e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	68d2      	ldr	r2, [r2, #12]
 80061f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	68d2      	ldr	r2, [r2, #12]
 8006200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006204:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e000      	b.n	800620c <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 800620a:	2302      	movs	r3, #2
  }
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	68d2      	ldr	r2, [r2, #12]
 800622a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fdbd 	bl	8005db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b22      	cmp	r3, #34	; 0x22
 800625a:	f040 8087 	bne.w	800636c <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006266:	d117      	bne.n	8006298 <UART_Receive_IT+0x50>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d113      	bne.n	8006298 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	b29a      	uxth	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	629a      	str	r2, [r3, #40]	; 0x28
 8006296:	e026      	b.n	80062e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062aa:	d007      	beq.n	80062bc <UART_Receive_IT+0x74>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <UART_Receive_IT+0x82>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	e008      	b.n	80062dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4619      	mov	r1, r3
 80062f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d136      	bne.n	8006368 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	68d2      	ldr	r2, [r2, #12]
 8006304:	f022 0220 	bic.w	r2, r2, #32
 8006308:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	68d2      	ldr	r2, [r2, #12]
 8006314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006318:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	6952      	ldr	r2, [r2, #20]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	2b01      	cmp	r3, #1
 8006338:	d10e      	bne.n	8006358 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	68d2      	ldr	r2, [r2, #12]
 8006344:	f022 0210 	bic.w	r2, r2, #16
 8006348:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fd63 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
 8006356:	e002      	b.n	800635e <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fd41 	bl	8005de0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e002      	b.n	800636e <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e000      	b.n	800636e <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800636c:	2302      	movs	r3, #2
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	b091      	sub	sp, #68	; 0x44
 800637e:	af00      	add	r7, sp, #0
 8006380:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	6819      	ldr	r1, [r3, #0]
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80063b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80063be:	f022 020c 	bic.w	r2, r2, #12
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	6819      	ldr	r1, [r3, #0]
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	4313      	orrs	r3, r2
 80063dc:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4bba      	ldr	r3, [pc, #744]	; (80066cc <UART_SetConfig+0x354>)
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d004      	beq.n	80063f2 <UART_SetConfig+0x7a>
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	4bb8      	ldr	r3, [pc, #736]	; (80066d0 <UART_SetConfig+0x358>)
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d103      	bne.n	80063fa <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063f2:	f7fe f98d 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 80063f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80063f8:	e002      	b.n	8006400 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063fa:	f7fe f975 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 80063fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006408:	f040 80a7 	bne.w	800655a <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	62ba      	str	r2, [r7, #40]	; 0x28
 8006412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006414:	4619      	mov	r1, r3
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	460b      	mov	r3, r1
 800641c:	4614      	mov	r4, r2
 800641e:	18db      	adds	r3, r3, r3
 8006420:	eb44 0404 	adc.w	r4, r4, r4
 8006424:	185b      	adds	r3, r3, r1
 8006426:	eb44 0402 	adc.w	r4, r4, r2
 800642a:	00e0      	lsls	r0, r4, #3
 800642c:	6178      	str	r0, [r7, #20]
 800642e:	6978      	ldr	r0, [r7, #20]
 8006430:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8006434:	6178      	str	r0, [r7, #20]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800643e:	185d      	adds	r5, r3, r1
 8006440:	eb44 0602 	adc.w	r6, r4, r2
 8006444:	4628      	mov	r0, r5
 8006446:	4631      	mov	r1, r6
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f04f 0400 	mov.w	r4, #0
 8006450:	18db      	adds	r3, r3, r3
 8006452:	eb44 0404 	adc.w	r4, r4, r4
 8006456:	461a      	mov	r2, r3
 8006458:	4623      	mov	r3, r4
 800645a:	f7fa fba9 	bl	8000bb0 <__aeabi_uldivmod>
 800645e:	4603      	mov	r3, r0
 8006460:	460c      	mov	r4, r1
 8006462:	461a      	mov	r2, r3
 8006464:	4b9b      	ldr	r3, [pc, #620]	; (80066d4 <UART_SetConfig+0x35c>)
 8006466:	fba3 2302 	umull	r2, r3, r3, r2
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	011e      	lsls	r6, r3, #4
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	4619      	mov	r1, r3
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	460b      	mov	r3, r1
 8006478:	4614      	mov	r4, r2
 800647a:	18db      	adds	r3, r3, r3
 800647c:	eb44 0404 	adc.w	r4, r4, r4
 8006480:	185b      	adds	r3, r3, r1
 8006482:	eb44 0402 	adc.w	r4, r4, r2
 8006486:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800648a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800648e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8006492:	4653      	mov	r3, sl
 8006494:	465c      	mov	r4, fp
 8006496:	eb13 0a01 	adds.w	sl, r3, r1
 800649a:	eb44 0b02 	adc.w	fp, r4, r2
 800649e:	4650      	mov	r0, sl
 80064a0:	4659      	mov	r1, fp
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f04f 0400 	mov.w	r4, #0
 80064aa:	18db      	adds	r3, r3, r3
 80064ac:	eb44 0404 	adc.w	r4, r4, r4
 80064b0:	461a      	mov	r2, r3
 80064b2:	4623      	mov	r3, r4
 80064b4:	f7fa fb7c 	bl	8000bb0 <__aeabi_uldivmod>
 80064b8:	4603      	mov	r3, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	461a      	mov	r2, r3
 80064be:	4b85      	ldr	r3, [pc, #532]	; (80066d4 <UART_SetConfig+0x35c>)
 80064c0:	fba3 1302 	umull	r1, r3, r3, r2
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	2164      	movs	r1, #100	; 0x64
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	3332      	adds	r3, #50	; 0x32
 80064d2:	4a80      	ldr	r2, [pc, #512]	; (80066d4 <UART_SetConfig+0x35c>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e0:	441e      	add	r6, r3
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	4619      	mov	r1, r3
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	18db      	adds	r3, r3, r3
 80064f0:	eb44 0404 	adc.w	r4, r4, r4
 80064f4:	185b      	adds	r3, r3, r1
 80064f6:	eb44 0402 	adc.w	r4, r4, r2
 80064fa:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80064fe:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8006502:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8006506:	4643      	mov	r3, r8
 8006508:	464c      	mov	r4, r9
 800650a:	eb13 0801 	adds.w	r8, r3, r1
 800650e:	eb44 0902 	adc.w	r9, r4, r2
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f04f 0400 	mov.w	r4, #0
 800651e:	18db      	adds	r3, r3, r3
 8006520:	eb44 0404 	adc.w	r4, r4, r4
 8006524:	461a      	mov	r2, r3
 8006526:	4623      	mov	r3, r4
 8006528:	f7fa fb42 	bl	8000bb0 <__aeabi_uldivmod>
 800652c:	4603      	mov	r3, r0
 800652e:	460c      	mov	r4, r1
 8006530:	461a      	mov	r2, r3
 8006532:	4b68      	ldr	r3, [pc, #416]	; (80066d4 <UART_SetConfig+0x35c>)
 8006534:	fba3 1302 	umull	r1, r3, r3, r2
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	2164      	movs	r1, #100	; 0x64
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	3332      	adds	r3, #50	; 0x32
 8006546:	4a63      	ldr	r2, [pc, #396]	; (80066d4 <UART_SetConfig+0x35c>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	4433      	add	r3, r6
 8006554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006556:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006558:	e0b3      	b.n	80066c2 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800655a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	4619      	mov	r1, r3
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	460b      	mov	r3, r1
 800656a:	4614      	mov	r4, r2
 800656c:	18db      	adds	r3, r3, r3
 800656e:	eb44 0404 	adc.w	r4, r4, r4
 8006572:	185b      	adds	r3, r3, r1
 8006574:	eb44 0402 	adc.w	r4, r4, r2
 8006578:	00e6      	lsls	r6, r4, #3
 800657a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800657e:	00dd      	lsls	r5, r3, #3
 8006580:	462b      	mov	r3, r5
 8006582:	4634      	mov	r4, r6
 8006584:	185d      	adds	r5, r3, r1
 8006586:	eb44 0602 	adc.w	r6, r4, r2
 800658a:	4628      	mov	r0, r5
 800658c:	4631      	mov	r1, r6
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f04f 0400 	mov.w	r4, #0
 8006596:	00a5      	lsls	r5, r4, #2
 8006598:	62fd      	str	r5, [r7, #44]	; 0x2c
 800659a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800659c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80065a0:	62fd      	str	r5, [r7, #44]	; 0x2c
 80065a2:	009c      	lsls	r4, r3, #2
 80065a4:	62bc      	str	r4, [r7, #40]	; 0x28
 80065a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065aa:	f7fa fb01 	bl	8000bb0 <__aeabi_uldivmod>
 80065ae:	4603      	mov	r3, r0
 80065b0:	460c      	mov	r4, r1
 80065b2:	461a      	mov	r2, r3
 80065b4:	4b47      	ldr	r3, [pc, #284]	; (80066d4 <UART_SetConfig+0x35c>)
 80065b6:	fba3 1302 	umull	r1, r3, r3, r2
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	011d      	lsls	r5, r3, #4
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	4619      	mov	r1, r3
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4614      	mov	r4, r2
 80065ca:	18db      	adds	r3, r3, r3
 80065cc:	eb44 0404 	adc.w	r4, r4, r4
 80065d0:	185b      	adds	r3, r3, r1
 80065d2:	eb44 0402 	adc.w	r4, r4, r2
 80065d6:	00e0      	lsls	r0, r4, #3
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	00d8      	lsls	r0, r3, #3
 80065e4:	60b8      	str	r0, [r7, #8]
 80065e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80065ea:	eb13 0801 	adds.w	r8, r3, r1
 80065ee:	eb44 0902 	adc.w	r9, r4, r2
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f04f 0400 	mov.w	r4, #0
 80065fe:	00a6      	lsls	r6, r4, #2
 8006600:	627e      	str	r6, [r7, #36]	; 0x24
 8006602:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8006604:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8006608:	627e      	str	r6, [r7, #36]	; 0x24
 800660a:	009c      	lsls	r4, r3, #2
 800660c:	623c      	str	r4, [r7, #32]
 800660e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006612:	f7fa facd 	bl	8000bb0 <__aeabi_uldivmod>
 8006616:	4603      	mov	r3, r0
 8006618:	460c      	mov	r4, r1
 800661a:	461a      	mov	r2, r3
 800661c:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <UART_SetConfig+0x35c>)
 800661e:	fba3 1302 	umull	r1, r3, r3, r2
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	2164      	movs	r1, #100	; 0x64
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	3332      	adds	r3, #50	; 0x32
 8006630:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <UART_SetConfig+0x35c>)
 8006632:	fba2 1303 	umull	r1, r3, r2, r3
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800663c:	441d      	add	r5, r3
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006640:	4619      	mov	r1, r3
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	460b      	mov	r3, r1
 8006648:	4614      	mov	r4, r2
 800664a:	18db      	adds	r3, r3, r3
 800664c:	eb44 0404 	adc.w	r4, r4, r4
 8006650:	185b      	adds	r3, r3, r1
 8006652:	eb44 0402 	adc.w	r4, r4, r2
 8006656:	00e0      	lsls	r0, r4, #3
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	00d8      	lsls	r0, r3, #3
 8006664:	6038      	str	r0, [r7, #0]
 8006666:	e897 0018 	ldmia.w	r7, {r3, r4}
 800666a:	eb13 0801 	adds.w	r8, r3, r1
 800666e:	eb44 0902 	adc.w	r9, r4, r2
 8006672:	4640      	mov	r0, r8
 8006674:	4649      	mov	r1, r9
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f04f 0400 	mov.w	r4, #0
 800667e:	00a6      	lsls	r6, r4, #2
 8006680:	61fe      	str	r6, [r7, #28]
 8006682:	69fe      	ldr	r6, [r7, #28]
 8006684:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8006688:	61fe      	str	r6, [r7, #28]
 800668a:	009c      	lsls	r4, r3, #2
 800668c:	61bc      	str	r4, [r7, #24]
 800668e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006692:	f7fa fa8d 	bl	8000bb0 <__aeabi_uldivmod>
 8006696:	4603      	mov	r3, r0
 8006698:	460c      	mov	r4, r1
 800669a:	461a      	mov	r2, r3
 800669c:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <UART_SetConfig+0x35c>)
 800669e:	fba3 1302 	umull	r1, r3, r3, r2
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2164      	movs	r1, #100	; 0x64
 80066a6:	fb01 f303 	mul.w	r3, r1, r3
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	3332      	adds	r3, #50	; 0x32
 80066b0:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <UART_SetConfig+0x35c>)
 80066b2:	fba2 1303 	umull	r1, r3, r2, r3
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	442b      	add	r3, r5
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	6093      	str	r3, [r2, #8]
}
 80066c2:	bf00      	nop
 80066c4:	3744      	adds	r7, #68	; 0x44
 80066c6:	46bd      	mov	sp, r7
 80066c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066cc:	40011000 	.word	0x40011000
 80066d0:	40011400 	.word	0x40011400
 80066d4:	51eb851f 	.word	0x51eb851f

080066d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80066d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066dc:	480d      	ldr	r0, [pc, #52]	; (8006714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80066de:	490e      	ldr	r1, [pc, #56]	; (8006718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066e0:	4a0e      	ldr	r2, [pc, #56]	; (800671c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066e4:	e002      	b.n	80066ec <LoopCopyDataInit>

080066e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066ea:	3304      	adds	r3, #4

080066ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066f0:	d3f9      	bcc.n	80066e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066f2:	4a0b      	ldr	r2, [pc, #44]	; (8006720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066f4:	4c0b      	ldr	r4, [pc, #44]	; (8006724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066f8:	e001      	b.n	80066fe <LoopFillZerobss>

080066fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066fc:	3204      	adds	r2, #4

080066fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006700:	d3fb      	bcc.n	80066fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006702:	f7fc fc4b 	bl	8002f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006706:	f000 f81b 	bl	8006740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800670a:	f7fa ff93 	bl	8001634 <main>
  bx  lr    
 800670e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006718:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800671c:	08008998 	.word	0x08008998
  ldr r2, =_sbss
 8006720:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8006724:	200007b4 	.word	0x200007b4

08006728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006728:	e7fe      	b.n	8006728 <ADC_IRQHandler>

0800672a <atoi>:
 800672a:	220a      	movs	r2, #10
 800672c:	2100      	movs	r1, #0
 800672e:	f000 b8d7 	b.w	80068e0 <strtol>
	...

08006734 <__errno>:
 8006734:	4b01      	ldr	r3, [pc, #4]	; (800673c <__errno+0x8>)
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	2000003c 	.word	0x2000003c

08006740 <__libc_init_array>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	4e0d      	ldr	r6, [pc, #52]	; (8006778 <__libc_init_array+0x38>)
 8006744:	4c0d      	ldr	r4, [pc, #52]	; (800677c <__libc_init_array+0x3c>)
 8006746:	1ba4      	subs	r4, r4, r6
 8006748:	10a4      	asrs	r4, r4, #2
 800674a:	2500      	movs	r5, #0
 800674c:	42a5      	cmp	r5, r4
 800674e:	d109      	bne.n	8006764 <__libc_init_array+0x24>
 8006750:	4e0b      	ldr	r6, [pc, #44]	; (8006780 <__libc_init_array+0x40>)
 8006752:	4c0c      	ldr	r4, [pc, #48]	; (8006784 <__libc_init_array+0x44>)
 8006754:	f001 ff5c 	bl	8008610 <_init>
 8006758:	1ba4      	subs	r4, r4, r6
 800675a:	10a4      	asrs	r4, r4, #2
 800675c:	2500      	movs	r5, #0
 800675e:	42a5      	cmp	r5, r4
 8006760:	d105      	bne.n	800676e <__libc_init_array+0x2e>
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006768:	4798      	blx	r3
 800676a:	3501      	adds	r5, #1
 800676c:	e7ee      	b.n	800674c <__libc_init_array+0xc>
 800676e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006772:	4798      	blx	r3
 8006774:	3501      	adds	r5, #1
 8006776:	e7f2      	b.n	800675e <__libc_init_array+0x1e>
 8006778:	08008990 	.word	0x08008990
 800677c:	08008990 	.word	0x08008990
 8006780:	08008990 	.word	0x08008990
 8006784:	08008994 	.word	0x08008994

08006788 <memset>:
 8006788:	4402      	add	r2, r0
 800678a:	4603      	mov	r3, r0
 800678c:	4293      	cmp	r3, r2
 800678e:	d100      	bne.n	8006792 <memset+0xa>
 8006790:	4770      	bx	lr
 8006792:	f803 1b01 	strb.w	r1, [r3], #1
 8006796:	e7f9      	b.n	800678c <memset+0x4>

08006798 <siprintf>:
 8006798:	b40e      	push	{r1, r2, r3}
 800679a:	b500      	push	{lr}
 800679c:	b09c      	sub	sp, #112	; 0x70
 800679e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80067a2:	ab1d      	add	r3, sp, #116	; 0x74
 80067a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80067a8:	9002      	str	r0, [sp, #8]
 80067aa:	9006      	str	r0, [sp, #24]
 80067ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067b0:	480a      	ldr	r0, [pc, #40]	; (80067dc <siprintf+0x44>)
 80067b2:	9104      	str	r1, [sp, #16]
 80067b4:	9107      	str	r1, [sp, #28]
 80067b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80067be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	a902      	add	r1, sp, #8
 80067c8:	f000 f910 	bl	80069ec <_svfiprintf_r>
 80067cc:	9b02      	ldr	r3, [sp, #8]
 80067ce:	2200      	movs	r2, #0
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	b01c      	add	sp, #112	; 0x70
 80067d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d8:	b003      	add	sp, #12
 80067da:	4770      	bx	lr
 80067dc:	2000003c 	.word	0x2000003c

080067e0 <_strtol_l.isra.0>:
 80067e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	4680      	mov	r8, r0
 80067e6:	4689      	mov	r9, r1
 80067e8:	4692      	mov	sl, r2
 80067ea:	461f      	mov	r7, r3
 80067ec:	468b      	mov	fp, r1
 80067ee:	465d      	mov	r5, fp
 80067f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067f6:	f000 f889 	bl	800690c <__locale_ctype_ptr_l>
 80067fa:	4420      	add	r0, r4
 80067fc:	7846      	ldrb	r6, [r0, #1]
 80067fe:	f016 0608 	ands.w	r6, r6, #8
 8006802:	d10b      	bne.n	800681c <_strtol_l.isra.0+0x3c>
 8006804:	2c2d      	cmp	r4, #45	; 0x2d
 8006806:	d10b      	bne.n	8006820 <_strtol_l.isra.0+0x40>
 8006808:	782c      	ldrb	r4, [r5, #0]
 800680a:	2601      	movs	r6, #1
 800680c:	f10b 0502 	add.w	r5, fp, #2
 8006810:	b167      	cbz	r7, 800682c <_strtol_l.isra.0+0x4c>
 8006812:	2f10      	cmp	r7, #16
 8006814:	d114      	bne.n	8006840 <_strtol_l.isra.0+0x60>
 8006816:	2c30      	cmp	r4, #48	; 0x30
 8006818:	d00a      	beq.n	8006830 <_strtol_l.isra.0+0x50>
 800681a:	e011      	b.n	8006840 <_strtol_l.isra.0+0x60>
 800681c:	46ab      	mov	fp, r5
 800681e:	e7e6      	b.n	80067ee <_strtol_l.isra.0+0xe>
 8006820:	2c2b      	cmp	r4, #43	; 0x2b
 8006822:	bf04      	itt	eq
 8006824:	782c      	ldrbeq	r4, [r5, #0]
 8006826:	f10b 0502 	addeq.w	r5, fp, #2
 800682a:	e7f1      	b.n	8006810 <_strtol_l.isra.0+0x30>
 800682c:	2c30      	cmp	r4, #48	; 0x30
 800682e:	d127      	bne.n	8006880 <_strtol_l.isra.0+0xa0>
 8006830:	782b      	ldrb	r3, [r5, #0]
 8006832:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006836:	2b58      	cmp	r3, #88	; 0x58
 8006838:	d14b      	bne.n	80068d2 <_strtol_l.isra.0+0xf2>
 800683a:	786c      	ldrb	r4, [r5, #1]
 800683c:	2710      	movs	r7, #16
 800683e:	3502      	adds	r5, #2
 8006840:	2e00      	cmp	r6, #0
 8006842:	bf0c      	ite	eq
 8006844:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006848:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800684c:	2200      	movs	r2, #0
 800684e:	fbb1 fef7 	udiv	lr, r1, r7
 8006852:	4610      	mov	r0, r2
 8006854:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006858:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800685c:	2b09      	cmp	r3, #9
 800685e:	d811      	bhi.n	8006884 <_strtol_l.isra.0+0xa4>
 8006860:	461c      	mov	r4, r3
 8006862:	42a7      	cmp	r7, r4
 8006864:	dd1d      	ble.n	80068a2 <_strtol_l.isra.0+0xc2>
 8006866:	1c53      	adds	r3, r2, #1
 8006868:	d007      	beq.n	800687a <_strtol_l.isra.0+0x9a>
 800686a:	4586      	cmp	lr, r0
 800686c:	d316      	bcc.n	800689c <_strtol_l.isra.0+0xbc>
 800686e:	d101      	bne.n	8006874 <_strtol_l.isra.0+0x94>
 8006870:	45a4      	cmp	ip, r4
 8006872:	db13      	blt.n	800689c <_strtol_l.isra.0+0xbc>
 8006874:	fb00 4007 	mla	r0, r0, r7, r4
 8006878:	2201      	movs	r2, #1
 800687a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800687e:	e7eb      	b.n	8006858 <_strtol_l.isra.0+0x78>
 8006880:	270a      	movs	r7, #10
 8006882:	e7dd      	b.n	8006840 <_strtol_l.isra.0+0x60>
 8006884:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006888:	2b19      	cmp	r3, #25
 800688a:	d801      	bhi.n	8006890 <_strtol_l.isra.0+0xb0>
 800688c:	3c37      	subs	r4, #55	; 0x37
 800688e:	e7e8      	b.n	8006862 <_strtol_l.isra.0+0x82>
 8006890:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006894:	2b19      	cmp	r3, #25
 8006896:	d804      	bhi.n	80068a2 <_strtol_l.isra.0+0xc2>
 8006898:	3c57      	subs	r4, #87	; 0x57
 800689a:	e7e2      	b.n	8006862 <_strtol_l.isra.0+0x82>
 800689c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068a0:	e7eb      	b.n	800687a <_strtol_l.isra.0+0x9a>
 80068a2:	1c53      	adds	r3, r2, #1
 80068a4:	d108      	bne.n	80068b8 <_strtol_l.isra.0+0xd8>
 80068a6:	2322      	movs	r3, #34	; 0x22
 80068a8:	f8c8 3000 	str.w	r3, [r8]
 80068ac:	4608      	mov	r0, r1
 80068ae:	f1ba 0f00 	cmp.w	sl, #0
 80068b2:	d107      	bne.n	80068c4 <_strtol_l.isra.0+0xe4>
 80068b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b8:	b106      	cbz	r6, 80068bc <_strtol_l.isra.0+0xdc>
 80068ba:	4240      	negs	r0, r0
 80068bc:	f1ba 0f00 	cmp.w	sl, #0
 80068c0:	d00c      	beq.n	80068dc <_strtol_l.isra.0+0xfc>
 80068c2:	b122      	cbz	r2, 80068ce <_strtol_l.isra.0+0xee>
 80068c4:	3d01      	subs	r5, #1
 80068c6:	f8ca 5000 	str.w	r5, [sl]
 80068ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	464d      	mov	r5, r9
 80068d0:	e7f9      	b.n	80068c6 <_strtol_l.isra.0+0xe6>
 80068d2:	2430      	movs	r4, #48	; 0x30
 80068d4:	2f00      	cmp	r7, #0
 80068d6:	d1b3      	bne.n	8006840 <_strtol_l.isra.0+0x60>
 80068d8:	2708      	movs	r7, #8
 80068da:	e7b1      	b.n	8006840 <_strtol_l.isra.0+0x60>
 80068dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068e0 <strtol>:
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <strtol+0x24>)
 80068e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e4:	681c      	ldr	r4, [r3, #0]
 80068e6:	4d08      	ldr	r5, [pc, #32]	; (8006908 <strtol+0x28>)
 80068e8:	6a23      	ldr	r3, [r4, #32]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bf08      	it	eq
 80068ee:	462b      	moveq	r3, r5
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	460a      	mov	r2, r1
 80068f6:	4601      	mov	r1, r0
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7ff ff71 	bl	80067e0 <_strtol_l.isra.0>
 80068fe:	b003      	add	sp, #12
 8006900:	bd30      	pop	{r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	2000003c 	.word	0x2000003c
 8006908:	200000a0 	.word	0x200000a0

0800690c <__locale_ctype_ptr_l>:
 800690c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006910:	4770      	bx	lr

08006912 <__ascii_mbtowc>:
 8006912:	b082      	sub	sp, #8
 8006914:	b901      	cbnz	r1, 8006918 <__ascii_mbtowc+0x6>
 8006916:	a901      	add	r1, sp, #4
 8006918:	b142      	cbz	r2, 800692c <__ascii_mbtowc+0x1a>
 800691a:	b14b      	cbz	r3, 8006930 <__ascii_mbtowc+0x1e>
 800691c:	7813      	ldrb	r3, [r2, #0]
 800691e:	600b      	str	r3, [r1, #0]
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	1c10      	adds	r0, r2, #0
 8006924:	bf18      	it	ne
 8006926:	2001      	movne	r0, #1
 8006928:	b002      	add	sp, #8
 800692a:	4770      	bx	lr
 800692c:	4610      	mov	r0, r2
 800692e:	e7fb      	b.n	8006928 <__ascii_mbtowc+0x16>
 8006930:	f06f 0001 	mvn.w	r0, #1
 8006934:	e7f8      	b.n	8006928 <__ascii_mbtowc+0x16>

08006936 <__ssputs_r>:
 8006936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693a:	688e      	ldr	r6, [r1, #8]
 800693c:	429e      	cmp	r6, r3
 800693e:	4682      	mov	sl, r0
 8006940:	460c      	mov	r4, r1
 8006942:	4691      	mov	r9, r2
 8006944:	4698      	mov	r8, r3
 8006946:	d835      	bhi.n	80069b4 <__ssputs_r+0x7e>
 8006948:	898a      	ldrh	r2, [r1, #12]
 800694a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800694e:	d031      	beq.n	80069b4 <__ssputs_r+0x7e>
 8006950:	6825      	ldr	r5, [r4, #0]
 8006952:	6909      	ldr	r1, [r1, #16]
 8006954:	1a6f      	subs	r7, r5, r1
 8006956:	6965      	ldr	r5, [r4, #20]
 8006958:	2302      	movs	r3, #2
 800695a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800695e:	fb95 f5f3 	sdiv	r5, r5, r3
 8006962:	f108 0301 	add.w	r3, r8, #1
 8006966:	443b      	add	r3, r7
 8006968:	429d      	cmp	r5, r3
 800696a:	bf38      	it	cc
 800696c:	461d      	movcc	r5, r3
 800696e:	0553      	lsls	r3, r2, #21
 8006970:	d531      	bpl.n	80069d6 <__ssputs_r+0xa0>
 8006972:	4629      	mov	r1, r5
 8006974:	f000 fb44 	bl	8007000 <_malloc_r>
 8006978:	4606      	mov	r6, r0
 800697a:	b950      	cbnz	r0, 8006992 <__ssputs_r+0x5c>
 800697c:	230c      	movs	r3, #12
 800697e:	f8ca 3000 	str.w	r3, [sl]
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006992:	463a      	mov	r2, r7
 8006994:	6921      	ldr	r1, [r4, #16]
 8006996:	f000 fac0 	bl	8006f1a <memcpy>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	6126      	str	r6, [r4, #16]
 80069a8:	6165      	str	r5, [r4, #20]
 80069aa:	443e      	add	r6, r7
 80069ac:	1bed      	subs	r5, r5, r7
 80069ae:	6026      	str	r6, [r4, #0]
 80069b0:	60a5      	str	r5, [r4, #8]
 80069b2:	4646      	mov	r6, r8
 80069b4:	4546      	cmp	r6, r8
 80069b6:	bf28      	it	cs
 80069b8:	4646      	movcs	r6, r8
 80069ba:	4632      	mov	r2, r6
 80069bc:	4649      	mov	r1, r9
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	f000 fab6 	bl	8006f30 <memmove>
 80069c4:	68a3      	ldr	r3, [r4, #8]
 80069c6:	1b9b      	subs	r3, r3, r6
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	441e      	add	r6, r3
 80069ce:	6026      	str	r6, [r4, #0]
 80069d0:	2000      	movs	r0, #0
 80069d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d6:	462a      	mov	r2, r5
 80069d8:	f000 fb70 	bl	80070bc <_realloc_r>
 80069dc:	4606      	mov	r6, r0
 80069de:	2800      	cmp	r0, #0
 80069e0:	d1e1      	bne.n	80069a6 <__ssputs_r+0x70>
 80069e2:	6921      	ldr	r1, [r4, #16]
 80069e4:	4650      	mov	r0, sl
 80069e6:	f000 fabd 	bl	8006f64 <_free_r>
 80069ea:	e7c7      	b.n	800697c <__ssputs_r+0x46>

080069ec <_svfiprintf_r>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	b09d      	sub	sp, #116	; 0x74
 80069f2:	4680      	mov	r8, r0
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	898b      	ldrh	r3, [r1, #12]
 80069f8:	061c      	lsls	r4, r3, #24
 80069fa:	460d      	mov	r5, r1
 80069fc:	4616      	mov	r6, r2
 80069fe:	d50f      	bpl.n	8006a20 <_svfiprintf_r+0x34>
 8006a00:	690b      	ldr	r3, [r1, #16]
 8006a02:	b96b      	cbnz	r3, 8006a20 <_svfiprintf_r+0x34>
 8006a04:	2140      	movs	r1, #64	; 0x40
 8006a06:	f000 fafb 	bl	8007000 <_malloc_r>
 8006a0a:	6028      	str	r0, [r5, #0]
 8006a0c:	6128      	str	r0, [r5, #16]
 8006a0e:	b928      	cbnz	r0, 8006a1c <_svfiprintf_r+0x30>
 8006a10:	230c      	movs	r3, #12
 8006a12:	f8c8 3000 	str.w	r3, [r8]
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1a:	e0c5      	b.n	8006ba8 <_svfiprintf_r+0x1bc>
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	616b      	str	r3, [r5, #20]
 8006a20:	2300      	movs	r3, #0
 8006a22:	9309      	str	r3, [sp, #36]	; 0x24
 8006a24:	2320      	movs	r3, #32
 8006a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a2a:	2330      	movs	r3, #48	; 0x30
 8006a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a30:	f04f 0b01 	mov.w	fp, #1
 8006a34:	4637      	mov	r7, r6
 8006a36:	463c      	mov	r4, r7
 8006a38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d13c      	bne.n	8006aba <_svfiprintf_r+0xce>
 8006a40:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a44:	d00b      	beq.n	8006a5e <_svfiprintf_r+0x72>
 8006a46:	4653      	mov	r3, sl
 8006a48:	4632      	mov	r2, r6
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	f7ff ff72 	bl	8006936 <__ssputs_r>
 8006a52:	3001      	adds	r0, #1
 8006a54:	f000 80a3 	beq.w	8006b9e <_svfiprintf_r+0x1b2>
 8006a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5a:	4453      	add	r3, sl
 8006a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5e:	783b      	ldrb	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 809c 	beq.w	8006b9e <_svfiprintf_r+0x1b2>
 8006a66:	2300      	movs	r3, #0
 8006a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	9307      	str	r3, [sp, #28]
 8006a70:	9205      	str	r2, [sp, #20]
 8006a72:	9306      	str	r3, [sp, #24]
 8006a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a78:	931a      	str	r3, [sp, #104]	; 0x68
 8006a7a:	2205      	movs	r2, #5
 8006a7c:	7821      	ldrb	r1, [r4, #0]
 8006a7e:	4850      	ldr	r0, [pc, #320]	; (8006bc0 <_svfiprintf_r+0x1d4>)
 8006a80:	f7f9 fbb6 	bl	80001f0 <memchr>
 8006a84:	1c67      	adds	r7, r4, #1
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	b9d8      	cbnz	r0, 8006ac2 <_svfiprintf_r+0xd6>
 8006a8a:	06d9      	lsls	r1, r3, #27
 8006a8c:	bf44      	itt	mi
 8006a8e:	2220      	movmi	r2, #32
 8006a90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a94:	071a      	lsls	r2, r3, #28
 8006a96:	bf44      	itt	mi
 8006a98:	222b      	movmi	r2, #43	; 0x2b
 8006a9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a9e:	7822      	ldrb	r2, [r4, #0]
 8006aa0:	2a2a      	cmp	r2, #42	; 0x2a
 8006aa2:	d016      	beq.n	8006ad2 <_svfiprintf_r+0xe6>
 8006aa4:	9a07      	ldr	r2, [sp, #28]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	200a      	movs	r0, #10
 8006aaa:	4627      	mov	r7, r4
 8006aac:	3401      	adds	r4, #1
 8006aae:	783b      	ldrb	r3, [r7, #0]
 8006ab0:	3b30      	subs	r3, #48	; 0x30
 8006ab2:	2b09      	cmp	r3, #9
 8006ab4:	d951      	bls.n	8006b5a <_svfiprintf_r+0x16e>
 8006ab6:	b1c9      	cbz	r1, 8006aec <_svfiprintf_r+0x100>
 8006ab8:	e011      	b.n	8006ade <_svfiprintf_r+0xf2>
 8006aba:	2b25      	cmp	r3, #37	; 0x25
 8006abc:	d0c0      	beq.n	8006a40 <_svfiprintf_r+0x54>
 8006abe:	4627      	mov	r7, r4
 8006ac0:	e7b9      	b.n	8006a36 <_svfiprintf_r+0x4a>
 8006ac2:	4a3f      	ldr	r2, [pc, #252]	; (8006bc0 <_svfiprintf_r+0x1d4>)
 8006ac4:	1a80      	subs	r0, r0, r2
 8006ac6:	fa0b f000 	lsl.w	r0, fp, r0
 8006aca:	4318      	orrs	r0, r3
 8006acc:	9004      	str	r0, [sp, #16]
 8006ace:	463c      	mov	r4, r7
 8006ad0:	e7d3      	b.n	8006a7a <_svfiprintf_r+0x8e>
 8006ad2:	9a03      	ldr	r2, [sp, #12]
 8006ad4:	1d11      	adds	r1, r2, #4
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	9103      	str	r1, [sp, #12]
 8006ada:	2a00      	cmp	r2, #0
 8006adc:	db01      	blt.n	8006ae2 <_svfiprintf_r+0xf6>
 8006ade:	9207      	str	r2, [sp, #28]
 8006ae0:	e004      	b.n	8006aec <_svfiprintf_r+0x100>
 8006ae2:	4252      	negs	r2, r2
 8006ae4:	f043 0302 	orr.w	r3, r3, #2
 8006ae8:	9207      	str	r2, [sp, #28]
 8006aea:	9304      	str	r3, [sp, #16]
 8006aec:	783b      	ldrb	r3, [r7, #0]
 8006aee:	2b2e      	cmp	r3, #46	; 0x2e
 8006af0:	d10e      	bne.n	8006b10 <_svfiprintf_r+0x124>
 8006af2:	787b      	ldrb	r3, [r7, #1]
 8006af4:	2b2a      	cmp	r3, #42	; 0x2a
 8006af6:	f107 0101 	add.w	r1, r7, #1
 8006afa:	d132      	bne.n	8006b62 <_svfiprintf_r+0x176>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9203      	str	r2, [sp, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfb8      	it	lt
 8006b08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b0c:	3702      	adds	r7, #2
 8006b0e:	9305      	str	r3, [sp, #20]
 8006b10:	4c2c      	ldr	r4, [pc, #176]	; (8006bc4 <_svfiprintf_r+0x1d8>)
 8006b12:	7839      	ldrb	r1, [r7, #0]
 8006b14:	2203      	movs	r2, #3
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7f9 fb6a 	bl	80001f0 <memchr>
 8006b1c:	b138      	cbz	r0, 8006b2e <_svfiprintf_r+0x142>
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	1b00      	subs	r0, r0, r4
 8006b22:	fa03 f000 	lsl.w	r0, r3, r0
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	4303      	orrs	r3, r0
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	3701      	adds	r7, #1
 8006b2e:	7839      	ldrb	r1, [r7, #0]
 8006b30:	4825      	ldr	r0, [pc, #148]	; (8006bc8 <_svfiprintf_r+0x1dc>)
 8006b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b36:	2206      	movs	r2, #6
 8006b38:	1c7e      	adds	r6, r7, #1
 8006b3a:	f7f9 fb59 	bl	80001f0 <memchr>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d035      	beq.n	8006bae <_svfiprintf_r+0x1c2>
 8006b42:	4b22      	ldr	r3, [pc, #136]	; (8006bcc <_svfiprintf_r+0x1e0>)
 8006b44:	b9fb      	cbnz	r3, 8006b86 <_svfiprintf_r+0x19a>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	3307      	adds	r3, #7
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	3308      	adds	r3, #8
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b54:	444b      	add	r3, r9
 8006b56:	9309      	str	r3, [sp, #36]	; 0x24
 8006b58:	e76c      	b.n	8006a34 <_svfiprintf_r+0x48>
 8006b5a:	fb00 3202 	mla	r2, r0, r2, r3
 8006b5e:	2101      	movs	r1, #1
 8006b60:	e7a3      	b.n	8006aaa <_svfiprintf_r+0xbe>
 8006b62:	2300      	movs	r3, #0
 8006b64:	9305      	str	r3, [sp, #20]
 8006b66:	4618      	mov	r0, r3
 8006b68:	240a      	movs	r4, #10
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	3101      	adds	r1, #1
 8006b6e:	783a      	ldrb	r2, [r7, #0]
 8006b70:	3a30      	subs	r2, #48	; 0x30
 8006b72:	2a09      	cmp	r2, #9
 8006b74:	d903      	bls.n	8006b7e <_svfiprintf_r+0x192>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0ca      	beq.n	8006b10 <_svfiprintf_r+0x124>
 8006b7a:	9005      	str	r0, [sp, #20]
 8006b7c:	e7c8      	b.n	8006b10 <_svfiprintf_r+0x124>
 8006b7e:	fb04 2000 	mla	r0, r4, r0, r2
 8006b82:	2301      	movs	r3, #1
 8006b84:	e7f1      	b.n	8006b6a <_svfiprintf_r+0x17e>
 8006b86:	ab03      	add	r3, sp, #12
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	462a      	mov	r2, r5
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <_svfiprintf_r+0x1e4>)
 8006b8e:	a904      	add	r1, sp, #16
 8006b90:	4640      	mov	r0, r8
 8006b92:	f3af 8000 	nop.w
 8006b96:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006b9a:	4681      	mov	r9, r0
 8006b9c:	d1d9      	bne.n	8006b52 <_svfiprintf_r+0x166>
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	065b      	lsls	r3, r3, #25
 8006ba2:	f53f af38 	bmi.w	8006a16 <_svfiprintf_r+0x2a>
 8006ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ba8:	b01d      	add	sp, #116	; 0x74
 8006baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bae:	ab03      	add	r3, sp, #12
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <_svfiprintf_r+0x1e4>)
 8006bb6:	a904      	add	r1, sp, #16
 8006bb8:	4640      	mov	r0, r8
 8006bba:	f000 f881 	bl	8006cc0 <_printf_i>
 8006bbe:	e7ea      	b.n	8006b96 <_svfiprintf_r+0x1aa>
 8006bc0:	080087be 	.word	0x080087be
 8006bc4:	080087c4 	.word	0x080087c4
 8006bc8:	080087c8 	.word	0x080087c8
 8006bcc:	00000000 	.word	0x00000000
 8006bd0:	08006937 	.word	0x08006937

08006bd4 <_printf_common>:
 8006bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd8:	4691      	mov	r9, r2
 8006bda:	461f      	mov	r7, r3
 8006bdc:	688a      	ldr	r2, [r1, #8]
 8006bde:	690b      	ldr	r3, [r1, #16]
 8006be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006be4:	4293      	cmp	r3, r2
 8006be6:	bfb8      	it	lt
 8006be8:	4613      	movlt	r3, r2
 8006bea:	f8c9 3000 	str.w	r3, [r9]
 8006bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	b112      	cbz	r2, 8006bfe <_printf_common+0x2a>
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f8c9 3000 	str.w	r3, [r9]
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	0699      	lsls	r1, r3, #26
 8006c02:	bf42      	ittt	mi
 8006c04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c08:	3302      	addmi	r3, #2
 8006c0a:	f8c9 3000 	strmi.w	r3, [r9]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	f015 0506 	ands.w	r5, r5, #6
 8006c14:	d107      	bne.n	8006c26 <_printf_common+0x52>
 8006c16:	f104 0a19 	add.w	sl, r4, #25
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	429d      	cmp	r5, r3
 8006c24:	db29      	blt.n	8006c7a <_printf_common+0xa6>
 8006c26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	3300      	adds	r3, #0
 8006c2e:	bf18      	it	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	0692      	lsls	r2, r2, #26
 8006c34:	d42e      	bmi.n	8006c94 <_printf_common+0xc0>
 8006c36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	47c0      	blx	r8
 8006c40:	3001      	adds	r0, #1
 8006c42:	d021      	beq.n	8006c88 <_printf_common+0xb4>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	68e5      	ldr	r5, [r4, #12]
 8006c48:	f8d9 2000 	ldr.w	r2, [r9]
 8006c4c:	f003 0306 	and.w	r3, r3, #6
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	bf08      	it	eq
 8006c54:	1aad      	subeq	r5, r5, r2
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	6922      	ldr	r2, [r4, #16]
 8006c5a:	bf0c      	ite	eq
 8006c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c60:	2500      	movne	r5, #0
 8006c62:	4293      	cmp	r3, r2
 8006c64:	bfc4      	itt	gt
 8006c66:	1a9b      	subgt	r3, r3, r2
 8006c68:	18ed      	addgt	r5, r5, r3
 8006c6a:	f04f 0900 	mov.w	r9, #0
 8006c6e:	341a      	adds	r4, #26
 8006c70:	454d      	cmp	r5, r9
 8006c72:	d11b      	bne.n	8006cac <_printf_common+0xd8>
 8006c74:	2000      	movs	r0, #0
 8006c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4630      	mov	r0, r6
 8006c82:	47c0      	blx	r8
 8006c84:	3001      	adds	r0, #1
 8006c86:	d103      	bne.n	8006c90 <_printf_common+0xbc>
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c90:	3501      	adds	r5, #1
 8006c92:	e7c2      	b.n	8006c1a <_printf_common+0x46>
 8006c94:	18e1      	adds	r1, r4, r3
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	2030      	movs	r0, #48	; 0x30
 8006c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c9e:	4422      	add	r2, r4
 8006ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ca8:	3302      	adds	r3, #2
 8006caa:	e7c4      	b.n	8006c36 <_printf_common+0x62>
 8006cac:	2301      	movs	r3, #1
 8006cae:	4622      	mov	r2, r4
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	47c0      	blx	r8
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d0e6      	beq.n	8006c88 <_printf_common+0xb4>
 8006cba:	f109 0901 	add.w	r9, r9, #1
 8006cbe:	e7d7      	b.n	8006c70 <_printf_common+0x9c>

08006cc0 <_printf_i>:
 8006cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	4617      	mov	r7, r2
 8006cc6:	7e0a      	ldrb	r2, [r1, #24]
 8006cc8:	b085      	sub	sp, #20
 8006cca:	2a6e      	cmp	r2, #110	; 0x6e
 8006ccc:	4698      	mov	r8, r3
 8006cce:	4606      	mov	r6, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cd4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006cd8:	f000 80bc 	beq.w	8006e54 <_printf_i+0x194>
 8006cdc:	d81a      	bhi.n	8006d14 <_printf_i+0x54>
 8006cde:	2a63      	cmp	r2, #99	; 0x63
 8006ce0:	d02e      	beq.n	8006d40 <_printf_i+0x80>
 8006ce2:	d80a      	bhi.n	8006cfa <_printf_i+0x3a>
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	f000 80c8 	beq.w	8006e7a <_printf_i+0x1ba>
 8006cea:	2a58      	cmp	r2, #88	; 0x58
 8006cec:	f000 808a 	beq.w	8006e04 <_printf_i+0x144>
 8006cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006cf8:	e02a      	b.n	8006d50 <_printf_i+0x90>
 8006cfa:	2a64      	cmp	r2, #100	; 0x64
 8006cfc:	d001      	beq.n	8006d02 <_printf_i+0x42>
 8006cfe:	2a69      	cmp	r2, #105	; 0x69
 8006d00:	d1f6      	bne.n	8006cf0 <_printf_i+0x30>
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006d0a:	d023      	beq.n	8006d54 <_printf_i+0x94>
 8006d0c:	1d11      	adds	r1, r2, #4
 8006d0e:	6019      	str	r1, [r3, #0]
 8006d10:	6813      	ldr	r3, [r2, #0]
 8006d12:	e027      	b.n	8006d64 <_printf_i+0xa4>
 8006d14:	2a73      	cmp	r2, #115	; 0x73
 8006d16:	f000 80b4 	beq.w	8006e82 <_printf_i+0x1c2>
 8006d1a:	d808      	bhi.n	8006d2e <_printf_i+0x6e>
 8006d1c:	2a6f      	cmp	r2, #111	; 0x6f
 8006d1e:	d02a      	beq.n	8006d76 <_printf_i+0xb6>
 8006d20:	2a70      	cmp	r2, #112	; 0x70
 8006d22:	d1e5      	bne.n	8006cf0 <_printf_i+0x30>
 8006d24:	680a      	ldr	r2, [r1, #0]
 8006d26:	f042 0220 	orr.w	r2, r2, #32
 8006d2a:	600a      	str	r2, [r1, #0]
 8006d2c:	e003      	b.n	8006d36 <_printf_i+0x76>
 8006d2e:	2a75      	cmp	r2, #117	; 0x75
 8006d30:	d021      	beq.n	8006d76 <_printf_i+0xb6>
 8006d32:	2a78      	cmp	r2, #120	; 0x78
 8006d34:	d1dc      	bne.n	8006cf0 <_printf_i+0x30>
 8006d36:	2278      	movs	r2, #120	; 0x78
 8006d38:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006d3c:	496e      	ldr	r1, [pc, #440]	; (8006ef8 <_printf_i+0x238>)
 8006d3e:	e064      	b.n	8006e0a <_printf_i+0x14a>
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006d46:	1d11      	adds	r1, r2, #4
 8006d48:	6019      	str	r1, [r3, #0]
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0a3      	b.n	8006e9c <_printf_i+0x1dc>
 8006d54:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006d58:	f102 0104 	add.w	r1, r2, #4
 8006d5c:	6019      	str	r1, [r3, #0]
 8006d5e:	d0d7      	beq.n	8006d10 <_printf_i+0x50>
 8006d60:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da03      	bge.n	8006d70 <_printf_i+0xb0>
 8006d68:	222d      	movs	r2, #45	; 0x2d
 8006d6a:	425b      	negs	r3, r3
 8006d6c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d70:	4962      	ldr	r1, [pc, #392]	; (8006efc <_printf_i+0x23c>)
 8006d72:	220a      	movs	r2, #10
 8006d74:	e017      	b.n	8006da6 <_printf_i+0xe6>
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	6819      	ldr	r1, [r3, #0]
 8006d7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006d7e:	d003      	beq.n	8006d88 <_printf_i+0xc8>
 8006d80:	1d08      	adds	r0, r1, #4
 8006d82:	6018      	str	r0, [r3, #0]
 8006d84:	680b      	ldr	r3, [r1, #0]
 8006d86:	e006      	b.n	8006d96 <_printf_i+0xd6>
 8006d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d8c:	f101 0004 	add.w	r0, r1, #4
 8006d90:	6018      	str	r0, [r3, #0]
 8006d92:	d0f7      	beq.n	8006d84 <_printf_i+0xc4>
 8006d94:	880b      	ldrh	r3, [r1, #0]
 8006d96:	4959      	ldr	r1, [pc, #356]	; (8006efc <_printf_i+0x23c>)
 8006d98:	2a6f      	cmp	r2, #111	; 0x6f
 8006d9a:	bf14      	ite	ne
 8006d9c:	220a      	movne	r2, #10
 8006d9e:	2208      	moveq	r2, #8
 8006da0:	2000      	movs	r0, #0
 8006da2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006da6:	6865      	ldr	r5, [r4, #4]
 8006da8:	60a5      	str	r5, [r4, #8]
 8006daa:	2d00      	cmp	r5, #0
 8006dac:	f2c0 809c 	blt.w	8006ee8 <_printf_i+0x228>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	f020 0004 	bic.w	r0, r0, #4
 8006db6:	6020      	str	r0, [r4, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d13f      	bne.n	8006e3c <_printf_i+0x17c>
 8006dbc:	2d00      	cmp	r5, #0
 8006dbe:	f040 8095 	bne.w	8006eec <_printf_i+0x22c>
 8006dc2:	4675      	mov	r5, lr
 8006dc4:	2a08      	cmp	r2, #8
 8006dc6:	d10b      	bne.n	8006de0 <_printf_i+0x120>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	07da      	lsls	r2, r3, #31
 8006dcc:	d508      	bpl.n	8006de0 <_printf_i+0x120>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	6862      	ldr	r2, [r4, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	bfde      	ittt	le
 8006dd6:	2330      	movle	r3, #48	; 0x30
 8006dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ddc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006de0:	ebae 0305 	sub.w	r3, lr, r5
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	f8cd 8000 	str.w	r8, [sp]
 8006dea:	463b      	mov	r3, r7
 8006dec:	aa03      	add	r2, sp, #12
 8006dee:	4621      	mov	r1, r4
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff feef 	bl	8006bd4 <_printf_common>
 8006df6:	3001      	adds	r0, #1
 8006df8:	d155      	bne.n	8006ea6 <_printf_i+0x1e6>
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dfe:	b005      	add	sp, #20
 8006e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e04:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006e08:	493c      	ldr	r1, [pc, #240]	; (8006efc <_printf_i+0x23c>)
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e12:	f100 0504 	add.w	r5, r0, #4
 8006e16:	601d      	str	r5, [r3, #0]
 8006e18:	d001      	beq.n	8006e1e <_printf_i+0x15e>
 8006e1a:	6803      	ldr	r3, [r0, #0]
 8006e1c:	e002      	b.n	8006e24 <_printf_i+0x164>
 8006e1e:	0655      	lsls	r5, r2, #25
 8006e20:	d5fb      	bpl.n	8006e1a <_printf_i+0x15a>
 8006e22:	8803      	ldrh	r3, [r0, #0]
 8006e24:	07d0      	lsls	r0, r2, #31
 8006e26:	bf44      	itt	mi
 8006e28:	f042 0220 	orrmi.w	r2, r2, #32
 8006e2c:	6022      	strmi	r2, [r4, #0]
 8006e2e:	b91b      	cbnz	r3, 8006e38 <_printf_i+0x178>
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	f022 0220 	bic.w	r2, r2, #32
 8006e36:	6022      	str	r2, [r4, #0]
 8006e38:	2210      	movs	r2, #16
 8006e3a:	e7b1      	b.n	8006da0 <_printf_i+0xe0>
 8006e3c:	4675      	mov	r5, lr
 8006e3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e42:	fb02 3310 	mls	r3, r2, r0, r3
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d1f5      	bne.n	8006e3e <_printf_i+0x17e>
 8006e52:	e7b7      	b.n	8006dc4 <_printf_i+0x104>
 8006e54:	6808      	ldr	r0, [r1, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	6949      	ldr	r1, [r1, #20]
 8006e5a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006e5e:	d004      	beq.n	8006e6a <_printf_i+0x1aa>
 8006e60:	1d10      	adds	r0, r2, #4
 8006e62:	6018      	str	r0, [r3, #0]
 8006e64:	6813      	ldr	r3, [r2, #0]
 8006e66:	6019      	str	r1, [r3, #0]
 8006e68:	e007      	b.n	8006e7a <_printf_i+0x1ba>
 8006e6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e6e:	f102 0004 	add.w	r0, r2, #4
 8006e72:	6018      	str	r0, [r3, #0]
 8006e74:	6813      	ldr	r3, [r2, #0]
 8006e76:	d0f6      	beq.n	8006e66 <_printf_i+0x1a6>
 8006e78:	8019      	strh	r1, [r3, #0]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	4675      	mov	r5, lr
 8006e80:	e7b1      	b.n	8006de6 <_printf_i+0x126>
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	1d11      	adds	r1, r2, #4
 8006e86:	6019      	str	r1, [r3, #0]
 8006e88:	6815      	ldr	r5, [r2, #0]
 8006e8a:	6862      	ldr	r2, [r4, #4]
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f7f9 f9ae 	bl	80001f0 <memchr>
 8006e94:	b108      	cbz	r0, 8006e9a <_printf_i+0x1da>
 8006e96:	1b40      	subs	r0, r0, r5
 8006e98:	6060      	str	r0, [r4, #4]
 8006e9a:	6863      	ldr	r3, [r4, #4]
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea4:	e79f      	b.n	8006de6 <_printf_i+0x126>
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	4639      	mov	r1, r7
 8006eac:	4630      	mov	r0, r6
 8006eae:	47c0      	blx	r8
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d0a2      	beq.n	8006dfa <_printf_i+0x13a>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	079b      	lsls	r3, r3, #30
 8006eb8:	d507      	bpl.n	8006eca <_printf_i+0x20a>
 8006eba:	2500      	movs	r5, #0
 8006ebc:	f104 0919 	add.w	r9, r4, #25
 8006ec0:	68e3      	ldr	r3, [r4, #12]
 8006ec2:	9a03      	ldr	r2, [sp, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	429d      	cmp	r5, r3
 8006ec8:	db05      	blt.n	8006ed6 <_printf_i+0x216>
 8006eca:	68e0      	ldr	r0, [r4, #12]
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	4298      	cmp	r0, r3
 8006ed0:	bfb8      	it	lt
 8006ed2:	4618      	movlt	r0, r3
 8006ed4:	e793      	b.n	8006dfe <_printf_i+0x13e>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	464a      	mov	r2, r9
 8006eda:	4639      	mov	r1, r7
 8006edc:	4630      	mov	r0, r6
 8006ede:	47c0      	blx	r8
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d08a      	beq.n	8006dfa <_printf_i+0x13a>
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	e7eb      	b.n	8006ec0 <_printf_i+0x200>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1a7      	bne.n	8006e3c <_printf_i+0x17c>
 8006eec:	780b      	ldrb	r3, [r1, #0]
 8006eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef6:	e765      	b.n	8006dc4 <_printf_i+0x104>
 8006ef8:	080087e0 	.word	0x080087e0
 8006efc:	080087cf 	.word	0x080087cf

08006f00 <__ascii_wctomb>:
 8006f00:	b149      	cbz	r1, 8006f16 <__ascii_wctomb+0x16>
 8006f02:	2aff      	cmp	r2, #255	; 0xff
 8006f04:	bf85      	ittet	hi
 8006f06:	238a      	movhi	r3, #138	; 0x8a
 8006f08:	6003      	strhi	r3, [r0, #0]
 8006f0a:	700a      	strbls	r2, [r1, #0]
 8006f0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006f10:	bf98      	it	ls
 8006f12:	2001      	movls	r0, #1
 8006f14:	4770      	bx	lr
 8006f16:	4608      	mov	r0, r1
 8006f18:	4770      	bx	lr

08006f1a <memcpy>:
 8006f1a:	b510      	push	{r4, lr}
 8006f1c:	1e43      	subs	r3, r0, #1
 8006f1e:	440a      	add	r2, r1
 8006f20:	4291      	cmp	r1, r2
 8006f22:	d100      	bne.n	8006f26 <memcpy+0xc>
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2e:	e7f7      	b.n	8006f20 <memcpy+0x6>

08006f30 <memmove>:
 8006f30:	4288      	cmp	r0, r1
 8006f32:	b510      	push	{r4, lr}
 8006f34:	eb01 0302 	add.w	r3, r1, r2
 8006f38:	d803      	bhi.n	8006f42 <memmove+0x12>
 8006f3a:	1e42      	subs	r2, r0, #1
 8006f3c:	4299      	cmp	r1, r3
 8006f3e:	d10c      	bne.n	8006f5a <memmove+0x2a>
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	4298      	cmp	r0, r3
 8006f44:	d2f9      	bcs.n	8006f3a <memmove+0xa>
 8006f46:	1881      	adds	r1, r0, r2
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	42d3      	cmn	r3, r2
 8006f4c:	d100      	bne.n	8006f50 <memmove+0x20>
 8006f4e:	bd10      	pop	{r4, pc}
 8006f50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f58:	e7f7      	b.n	8006f4a <memmove+0x1a>
 8006f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f62:	e7eb      	b.n	8006f3c <memmove+0xc>

08006f64 <_free_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4605      	mov	r5, r0
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	d045      	beq.n	8006ff8 <_free_r+0x94>
 8006f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f70:	1f0c      	subs	r4, r1, #4
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bfb8      	it	lt
 8006f76:	18e4      	addlt	r4, r4, r3
 8006f78:	f000 f8d6 	bl	8007128 <__malloc_lock>
 8006f7c:	4a1f      	ldr	r2, [pc, #124]	; (8006ffc <_free_r+0x98>)
 8006f7e:	6813      	ldr	r3, [r2, #0]
 8006f80:	4610      	mov	r0, r2
 8006f82:	b933      	cbnz	r3, 8006f92 <_free_r+0x2e>
 8006f84:	6063      	str	r3, [r4, #4]
 8006f86:	6014      	str	r4, [r2, #0]
 8006f88:	4628      	mov	r0, r5
 8006f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f8e:	f000 b8cc 	b.w	800712a <__malloc_unlock>
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	d90c      	bls.n	8006fb0 <_free_r+0x4c>
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	1862      	adds	r2, r4, r1
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	bf04      	itt	eq
 8006f9e:	681a      	ldreq	r2, [r3, #0]
 8006fa0:	685b      	ldreq	r3, [r3, #4]
 8006fa2:	6063      	str	r3, [r4, #4]
 8006fa4:	bf04      	itt	eq
 8006fa6:	1852      	addeq	r2, r2, r1
 8006fa8:	6022      	streq	r2, [r4, #0]
 8006faa:	6004      	str	r4, [r0, #0]
 8006fac:	e7ec      	b.n	8006f88 <_free_r+0x24>
 8006fae:	4613      	mov	r3, r2
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	b10a      	cbz	r2, 8006fb8 <_free_r+0x54>
 8006fb4:	42a2      	cmp	r2, r4
 8006fb6:	d9fa      	bls.n	8006fae <_free_r+0x4a>
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	1858      	adds	r0, r3, r1
 8006fbc:	42a0      	cmp	r0, r4
 8006fbe:	d10b      	bne.n	8006fd8 <_free_r+0x74>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	4401      	add	r1, r0
 8006fc4:	1858      	adds	r0, r3, r1
 8006fc6:	4282      	cmp	r2, r0
 8006fc8:	6019      	str	r1, [r3, #0]
 8006fca:	d1dd      	bne.n	8006f88 <_free_r+0x24>
 8006fcc:	6810      	ldr	r0, [r2, #0]
 8006fce:	6852      	ldr	r2, [r2, #4]
 8006fd0:	605a      	str	r2, [r3, #4]
 8006fd2:	4401      	add	r1, r0
 8006fd4:	6019      	str	r1, [r3, #0]
 8006fd6:	e7d7      	b.n	8006f88 <_free_r+0x24>
 8006fd8:	d902      	bls.n	8006fe0 <_free_r+0x7c>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	e7d3      	b.n	8006f88 <_free_r+0x24>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	1821      	adds	r1, r4, r0
 8006fe4:	428a      	cmp	r2, r1
 8006fe6:	bf04      	itt	eq
 8006fe8:	6811      	ldreq	r1, [r2, #0]
 8006fea:	6852      	ldreq	r2, [r2, #4]
 8006fec:	6062      	str	r2, [r4, #4]
 8006fee:	bf04      	itt	eq
 8006ff0:	1809      	addeq	r1, r1, r0
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	605c      	str	r4, [r3, #4]
 8006ff6:	e7c7      	b.n	8006f88 <_free_r+0x24>
 8006ff8:	bd38      	pop	{r3, r4, r5, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000250 	.word	0x20000250

08007000 <_malloc_r>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	1ccd      	adds	r5, r1, #3
 8007004:	f025 0503 	bic.w	r5, r5, #3
 8007008:	3508      	adds	r5, #8
 800700a:	2d0c      	cmp	r5, #12
 800700c:	bf38      	it	cc
 800700e:	250c      	movcc	r5, #12
 8007010:	2d00      	cmp	r5, #0
 8007012:	4606      	mov	r6, r0
 8007014:	db01      	blt.n	800701a <_malloc_r+0x1a>
 8007016:	42a9      	cmp	r1, r5
 8007018:	d903      	bls.n	8007022 <_malloc_r+0x22>
 800701a:	230c      	movs	r3, #12
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	2000      	movs	r0, #0
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	f000 f881 	bl	8007128 <__malloc_lock>
 8007026:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <_malloc_r+0xb4>)
 8007028:	6814      	ldr	r4, [r2, #0]
 800702a:	4621      	mov	r1, r4
 800702c:	b991      	cbnz	r1, 8007054 <_malloc_r+0x54>
 800702e:	4c22      	ldr	r4, [pc, #136]	; (80070b8 <_malloc_r+0xb8>)
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	b91b      	cbnz	r3, 800703c <_malloc_r+0x3c>
 8007034:	4630      	mov	r0, r6
 8007036:	f000 f867 	bl	8007108 <_sbrk_r>
 800703a:	6020      	str	r0, [r4, #0]
 800703c:	4629      	mov	r1, r5
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f862 	bl	8007108 <_sbrk_r>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d126      	bne.n	8007096 <_malloc_r+0x96>
 8007048:	230c      	movs	r3, #12
 800704a:	6033      	str	r3, [r6, #0]
 800704c:	4630      	mov	r0, r6
 800704e:	f000 f86c 	bl	800712a <__malloc_unlock>
 8007052:	e7e4      	b.n	800701e <_malloc_r+0x1e>
 8007054:	680b      	ldr	r3, [r1, #0]
 8007056:	1b5b      	subs	r3, r3, r5
 8007058:	d41a      	bmi.n	8007090 <_malloc_r+0x90>
 800705a:	2b0b      	cmp	r3, #11
 800705c:	d90f      	bls.n	800707e <_malloc_r+0x7e>
 800705e:	600b      	str	r3, [r1, #0]
 8007060:	50cd      	str	r5, [r1, r3]
 8007062:	18cc      	adds	r4, r1, r3
 8007064:	4630      	mov	r0, r6
 8007066:	f000 f860 	bl	800712a <__malloc_unlock>
 800706a:	f104 000b 	add.w	r0, r4, #11
 800706e:	1d23      	adds	r3, r4, #4
 8007070:	f020 0007 	bic.w	r0, r0, #7
 8007074:	1ac3      	subs	r3, r0, r3
 8007076:	d01b      	beq.n	80070b0 <_malloc_r+0xb0>
 8007078:	425a      	negs	r2, r3
 800707a:	50e2      	str	r2, [r4, r3]
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	428c      	cmp	r4, r1
 8007080:	bf0d      	iteet	eq
 8007082:	6863      	ldreq	r3, [r4, #4]
 8007084:	684b      	ldrne	r3, [r1, #4]
 8007086:	6063      	strne	r3, [r4, #4]
 8007088:	6013      	streq	r3, [r2, #0]
 800708a:	bf18      	it	ne
 800708c:	460c      	movne	r4, r1
 800708e:	e7e9      	b.n	8007064 <_malloc_r+0x64>
 8007090:	460c      	mov	r4, r1
 8007092:	6849      	ldr	r1, [r1, #4]
 8007094:	e7ca      	b.n	800702c <_malloc_r+0x2c>
 8007096:	1cc4      	adds	r4, r0, #3
 8007098:	f024 0403 	bic.w	r4, r4, #3
 800709c:	42a0      	cmp	r0, r4
 800709e:	d005      	beq.n	80070ac <_malloc_r+0xac>
 80070a0:	1a21      	subs	r1, r4, r0
 80070a2:	4630      	mov	r0, r6
 80070a4:	f000 f830 	bl	8007108 <_sbrk_r>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d0cd      	beq.n	8007048 <_malloc_r+0x48>
 80070ac:	6025      	str	r5, [r4, #0]
 80070ae:	e7d9      	b.n	8007064 <_malloc_r+0x64>
 80070b0:	bd70      	pop	{r4, r5, r6, pc}
 80070b2:	bf00      	nop
 80070b4:	20000250 	.word	0x20000250
 80070b8:	20000254 	.word	0x20000254

080070bc <_realloc_r>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	4607      	mov	r7, r0
 80070c0:	4614      	mov	r4, r2
 80070c2:	460e      	mov	r6, r1
 80070c4:	b921      	cbnz	r1, 80070d0 <_realloc_r+0x14>
 80070c6:	4611      	mov	r1, r2
 80070c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070cc:	f7ff bf98 	b.w	8007000 <_malloc_r>
 80070d0:	b922      	cbnz	r2, 80070dc <_realloc_r+0x20>
 80070d2:	f7ff ff47 	bl	8006f64 <_free_r>
 80070d6:	4625      	mov	r5, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070dc:	f000 f826 	bl	800712c <_malloc_usable_size_r>
 80070e0:	4284      	cmp	r4, r0
 80070e2:	d90f      	bls.n	8007104 <_realloc_r+0x48>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4638      	mov	r0, r7
 80070e8:	f7ff ff8a 	bl	8007000 <_malloc_r>
 80070ec:	4605      	mov	r5, r0
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d0f2      	beq.n	80070d8 <_realloc_r+0x1c>
 80070f2:	4631      	mov	r1, r6
 80070f4:	4622      	mov	r2, r4
 80070f6:	f7ff ff10 	bl	8006f1a <memcpy>
 80070fa:	4631      	mov	r1, r6
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7ff ff31 	bl	8006f64 <_free_r>
 8007102:	e7e9      	b.n	80070d8 <_realloc_r+0x1c>
 8007104:	4635      	mov	r5, r6
 8007106:	e7e7      	b.n	80070d8 <_realloc_r+0x1c>

08007108 <_sbrk_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4c06      	ldr	r4, [pc, #24]	; (8007124 <_sbrk_r+0x1c>)
 800710c:	2300      	movs	r3, #0
 800710e:	4605      	mov	r5, r0
 8007110:	4608      	mov	r0, r1
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	f7fb ff16 	bl	8002f44 <_sbrk>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_sbrk_r+0x1a>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	b103      	cbz	r3, 8007122 <_sbrk_r+0x1a>
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	200007b0 	.word	0x200007b0

08007128 <__malloc_lock>:
 8007128:	4770      	bx	lr

0800712a <__malloc_unlock>:
 800712a:	4770      	bx	lr

0800712c <_malloc_usable_size_r>:
 800712c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007130:	2800      	cmp	r0, #0
 8007132:	f1a0 0004 	sub.w	r0, r0, #4
 8007136:	bfbc      	itt	lt
 8007138:	580b      	ldrlt	r3, [r1, r0]
 800713a:	18c0      	addlt	r0, r0, r3
 800713c:	4770      	bx	lr
	...

08007140 <atan>:
 8007140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ec55 4b10 	vmov	r4, r5, d0
 8007148:	4bc7      	ldr	r3, [pc, #796]	; (8007468 <atan+0x328>)
 800714a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800714e:	429e      	cmp	r6, r3
 8007150:	46ab      	mov	fp, r5
 8007152:	dd18      	ble.n	8007186 <atan+0x46>
 8007154:	4ac5      	ldr	r2, [pc, #788]	; (800746c <atan+0x32c>)
 8007156:	4296      	cmp	r6, r2
 8007158:	dc01      	bgt.n	800715e <atan+0x1e>
 800715a:	d109      	bne.n	8007170 <atan+0x30>
 800715c:	b144      	cbz	r4, 8007170 <atan+0x30>
 800715e:	4622      	mov	r2, r4
 8007160:	462b      	mov	r3, r5
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	f7f9 f899 	bl	800029c <__adddf3>
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	e006      	b.n	800717e <atan+0x3e>
 8007170:	f1bb 0f00 	cmp.w	fp, #0
 8007174:	f300 813a 	bgt.w	80073ec <atan+0x2ac>
 8007178:	a59f      	add	r5, pc, #636	; (adr r5, 80073f8 <atan+0x2b8>)
 800717a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800717e:	ec45 4b10 	vmov	d0, r4, r5
 8007182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	4bba      	ldr	r3, [pc, #744]	; (8007470 <atan+0x330>)
 8007188:	429e      	cmp	r6, r3
 800718a:	dc14      	bgt.n	80071b6 <atan+0x76>
 800718c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007190:	429e      	cmp	r6, r3
 8007192:	dc0d      	bgt.n	80071b0 <atan+0x70>
 8007194:	a39a      	add	r3, pc, #616	; (adr r3, 8007400 <atan+0x2c0>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	ee10 0a10 	vmov	r0, s0
 800719e:	4629      	mov	r1, r5
 80071a0:	f7f9 f87c 	bl	800029c <__adddf3>
 80071a4:	2200      	movs	r2, #0
 80071a6:	4bb3      	ldr	r3, [pc, #716]	; (8007474 <atan+0x334>)
 80071a8:	f7f9 fcba 	bl	8000b20 <__aeabi_dcmpgt>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d1e6      	bne.n	800717e <atan+0x3e>
 80071b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80071b4:	e02b      	b.n	800720e <atan+0xce>
 80071b6:	f000 f96b 	bl	8007490 <fabs>
 80071ba:	4baf      	ldr	r3, [pc, #700]	; (8007478 <atan+0x338>)
 80071bc:	429e      	cmp	r6, r3
 80071be:	ec55 4b10 	vmov	r4, r5, d0
 80071c2:	f300 80bf 	bgt.w	8007344 <atan+0x204>
 80071c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80071ca:	429e      	cmp	r6, r3
 80071cc:	f300 80a0 	bgt.w	8007310 <atan+0x1d0>
 80071d0:	ee10 2a10 	vmov	r2, s0
 80071d4:	ee10 0a10 	vmov	r0, s0
 80071d8:	462b      	mov	r3, r5
 80071da:	4629      	mov	r1, r5
 80071dc:	f7f9 f85e 	bl	800029c <__adddf3>
 80071e0:	2200      	movs	r2, #0
 80071e2:	4ba4      	ldr	r3, [pc, #656]	; (8007474 <atan+0x334>)
 80071e4:	f7f9 f858 	bl	8000298 <__aeabi_dsub>
 80071e8:	2200      	movs	r2, #0
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071f2:	4620      	mov	r0, r4
 80071f4:	4629      	mov	r1, r5
 80071f6:	f7f9 f851 	bl	800029c <__adddf3>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4630      	mov	r0, r6
 8007200:	4639      	mov	r1, r7
 8007202:	f7f9 fb27 	bl	8000854 <__aeabi_ddiv>
 8007206:	f04f 0a00 	mov.w	sl, #0
 800720a:	4604      	mov	r4, r0
 800720c:	460d      	mov	r5, r1
 800720e:	4622      	mov	r2, r4
 8007210:	462b      	mov	r3, r5
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 f9f3 	bl	8000600 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	f7f9 f9ed 	bl	8000600 <__aeabi_dmul>
 8007226:	a378      	add	r3, pc, #480	; (adr r3, 8007408 <atan+0x2c8>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	4606      	mov	r6, r0
 800722e:	460f      	mov	r7, r1
 8007230:	f7f9 f9e6 	bl	8000600 <__aeabi_dmul>
 8007234:	a376      	add	r3, pc, #472	; (adr r3, 8007410 <atan+0x2d0>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f9 f82f 	bl	800029c <__adddf3>
 800723e:	4632      	mov	r2, r6
 8007240:	463b      	mov	r3, r7
 8007242:	f7f9 f9dd 	bl	8000600 <__aeabi_dmul>
 8007246:	a374      	add	r3, pc, #464	; (adr r3, 8007418 <atan+0x2d8>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 f826 	bl	800029c <__adddf3>
 8007250:	4632      	mov	r2, r6
 8007252:	463b      	mov	r3, r7
 8007254:	f7f9 f9d4 	bl	8000600 <__aeabi_dmul>
 8007258:	a371      	add	r3, pc, #452	; (adr r3, 8007420 <atan+0x2e0>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f81d 	bl	800029c <__adddf3>
 8007262:	4632      	mov	r2, r6
 8007264:	463b      	mov	r3, r7
 8007266:	f7f9 f9cb 	bl	8000600 <__aeabi_dmul>
 800726a:	a36f      	add	r3, pc, #444	; (adr r3, 8007428 <atan+0x2e8>)
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f7f9 f814 	bl	800029c <__adddf3>
 8007274:	4632      	mov	r2, r6
 8007276:	463b      	mov	r3, r7
 8007278:	f7f9 f9c2 	bl	8000600 <__aeabi_dmul>
 800727c:	a36c      	add	r3, pc, #432	; (adr r3, 8007430 <atan+0x2f0>)
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	f7f9 f80b 	bl	800029c <__adddf3>
 8007286:	4642      	mov	r2, r8
 8007288:	464b      	mov	r3, r9
 800728a:	f7f9 f9b9 	bl	8000600 <__aeabi_dmul>
 800728e:	a36a      	add	r3, pc, #424	; (adr r3, 8007438 <atan+0x2f8>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	4680      	mov	r8, r0
 8007296:	4689      	mov	r9, r1
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	f7f9 f9b0 	bl	8000600 <__aeabi_dmul>
 80072a0:	a367      	add	r3, pc, #412	; (adr r3, 8007440 <atan+0x300>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f8 fff7 	bl	8000298 <__aeabi_dsub>
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	f7f9 f9a7 	bl	8000600 <__aeabi_dmul>
 80072b2:	a365      	add	r3, pc, #404	; (adr r3, 8007448 <atan+0x308>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f7f8 ffee 	bl	8000298 <__aeabi_dsub>
 80072bc:	4632      	mov	r2, r6
 80072be:	463b      	mov	r3, r7
 80072c0:	f7f9 f99e 	bl	8000600 <__aeabi_dmul>
 80072c4:	a362      	add	r3, pc, #392	; (adr r3, 8007450 <atan+0x310>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f7f8 ffe5 	bl	8000298 <__aeabi_dsub>
 80072ce:	4632      	mov	r2, r6
 80072d0:	463b      	mov	r3, r7
 80072d2:	f7f9 f995 	bl	8000600 <__aeabi_dmul>
 80072d6:	a360      	add	r3, pc, #384	; (adr r3, 8007458 <atan+0x318>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f8 ffdc 	bl	8000298 <__aeabi_dsub>
 80072e0:	4632      	mov	r2, r6
 80072e2:	463b      	mov	r3, r7
 80072e4:	f7f9 f98c 	bl	8000600 <__aeabi_dmul>
 80072e8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	d155      	bne.n	800739e <atan+0x25e>
 80072f2:	4640      	mov	r0, r8
 80072f4:	4649      	mov	r1, r9
 80072f6:	f7f8 ffd1 	bl	800029c <__adddf3>
 80072fa:	4622      	mov	r2, r4
 80072fc:	462b      	mov	r3, r5
 80072fe:	f7f9 f97f 	bl	8000600 <__aeabi_dmul>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f8 ffc5 	bl	8000298 <__aeabi_dsub>
 800730e:	e72c      	b.n	800716a <atan+0x2a>
 8007310:	ee10 0a10 	vmov	r0, s0
 8007314:	2200      	movs	r2, #0
 8007316:	4b57      	ldr	r3, [pc, #348]	; (8007474 <atan+0x334>)
 8007318:	4629      	mov	r1, r5
 800731a:	f7f8 ffbd 	bl	8000298 <__aeabi_dsub>
 800731e:	2200      	movs	r2, #0
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	4b53      	ldr	r3, [pc, #332]	; (8007474 <atan+0x334>)
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7f8 ffb7 	bl	800029c <__adddf3>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f9 fa8d 	bl	8000854 <__aeabi_ddiv>
 800733a:	f04f 0a01 	mov.w	sl, #1
 800733e:	4604      	mov	r4, r0
 8007340:	460d      	mov	r5, r1
 8007342:	e764      	b.n	800720e <atan+0xce>
 8007344:	4b4d      	ldr	r3, [pc, #308]	; (800747c <atan+0x33c>)
 8007346:	429e      	cmp	r6, r3
 8007348:	dc1d      	bgt.n	8007386 <atan+0x246>
 800734a:	ee10 0a10 	vmov	r0, s0
 800734e:	2200      	movs	r2, #0
 8007350:	4b4b      	ldr	r3, [pc, #300]	; (8007480 <atan+0x340>)
 8007352:	4629      	mov	r1, r5
 8007354:	f7f8 ffa0 	bl	8000298 <__aeabi_dsub>
 8007358:	2200      	movs	r2, #0
 800735a:	4606      	mov	r6, r0
 800735c:	460f      	mov	r7, r1
 800735e:	4b48      	ldr	r3, [pc, #288]	; (8007480 <atan+0x340>)
 8007360:	4620      	mov	r0, r4
 8007362:	4629      	mov	r1, r5
 8007364:	f7f9 f94c 	bl	8000600 <__aeabi_dmul>
 8007368:	2200      	movs	r2, #0
 800736a:	4b42      	ldr	r3, [pc, #264]	; (8007474 <atan+0x334>)
 800736c:	f7f8 ff96 	bl	800029c <__adddf3>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 fa6c 	bl	8000854 <__aeabi_ddiv>
 800737c:	f04f 0a02 	mov.w	sl, #2
 8007380:	4604      	mov	r4, r0
 8007382:	460d      	mov	r5, r1
 8007384:	e743      	b.n	800720e <atan+0xce>
 8007386:	462b      	mov	r3, r5
 8007388:	ee10 2a10 	vmov	r2, s0
 800738c:	2000      	movs	r0, #0
 800738e:	493d      	ldr	r1, [pc, #244]	; (8007484 <atan+0x344>)
 8007390:	f7f9 fa60 	bl	8000854 <__aeabi_ddiv>
 8007394:	f04f 0a03 	mov.w	sl, #3
 8007398:	4604      	mov	r4, r0
 800739a:	460d      	mov	r5, r1
 800739c:	e737      	b.n	800720e <atan+0xce>
 800739e:	4640      	mov	r0, r8
 80073a0:	4649      	mov	r1, r9
 80073a2:	f7f8 ff7b 	bl	800029c <__adddf3>
 80073a6:	4622      	mov	r2, r4
 80073a8:	462b      	mov	r3, r5
 80073aa:	f7f9 f929 	bl	8000600 <__aeabi_dmul>
 80073ae:	4e36      	ldr	r6, [pc, #216]	; (8007488 <atan+0x348>)
 80073b0:	4b36      	ldr	r3, [pc, #216]	; (800748c <atan+0x34c>)
 80073b2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80073b6:	4456      	add	r6, sl
 80073b8:	449a      	add	sl, r3
 80073ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80073be:	f7f8 ff6b 	bl	8000298 <__aeabi_dsub>
 80073c2:	4622      	mov	r2, r4
 80073c4:	462b      	mov	r3, r5
 80073c6:	f7f8 ff67 	bl	8000298 <__aeabi_dsub>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80073d2:	f7f8 ff61 	bl	8000298 <__aeabi_dsub>
 80073d6:	f1bb 0f00 	cmp.w	fp, #0
 80073da:	4604      	mov	r4, r0
 80073dc:	460d      	mov	r5, r1
 80073de:	f6bf aece 	bge.w	800717e <atan+0x3e>
 80073e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073e6:	4604      	mov	r4, r0
 80073e8:	461d      	mov	r5, r3
 80073ea:	e6c8      	b.n	800717e <atan+0x3e>
 80073ec:	a51c      	add	r5, pc, #112	; (adr r5, 8007460 <atan+0x320>)
 80073ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 80073f2:	e6c4      	b.n	800717e <atan+0x3e>
 80073f4:	f3af 8000 	nop.w
 80073f8:	54442d18 	.word	0x54442d18
 80073fc:	bff921fb 	.word	0xbff921fb
 8007400:	8800759c 	.word	0x8800759c
 8007404:	7e37e43c 	.word	0x7e37e43c
 8007408:	e322da11 	.word	0xe322da11
 800740c:	3f90ad3a 	.word	0x3f90ad3a
 8007410:	24760deb 	.word	0x24760deb
 8007414:	3fa97b4b 	.word	0x3fa97b4b
 8007418:	a0d03d51 	.word	0xa0d03d51
 800741c:	3fb10d66 	.word	0x3fb10d66
 8007420:	c54c206e 	.word	0xc54c206e
 8007424:	3fb745cd 	.word	0x3fb745cd
 8007428:	920083ff 	.word	0x920083ff
 800742c:	3fc24924 	.word	0x3fc24924
 8007430:	5555550d 	.word	0x5555550d
 8007434:	3fd55555 	.word	0x3fd55555
 8007438:	2c6a6c2f 	.word	0x2c6a6c2f
 800743c:	bfa2b444 	.word	0xbfa2b444
 8007440:	52defd9a 	.word	0x52defd9a
 8007444:	3fadde2d 	.word	0x3fadde2d
 8007448:	af749a6d 	.word	0xaf749a6d
 800744c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007450:	fe231671 	.word	0xfe231671
 8007454:	3fbc71c6 	.word	0x3fbc71c6
 8007458:	9998ebc4 	.word	0x9998ebc4
 800745c:	3fc99999 	.word	0x3fc99999
 8007460:	54442d18 	.word	0x54442d18
 8007464:	3ff921fb 	.word	0x3ff921fb
 8007468:	440fffff 	.word	0x440fffff
 800746c:	7ff00000 	.word	0x7ff00000
 8007470:	3fdbffff 	.word	0x3fdbffff
 8007474:	3ff00000 	.word	0x3ff00000
 8007478:	3ff2ffff 	.word	0x3ff2ffff
 800747c:	40037fff 	.word	0x40037fff
 8007480:	3ff80000 	.word	0x3ff80000
 8007484:	bff00000 	.word	0xbff00000
 8007488:	080088f8 	.word	0x080088f8
 800748c:	08008918 	.word	0x08008918

08007490 <fabs>:
 8007490:	ec53 2b10 	vmov	r2, r3, d0
 8007494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007498:	ec43 2b10 	vmov	d0, r2, r3
 800749c:	4770      	bx	lr
	...

080074a0 <pow>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	ed2d 8b04 	vpush	{d8-d9}
 80074a8:	b08d      	sub	sp, #52	; 0x34
 80074aa:	ec57 6b10 	vmov	r6, r7, d0
 80074ae:	ec55 4b11 	vmov	r4, r5, d1
 80074b2:	f000 f9c9 	bl	8007848 <__ieee754_pow>
 80074b6:	4bae      	ldr	r3, [pc, #696]	; (8007770 <pow+0x2d0>)
 80074b8:	eeb0 8a40 	vmov.f32	s16, s0
 80074bc:	eef0 8a60 	vmov.f32	s17, s1
 80074c0:	f993 9000 	ldrsb.w	r9, [r3]
 80074c4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80074c8:	4698      	mov	r8, r3
 80074ca:	d05f      	beq.n	800758c <pow+0xec>
 80074cc:	4622      	mov	r2, r4
 80074ce:	462b      	mov	r3, r5
 80074d0:	4620      	mov	r0, r4
 80074d2:	4629      	mov	r1, r5
 80074d4:	f7f9 fb2e 	bl	8000b34 <__aeabi_dcmpun>
 80074d8:	4683      	mov	fp, r0
 80074da:	2800      	cmp	r0, #0
 80074dc:	d156      	bne.n	800758c <pow+0xec>
 80074de:	4632      	mov	r2, r6
 80074e0:	463b      	mov	r3, r7
 80074e2:	4630      	mov	r0, r6
 80074e4:	4639      	mov	r1, r7
 80074e6:	f7f9 fb25 	bl	8000b34 <__aeabi_dcmpun>
 80074ea:	9001      	str	r0, [sp, #4]
 80074ec:	b1e8      	cbz	r0, 800752a <pow+0x8a>
 80074ee:	2200      	movs	r2, #0
 80074f0:	2300      	movs	r3, #0
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 faeb 	bl	8000ad0 <__aeabi_dcmpeq>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d046      	beq.n	800758c <pow+0xec>
 80074fe:	2301      	movs	r3, #1
 8007500:	9302      	str	r3, [sp, #8]
 8007502:	4b9c      	ldr	r3, [pc, #624]	; (8007774 <pow+0x2d4>)
 8007504:	9303      	str	r3, [sp, #12]
 8007506:	4b9c      	ldr	r3, [pc, #624]	; (8007778 <pow+0x2d8>)
 8007508:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800750c:	2200      	movs	r2, #0
 800750e:	f1b9 0f02 	cmp.w	r9, #2
 8007512:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007516:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800751a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800751e:	d033      	beq.n	8007588 <pow+0xe8>
 8007520:	a802      	add	r0, sp, #8
 8007522:	f000 ff5b 	bl	80083dc <matherr>
 8007526:	bb48      	cbnz	r0, 800757c <pow+0xdc>
 8007528:	e05e      	b.n	80075e8 <pow+0x148>
 800752a:	f04f 0a00 	mov.w	sl, #0
 800752e:	f04f 0b00 	mov.w	fp, #0
 8007532:	4652      	mov	r2, sl
 8007534:	465b      	mov	r3, fp
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	f7f9 fac9 	bl	8000ad0 <__aeabi_dcmpeq>
 800753e:	ec4b ab19 	vmov	d9, sl, fp
 8007542:	2800      	cmp	r0, #0
 8007544:	d055      	beq.n	80075f2 <pow+0x152>
 8007546:	4652      	mov	r2, sl
 8007548:	465b      	mov	r3, fp
 800754a:	4620      	mov	r0, r4
 800754c:	4629      	mov	r1, r5
 800754e:	f7f9 fabf 	bl	8000ad0 <__aeabi_dcmpeq>
 8007552:	4680      	mov	r8, r0
 8007554:	b318      	cbz	r0, 800759e <pow+0xfe>
 8007556:	2301      	movs	r3, #1
 8007558:	9302      	str	r3, [sp, #8]
 800755a:	4b86      	ldr	r3, [pc, #536]	; (8007774 <pow+0x2d4>)
 800755c:	9303      	str	r3, [sp, #12]
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	930a      	str	r3, [sp, #40]	; 0x28
 8007562:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007566:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800756a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800756e:	f1b9 0f00 	cmp.w	r9, #0
 8007572:	d0d5      	beq.n	8007520 <pow+0x80>
 8007574:	4b80      	ldr	r3, [pc, #512]	; (8007778 <pow+0x2d8>)
 8007576:	2200      	movs	r2, #0
 8007578:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800757c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757e:	b11b      	cbz	r3, 8007588 <pow+0xe8>
 8007580:	f7ff f8d8 	bl	8006734 <__errno>
 8007584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007586:	6003      	str	r3, [r0, #0]
 8007588:	ed9d 8b08 	vldr	d8, [sp, #32]
 800758c:	eeb0 0a48 	vmov.f32	s0, s16
 8007590:	eef0 0a68 	vmov.f32	s1, s17
 8007594:	b00d      	add	sp, #52	; 0x34
 8007596:	ecbd 8b04 	vpop	{d8-d9}
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	ec45 4b10 	vmov	d0, r4, r5
 80075a2:	f000 ff13 	bl	80083cc <finite>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0f0      	beq.n	800758c <pow+0xec>
 80075aa:	4652      	mov	r2, sl
 80075ac:	465b      	mov	r3, fp
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 fa97 	bl	8000ae4 <__aeabi_dcmplt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d0e8      	beq.n	800758c <pow+0xec>
 80075ba:	2301      	movs	r3, #1
 80075bc:	9302      	str	r3, [sp, #8]
 80075be:	4b6d      	ldr	r3, [pc, #436]	; (8007774 <pow+0x2d4>)
 80075c0:	9303      	str	r3, [sp, #12]
 80075c2:	4b6b      	ldr	r3, [pc, #428]	; (8007770 <pow+0x2d0>)
 80075c4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80075c8:	f993 3000 	ldrsb.w	r3, [r3]
 80075cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80075d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80075d4:	b913      	cbnz	r3, 80075dc <pow+0x13c>
 80075d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80075da:	e7a1      	b.n	8007520 <pow+0x80>
 80075dc:	4967      	ldr	r1, [pc, #412]	; (800777c <pow+0x2dc>)
 80075de:	2000      	movs	r0, #0
 80075e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d19b      	bne.n	8007520 <pow+0x80>
 80075e8:	f7ff f8a4 	bl	8006734 <__errno>
 80075ec:	2321      	movs	r3, #33	; 0x21
 80075ee:	6003      	str	r3, [r0, #0]
 80075f0:	e7c4      	b.n	800757c <pow+0xdc>
 80075f2:	eeb0 0a48 	vmov.f32	s0, s16
 80075f6:	eef0 0a68 	vmov.f32	s1, s17
 80075fa:	f000 fee7 	bl	80083cc <finite>
 80075fe:	9001      	str	r0, [sp, #4]
 8007600:	2800      	cmp	r0, #0
 8007602:	f040 808a 	bne.w	800771a <pow+0x27a>
 8007606:	ec47 6b10 	vmov	d0, r6, r7
 800760a:	f000 fedf 	bl	80083cc <finite>
 800760e:	2800      	cmp	r0, #0
 8007610:	f000 8083 	beq.w	800771a <pow+0x27a>
 8007614:	ec45 4b10 	vmov	d0, r4, r5
 8007618:	f000 fed8 	bl	80083cc <finite>
 800761c:	2800      	cmp	r0, #0
 800761e:	d07c      	beq.n	800771a <pow+0x27a>
 8007620:	ec53 2b18 	vmov	r2, r3, d8
 8007624:	ee18 0a10 	vmov	r0, s16
 8007628:	4619      	mov	r1, r3
 800762a:	f7f9 fa83 	bl	8000b34 <__aeabi_dcmpun>
 800762e:	f998 9000 	ldrsb.w	r9, [r8]
 8007632:	4b50      	ldr	r3, [pc, #320]	; (8007774 <pow+0x2d4>)
 8007634:	b1b0      	cbz	r0, 8007664 <pow+0x1c4>
 8007636:	2201      	movs	r2, #1
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	9b01      	ldr	r3, [sp, #4]
 800763c:	9202      	str	r2, [sp, #8]
 800763e:	930a      	str	r3, [sp, #40]	; 0x28
 8007640:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007644:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007648:	f1b9 0f00 	cmp.w	r9, #0
 800764c:	d0c3      	beq.n	80075d6 <pow+0x136>
 800764e:	4652      	mov	r2, sl
 8007650:	465b      	mov	r3, fp
 8007652:	4650      	mov	r0, sl
 8007654:	4659      	mov	r1, fp
 8007656:	f7f9 f8fd 	bl	8000854 <__aeabi_ddiv>
 800765a:	f1b9 0f02 	cmp.w	r9, #2
 800765e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007662:	e7c0      	b.n	80075e6 <pow+0x146>
 8007664:	2203      	movs	r2, #3
 8007666:	9202      	str	r2, [sp, #8]
 8007668:	9303      	str	r3, [sp, #12]
 800766a:	900a      	str	r0, [sp, #40]	; 0x28
 800766c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007670:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007674:	f1b9 0f00 	cmp.w	r9, #0
 8007678:	d12c      	bne.n	80076d4 <pow+0x234>
 800767a:	4b41      	ldr	r3, [pc, #260]	; (8007780 <pow+0x2e0>)
 800767c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007684:	4630      	mov	r0, r6
 8007686:	4652      	mov	r2, sl
 8007688:	465b      	mov	r3, fp
 800768a:	4639      	mov	r1, r7
 800768c:	f7f9 fa2a 	bl	8000ae4 <__aeabi_dcmplt>
 8007690:	2800      	cmp	r0, #0
 8007692:	d066      	beq.n	8007762 <pow+0x2c2>
 8007694:	2200      	movs	r2, #0
 8007696:	4b3b      	ldr	r3, [pc, #236]	; (8007784 <pow+0x2e4>)
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f8 ffb0 	bl	8000600 <__aeabi_dmul>
 80076a0:	4604      	mov	r4, r0
 80076a2:	460d      	mov	r5, r1
 80076a4:	ec45 4b10 	vmov	d0, r4, r5
 80076a8:	f000 fea2 	bl	80083f0 <rint>
 80076ac:	4620      	mov	r0, r4
 80076ae:	ec53 2b10 	vmov	r2, r3, d0
 80076b2:	4629      	mov	r1, r5
 80076b4:	f7f9 fa0c 	bl	8000ad0 <__aeabi_dcmpeq>
 80076b8:	b920      	cbnz	r0, 80076c4 <pow+0x224>
 80076ba:	4b33      	ldr	r3, [pc, #204]	; (8007788 <pow+0x2e8>)
 80076bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80076c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076c4:	f998 3000 	ldrsb.w	r3, [r8]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d14a      	bne.n	8007762 <pow+0x2c2>
 80076cc:	f7ff f832 	bl	8006734 <__errno>
 80076d0:	2322      	movs	r3, #34	; 0x22
 80076d2:	e78c      	b.n	80075ee <pow+0x14e>
 80076d4:	4b2d      	ldr	r3, [pc, #180]	; (800778c <pow+0x2ec>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076dc:	4630      	mov	r0, r6
 80076de:	4652      	mov	r2, sl
 80076e0:	465b      	mov	r3, fp
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f9 f9fe 	bl	8000ae4 <__aeabi_dcmplt>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d0eb      	beq.n	80076c4 <pow+0x224>
 80076ec:	2200      	movs	r2, #0
 80076ee:	4b25      	ldr	r3, [pc, #148]	; (8007784 <pow+0x2e4>)
 80076f0:	4620      	mov	r0, r4
 80076f2:	4629      	mov	r1, r5
 80076f4:	f7f8 ff84 	bl	8000600 <__aeabi_dmul>
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	ec45 4b10 	vmov	d0, r4, r5
 8007700:	f000 fe76 	bl	80083f0 <rint>
 8007704:	4620      	mov	r0, r4
 8007706:	ec53 2b10 	vmov	r2, r3, d0
 800770a:	4629      	mov	r1, r5
 800770c:	f7f9 f9e0 	bl	8000ad0 <__aeabi_dcmpeq>
 8007710:	2800      	cmp	r0, #0
 8007712:	d1d7      	bne.n	80076c4 <pow+0x224>
 8007714:	2200      	movs	r2, #0
 8007716:	4b19      	ldr	r3, [pc, #100]	; (800777c <pow+0x2dc>)
 8007718:	e7d2      	b.n	80076c0 <pow+0x220>
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	ec51 0b18 	vmov	r0, r1, d8
 8007722:	f7f9 f9d5 	bl	8000ad0 <__aeabi_dcmpeq>
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f af30 	beq.w	800758c <pow+0xec>
 800772c:	ec47 6b10 	vmov	d0, r6, r7
 8007730:	f000 fe4c 	bl	80083cc <finite>
 8007734:	2800      	cmp	r0, #0
 8007736:	f43f af29 	beq.w	800758c <pow+0xec>
 800773a:	ec45 4b10 	vmov	d0, r4, r5
 800773e:	f000 fe45 	bl	80083cc <finite>
 8007742:	2800      	cmp	r0, #0
 8007744:	f43f af22 	beq.w	800758c <pow+0xec>
 8007748:	2304      	movs	r3, #4
 800774a:	9302      	str	r3, [sp, #8]
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <pow+0x2d4>)
 800774e:	9303      	str	r3, [sp, #12]
 8007750:	2300      	movs	r3, #0
 8007752:	930a      	str	r3, [sp, #40]	; 0x28
 8007754:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007758:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800775c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007760:	e7b0      	b.n	80076c4 <pow+0x224>
 8007762:	a802      	add	r0, sp, #8
 8007764:	f000 fe3a 	bl	80083dc <matherr>
 8007768:	2800      	cmp	r0, #0
 800776a:	f47f af07 	bne.w	800757c <pow+0xdc>
 800776e:	e7ad      	b.n	80076cc <pow+0x22c>
 8007770:	2000020c 	.word	0x2000020c
 8007774:	08008938 	.word	0x08008938
 8007778:	3ff00000 	.word	0x3ff00000
 800777c:	fff00000 	.word	0xfff00000
 8007780:	47efffff 	.word	0x47efffff
 8007784:	3fe00000 	.word	0x3fe00000
 8007788:	c7efffff 	.word	0xc7efffff
 800778c:	7ff00000 	.word	0x7ff00000

08007790 <sqrt>:
 8007790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007794:	ed2d 8b02 	vpush	{d8}
 8007798:	b08b      	sub	sp, #44	; 0x2c
 800779a:	ec55 4b10 	vmov	r4, r5, d0
 800779e:	f000 fd65 	bl	800826c <__ieee754_sqrt>
 80077a2:	4b26      	ldr	r3, [pc, #152]	; (800783c <sqrt+0xac>)
 80077a4:	eeb0 8a40 	vmov.f32	s16, s0
 80077a8:	eef0 8a60 	vmov.f32	s17, s1
 80077ac:	f993 6000 	ldrsb.w	r6, [r3]
 80077b0:	1c73      	adds	r3, r6, #1
 80077b2:	d02a      	beq.n	800780a <sqrt+0x7a>
 80077b4:	4622      	mov	r2, r4
 80077b6:	462b      	mov	r3, r5
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f9 f9ba 	bl	8000b34 <__aeabi_dcmpun>
 80077c0:	4607      	mov	r7, r0
 80077c2:	bb10      	cbnz	r0, 800780a <sqrt+0x7a>
 80077c4:	f04f 0800 	mov.w	r8, #0
 80077c8:	f04f 0900 	mov.w	r9, #0
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f9 f986 	bl	8000ae4 <__aeabi_dcmplt>
 80077d8:	b1b8      	cbz	r0, 800780a <sqrt+0x7a>
 80077da:	2301      	movs	r3, #1
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	4b18      	ldr	r3, [pc, #96]	; (8007840 <sqrt+0xb0>)
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	9708      	str	r7, [sp, #32]
 80077e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80077e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80077ec:	b9b6      	cbnz	r6, 800781c <sqrt+0x8c>
 80077ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80077f2:	4668      	mov	r0, sp
 80077f4:	f000 fdf2 	bl	80083dc <matherr>
 80077f8:	b1d0      	cbz	r0, 8007830 <sqrt+0xa0>
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	b11b      	cbz	r3, 8007806 <sqrt+0x76>
 80077fe:	f7fe ff99 	bl	8006734 <__errno>
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	6003      	str	r3, [r0, #0]
 8007806:	ed9d 8b06 	vldr	d8, [sp, #24]
 800780a:	eeb0 0a48 	vmov.f32	s0, s16
 800780e:	eef0 0a68 	vmov.f32	s1, s17
 8007812:	b00b      	add	sp, #44	; 0x2c
 8007814:	ecbd 8b02 	vpop	{d8}
 8007818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	4640      	mov	r0, r8
 8007822:	4649      	mov	r1, r9
 8007824:	f7f9 f816 	bl	8000854 <__aeabi_ddiv>
 8007828:	2e02      	cmp	r6, #2
 800782a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800782e:	d1e0      	bne.n	80077f2 <sqrt+0x62>
 8007830:	f7fe ff80 	bl	8006734 <__errno>
 8007834:	2321      	movs	r3, #33	; 0x21
 8007836:	6003      	str	r3, [r0, #0]
 8007838:	e7df      	b.n	80077fa <sqrt+0x6a>
 800783a:	bf00      	nop
 800783c:	2000020c 	.word	0x2000020c
 8007840:	0800893c 	.word	0x0800893c
 8007844:	00000000 	.word	0x00000000

08007848 <__ieee754_pow>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	b091      	sub	sp, #68	; 0x44
 800784e:	ed8d 1b00 	vstr	d1, [sp]
 8007852:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8007856:	ec57 6b10 	vmov	r6, r7, d0
 800785a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800785e:	ea58 0302 	orrs.w	r3, r8, r2
 8007862:	ee10 aa10 	vmov	sl, s0
 8007866:	463d      	mov	r5, r7
 8007868:	f000 84bd 	beq.w	80081e6 <__ieee754_pow+0x99e>
 800786c:	4b78      	ldr	r3, [pc, #480]	; (8007a50 <__ieee754_pow+0x208>)
 800786e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007872:	429c      	cmp	r4, r3
 8007874:	dc09      	bgt.n	800788a <__ieee754_pow+0x42>
 8007876:	d103      	bne.n	8007880 <__ieee754_pow+0x38>
 8007878:	b93e      	cbnz	r6, 800788a <__ieee754_pow+0x42>
 800787a:	45a0      	cmp	r8, r4
 800787c:	dc0d      	bgt.n	800789a <__ieee754_pow+0x52>
 800787e:	e001      	b.n	8007884 <__ieee754_pow+0x3c>
 8007880:	4598      	cmp	r8, r3
 8007882:	dc02      	bgt.n	800788a <__ieee754_pow+0x42>
 8007884:	4598      	cmp	r8, r3
 8007886:	d10e      	bne.n	80078a6 <__ieee754_pow+0x5e>
 8007888:	b16a      	cbz	r2, 80078a6 <__ieee754_pow+0x5e>
 800788a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800788e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007892:	ea54 030a 	orrs.w	r3, r4, sl
 8007896:	f000 84a6 	beq.w	80081e6 <__ieee754_pow+0x99e>
 800789a:	486e      	ldr	r0, [pc, #440]	; (8007a54 <__ieee754_pow+0x20c>)
 800789c:	b011      	add	sp, #68	; 0x44
 800789e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a2:	f000 bd9d 	b.w	80083e0 <nan>
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	da53      	bge.n	8007952 <__ieee754_pow+0x10a>
 80078aa:	4b6b      	ldr	r3, [pc, #428]	; (8007a58 <__ieee754_pow+0x210>)
 80078ac:	4598      	cmp	r8, r3
 80078ae:	dc4d      	bgt.n	800794c <__ieee754_pow+0x104>
 80078b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80078b4:	4598      	cmp	r8, r3
 80078b6:	dd4c      	ble.n	8007952 <__ieee754_pow+0x10a>
 80078b8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80078c0:	2b14      	cmp	r3, #20
 80078c2:	dd26      	ble.n	8007912 <__ieee754_pow+0xca>
 80078c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80078c8:	fa22 f103 	lsr.w	r1, r2, r3
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d13e      	bne.n	8007952 <__ieee754_pow+0x10a>
 80078d4:	f001 0101 	and.w	r1, r1, #1
 80078d8:	f1c1 0b02 	rsb	fp, r1, #2
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d15b      	bne.n	8007998 <__ieee754_pow+0x150>
 80078e0:	4b5b      	ldr	r3, [pc, #364]	; (8007a50 <__ieee754_pow+0x208>)
 80078e2:	4598      	cmp	r8, r3
 80078e4:	d124      	bne.n	8007930 <__ieee754_pow+0xe8>
 80078e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80078ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80078ee:	ea53 030a 	orrs.w	r3, r3, sl
 80078f2:	f000 8478 	beq.w	80081e6 <__ieee754_pow+0x99e>
 80078f6:	4b59      	ldr	r3, [pc, #356]	; (8007a5c <__ieee754_pow+0x214>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	dd2d      	ble.n	8007958 <__ieee754_pow+0x110>
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	f280 8475 	bge.w	80081ee <__ieee754_pow+0x9a6>
 8007904:	2000      	movs	r0, #0
 8007906:	2100      	movs	r1, #0
 8007908:	ec41 0b10 	vmov	d0, r0, r1
 800790c:	b011      	add	sp, #68	; 0x44
 800790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007912:	2a00      	cmp	r2, #0
 8007914:	d13e      	bne.n	8007994 <__ieee754_pow+0x14c>
 8007916:	f1c3 0314 	rsb	r3, r3, #20
 800791a:	fa48 f103 	asr.w	r1, r8, r3
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	4598      	cmp	r8, r3
 8007924:	f040 846b 	bne.w	80081fe <__ieee754_pow+0x9b6>
 8007928:	f001 0101 	and.w	r1, r1, #1
 800792c:	f1c1 0b02 	rsb	fp, r1, #2
 8007930:	4b4b      	ldr	r3, [pc, #300]	; (8007a60 <__ieee754_pow+0x218>)
 8007932:	4598      	cmp	r8, r3
 8007934:	d118      	bne.n	8007968 <__ieee754_pow+0x120>
 8007936:	f1b9 0f00 	cmp.w	r9, #0
 800793a:	f280 845c 	bge.w	80081f6 <__ieee754_pow+0x9ae>
 800793e:	4948      	ldr	r1, [pc, #288]	; (8007a60 <__ieee754_pow+0x218>)
 8007940:	4632      	mov	r2, r6
 8007942:	463b      	mov	r3, r7
 8007944:	2000      	movs	r0, #0
 8007946:	f7f8 ff85 	bl	8000854 <__aeabi_ddiv>
 800794a:	e7dd      	b.n	8007908 <__ieee754_pow+0xc0>
 800794c:	f04f 0b02 	mov.w	fp, #2
 8007950:	e7c4      	b.n	80078dc <__ieee754_pow+0x94>
 8007952:	f04f 0b00 	mov.w	fp, #0
 8007956:	e7c1      	b.n	80078dc <__ieee754_pow+0x94>
 8007958:	f1b9 0f00 	cmp.w	r9, #0
 800795c:	dad2      	bge.n	8007904 <__ieee754_pow+0xbc>
 800795e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8007962:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007966:	e7cf      	b.n	8007908 <__ieee754_pow+0xc0>
 8007968:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800796c:	d106      	bne.n	800797c <__ieee754_pow+0x134>
 800796e:	4632      	mov	r2, r6
 8007970:	463b      	mov	r3, r7
 8007972:	4610      	mov	r0, r2
 8007974:	4619      	mov	r1, r3
 8007976:	f7f8 fe43 	bl	8000600 <__aeabi_dmul>
 800797a:	e7c5      	b.n	8007908 <__ieee754_pow+0xc0>
 800797c:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <__ieee754_pow+0x21c>)
 800797e:	4599      	cmp	r9, r3
 8007980:	d10a      	bne.n	8007998 <__ieee754_pow+0x150>
 8007982:	2d00      	cmp	r5, #0
 8007984:	db08      	blt.n	8007998 <__ieee754_pow+0x150>
 8007986:	ec47 6b10 	vmov	d0, r6, r7
 800798a:	b011      	add	sp, #68	; 0x44
 800798c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	f000 bc6c 	b.w	800826c <__ieee754_sqrt>
 8007994:	f04f 0b00 	mov.w	fp, #0
 8007998:	ec47 6b10 	vmov	d0, r6, r7
 800799c:	f7ff fd78 	bl	8007490 <fabs>
 80079a0:	ec51 0b10 	vmov	r0, r1, d0
 80079a4:	f1ba 0f00 	cmp.w	sl, #0
 80079a8:	d127      	bne.n	80079fa <__ieee754_pow+0x1b2>
 80079aa:	b124      	cbz	r4, 80079b6 <__ieee754_pow+0x16e>
 80079ac:	4b2c      	ldr	r3, [pc, #176]	; (8007a60 <__ieee754_pow+0x218>)
 80079ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d121      	bne.n	80079fa <__ieee754_pow+0x1b2>
 80079b6:	f1b9 0f00 	cmp.w	r9, #0
 80079ba:	da05      	bge.n	80079c8 <__ieee754_pow+0x180>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	2000      	movs	r0, #0
 80079c2:	4927      	ldr	r1, [pc, #156]	; (8007a60 <__ieee754_pow+0x218>)
 80079c4:	f7f8 ff46 	bl	8000854 <__aeabi_ddiv>
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	da9d      	bge.n	8007908 <__ieee754_pow+0xc0>
 80079cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80079d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80079d4:	ea54 030b 	orrs.w	r3, r4, fp
 80079d8:	d108      	bne.n	80079ec <__ieee754_pow+0x1a4>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	f7f8 fc59 	bl	8000298 <__aeabi_dsub>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	e7ac      	b.n	8007946 <__ieee754_pow+0xfe>
 80079ec:	f1bb 0f01 	cmp.w	fp, #1
 80079f0:	d18a      	bne.n	8007908 <__ieee754_pow+0xc0>
 80079f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079f6:	4619      	mov	r1, r3
 80079f8:	e786      	b.n	8007908 <__ieee754_pow+0xc0>
 80079fa:	0fed      	lsrs	r5, r5, #31
 80079fc:	1e6b      	subs	r3, r5, #1
 80079fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007a00:	ea5b 0303 	orrs.w	r3, fp, r3
 8007a04:	d102      	bne.n	8007a0c <__ieee754_pow+0x1c4>
 8007a06:	4632      	mov	r2, r6
 8007a08:	463b      	mov	r3, r7
 8007a0a:	e7e8      	b.n	80079de <__ieee754_pow+0x196>
 8007a0c:	4b16      	ldr	r3, [pc, #88]	; (8007a68 <__ieee754_pow+0x220>)
 8007a0e:	4598      	cmp	r8, r3
 8007a10:	f340 80fe 	ble.w	8007c10 <__ieee754_pow+0x3c8>
 8007a14:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007a18:	4598      	cmp	r8, r3
 8007a1a:	dd0a      	ble.n	8007a32 <__ieee754_pow+0x1ea>
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <__ieee754_pow+0x214>)
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	dc0d      	bgt.n	8007a3e <__ieee754_pow+0x1f6>
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	f6bf af6d 	bge.w	8007904 <__ieee754_pow+0xbc>
 8007a2a:	a307      	add	r3, pc, #28	; (adr r3, 8007a48 <__ieee754_pow+0x200>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	e79f      	b.n	8007972 <__ieee754_pow+0x12a>
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <__ieee754_pow+0x224>)
 8007a34:	429c      	cmp	r4, r3
 8007a36:	ddf4      	ble.n	8007a22 <__ieee754_pow+0x1da>
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <__ieee754_pow+0x218>)
 8007a3a:	429c      	cmp	r4, r3
 8007a3c:	dd18      	ble.n	8007a70 <__ieee754_pow+0x228>
 8007a3e:	f1b9 0f00 	cmp.w	r9, #0
 8007a42:	dcf2      	bgt.n	8007a2a <__ieee754_pow+0x1e2>
 8007a44:	e75e      	b.n	8007904 <__ieee754_pow+0xbc>
 8007a46:	bf00      	nop
 8007a48:	8800759c 	.word	0x8800759c
 8007a4c:	7e37e43c 	.word	0x7e37e43c
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	080087c3 	.word	0x080087c3
 8007a58:	433fffff 	.word	0x433fffff
 8007a5c:	3fefffff 	.word	0x3fefffff
 8007a60:	3ff00000 	.word	0x3ff00000
 8007a64:	3fe00000 	.word	0x3fe00000
 8007a68:	41e00000 	.word	0x41e00000
 8007a6c:	3feffffe 	.word	0x3feffffe
 8007a70:	2200      	movs	r2, #0
 8007a72:	4b63      	ldr	r3, [pc, #396]	; (8007c00 <__ieee754_pow+0x3b8>)
 8007a74:	f7f8 fc10 	bl	8000298 <__aeabi_dsub>
 8007a78:	a355      	add	r3, pc, #340	; (adr r3, 8007bd0 <__ieee754_pow+0x388>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	f7f8 fdbd 	bl	8000600 <__aeabi_dmul>
 8007a86:	a354      	add	r3, pc, #336	; (adr r3, 8007bd8 <__ieee754_pow+0x390>)
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	460f      	mov	r7, r1
 8007a90:	4620      	mov	r0, r4
 8007a92:	4629      	mov	r1, r5
 8007a94:	f7f8 fdb4 	bl	8000600 <__aeabi_dmul>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a9e:	4b59      	ldr	r3, [pc, #356]	; (8007c04 <__ieee754_pow+0x3bc>)
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f7f8 fdac 	bl	8000600 <__aeabi_dmul>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	a14c      	add	r1, pc, #304	; (adr r1, 8007be0 <__ieee754_pow+0x398>)
 8007aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab2:	f7f8 fbf1 	bl	8000298 <__aeabi_dsub>
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	462b      	mov	r3, r5
 8007aba:	f7f8 fda1 	bl	8000600 <__aeabi_dmul>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	4950      	ldr	r1, [pc, #320]	; (8007c08 <__ieee754_pow+0x3c0>)
 8007ac6:	f7f8 fbe7 	bl	8000298 <__aeabi_dsub>
 8007aca:	4622      	mov	r2, r4
 8007acc:	462b      	mov	r3, r5
 8007ace:	4680      	mov	r8, r0
 8007ad0:	4689      	mov	r9, r1
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	f7f8 fd93 	bl	8000600 <__aeabi_dmul>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f8 fd8d 	bl	8000600 <__aeabi_dmul>
 8007ae6:	a340      	add	r3, pc, #256	; (adr r3, 8007be8 <__ieee754_pow+0x3a0>)
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f7f8 fd88 	bl	8000600 <__aeabi_dmul>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007af8:	f7f8 fbce 	bl	8000298 <__aeabi_dsub>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4604      	mov	r4, r0
 8007b02:	460d      	mov	r5, r1
 8007b04:	4630      	mov	r0, r6
 8007b06:	4639      	mov	r1, r7
 8007b08:	f7f8 fbc8 	bl	800029c <__adddf3>
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b12:	4632      	mov	r2, r6
 8007b14:	463b      	mov	r3, r7
 8007b16:	f7f8 fbbf 	bl	8000298 <__aeabi_dsub>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7f8 fbb9 	bl	8000298 <__aeabi_dsub>
 8007b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b28:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460f      	mov	r7, r1
 8007b32:	f040 81eb 	bne.w	8007f0c <__ieee754_pow+0x6c4>
 8007b36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007bf0 <__ieee754_pow+0x3a8>
 8007b3a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007b3e:	2400      	movs	r4, #0
 8007b40:	4622      	mov	r2, r4
 8007b42:	462b      	mov	r3, r5
 8007b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b4c:	f7f8 fba4 	bl	8000298 <__aeabi_dsub>
 8007b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b54:	f7f8 fd54 	bl	8000600 <__aeabi_dmul>
 8007b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	4689      	mov	r9, r1
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 fd4c 	bl	8000600 <__aeabi_dmul>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 fb94 	bl	800029c <__adddf3>
 8007b74:	4622      	mov	r2, r4
 8007b76:	462b      	mov	r3, r5
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b80:	f7f8 fd3e 	bl	8000600 <__aeabi_dmul>
 8007b84:	460b      	mov	r3, r1
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4640      	mov	r0, r8
 8007b90:	e9cd 4500 	strd	r4, r5, [sp]
 8007b94:	f7f8 fb82 	bl	800029c <__adddf3>
 8007b98:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <__ieee754_pow+0x3c4>)
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	460f      	mov	r7, r1
 8007ba0:	468b      	mov	fp, r1
 8007ba2:	f340 82f7 	ble.w	8008194 <__ieee754_pow+0x94c>
 8007ba6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007baa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007bae:	4303      	orrs	r3, r0
 8007bb0:	f000 81ea 	beq.w	8007f88 <__ieee754_pow+0x740>
 8007bb4:	a310      	add	r3, pc, #64	; (adr r3, 8007bf8 <__ieee754_pow+0x3b0>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bbe:	f7f8 fd1f 	bl	8000600 <__aeabi_dmul>
 8007bc2:	a30d      	add	r3, pc, #52	; (adr r3, 8007bf8 <__ieee754_pow+0x3b0>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	e6d5      	b.n	8007976 <__ieee754_pow+0x12e>
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w
 8007bd0:	60000000 	.word	0x60000000
 8007bd4:	3ff71547 	.word	0x3ff71547
 8007bd8:	f85ddf44 	.word	0xf85ddf44
 8007bdc:	3e54ae0b 	.word	0x3e54ae0b
 8007be0:	55555555 	.word	0x55555555
 8007be4:	3fd55555 	.word	0x3fd55555
 8007be8:	652b82fe 	.word	0x652b82fe
 8007bec:	3ff71547 	.word	0x3ff71547
 8007bf0:	00000000 	.word	0x00000000
 8007bf4:	bff00000 	.word	0xbff00000
 8007bf8:	8800759c 	.word	0x8800759c
 8007bfc:	7e37e43c 	.word	0x7e37e43c
 8007c00:	3ff00000 	.word	0x3ff00000
 8007c04:	3fd00000 	.word	0x3fd00000
 8007c08:	3fe00000 	.word	0x3fe00000
 8007c0c:	408fffff 	.word	0x408fffff
 8007c10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	da05      	bge.n	8007c26 <__ieee754_pow+0x3de>
 8007c1a:	4bd3      	ldr	r3, [pc, #844]	; (8007f68 <__ieee754_pow+0x720>)
 8007c1c:	f7f8 fcf0 	bl	8000600 <__aeabi_dmul>
 8007c20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007c24:	460c      	mov	r4, r1
 8007c26:	1523      	asrs	r3, r4, #20
 8007c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c2c:	4413      	add	r3, r2
 8007c2e:	9307      	str	r3, [sp, #28]
 8007c30:	4bce      	ldr	r3, [pc, #824]	; (8007f6c <__ieee754_pow+0x724>)
 8007c32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c40:	dd08      	ble.n	8007c54 <__ieee754_pow+0x40c>
 8007c42:	4bcb      	ldr	r3, [pc, #812]	; (8007f70 <__ieee754_pow+0x728>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	f340 815e 	ble.w	8007f06 <__ieee754_pow+0x6be>
 8007c4a:	9b07      	ldr	r3, [sp, #28]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	9307      	str	r3, [sp, #28]
 8007c50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007c54:	f04f 0a00 	mov.w	sl, #0
 8007c58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c60:	4bc4      	ldr	r3, [pc, #784]	; (8007f74 <__ieee754_pow+0x72c>)
 8007c62:	4413      	add	r3, r2
 8007c64:	ed93 7b00 	vldr	d7, [r3]
 8007c68:	4629      	mov	r1, r5
 8007c6a:	ec53 2b17 	vmov	r2, r3, d7
 8007c6e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c76:	f7f8 fb0f 	bl	8000298 <__aeabi_dsub>
 8007c7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c86:	f7f8 fb09 	bl	800029c <__adddf3>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	2000      	movs	r0, #0
 8007c90:	49b9      	ldr	r1, [pc, #740]	; (8007f78 <__ieee754_pow+0x730>)
 8007c92:	f7f8 fddf 	bl	8000854 <__aeabi_ddiv>
 8007c96:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	f7f8 fcad 	bl	8000600 <__aeabi_dmul>
 8007ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007caa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9302      	str	r3, [sp, #8]
 8007cb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007cba:	106d      	asrs	r5, r5, #1
 8007cbc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007cc0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	4614      	mov	r4, r2
 8007cd0:	461d      	mov	r5, r3
 8007cd2:	f7f8 fc95 	bl	8000600 <__aeabi_dmul>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4630      	mov	r0, r6
 8007cdc:	4639      	mov	r1, r7
 8007cde:	f7f8 fadb 	bl	8000298 <__aeabi_dsub>
 8007ce2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 fad3 	bl	8000298 <__aeabi_dsub>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cfa:	f7f8 facd 	bl	8000298 <__aeabi_dsub>
 8007cfe:	4642      	mov	r2, r8
 8007d00:	464b      	mov	r3, r9
 8007d02:	f7f8 fc7d 	bl	8000600 <__aeabi_dmul>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	f7f8 fac3 	bl	8000298 <__aeabi_dsub>
 8007d12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007d16:	f7f8 fc73 	bl	8000600 <__aeabi_dmul>
 8007d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d22:	4610      	mov	r0, r2
 8007d24:	4619      	mov	r1, r3
 8007d26:	f7f8 fc6b 	bl	8000600 <__aeabi_dmul>
 8007d2a:	a37b      	add	r3, pc, #492	; (adr r3, 8007f18 <__ieee754_pow+0x6d0>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	4604      	mov	r4, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	f7f8 fc64 	bl	8000600 <__aeabi_dmul>
 8007d38:	a379      	add	r3, pc, #484	; (adr r3, 8007f20 <__ieee754_pow+0x6d8>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f7f8 faad 	bl	800029c <__adddf3>
 8007d42:	4622      	mov	r2, r4
 8007d44:	462b      	mov	r3, r5
 8007d46:	f7f8 fc5b 	bl	8000600 <__aeabi_dmul>
 8007d4a:	a377      	add	r3, pc, #476	; (adr r3, 8007f28 <__ieee754_pow+0x6e0>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 faa4 	bl	800029c <__adddf3>
 8007d54:	4622      	mov	r2, r4
 8007d56:	462b      	mov	r3, r5
 8007d58:	f7f8 fc52 	bl	8000600 <__aeabi_dmul>
 8007d5c:	a374      	add	r3, pc, #464	; (adr r3, 8007f30 <__ieee754_pow+0x6e8>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fa9b 	bl	800029c <__adddf3>
 8007d66:	4622      	mov	r2, r4
 8007d68:	462b      	mov	r3, r5
 8007d6a:	f7f8 fc49 	bl	8000600 <__aeabi_dmul>
 8007d6e:	a372      	add	r3, pc, #456	; (adr r3, 8007f38 <__ieee754_pow+0x6f0>)
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f7f8 fa92 	bl	800029c <__adddf3>
 8007d78:	4622      	mov	r2, r4
 8007d7a:	462b      	mov	r3, r5
 8007d7c:	f7f8 fc40 	bl	8000600 <__aeabi_dmul>
 8007d80:	a36f      	add	r3, pc, #444	; (adr r3, 8007f40 <__ieee754_pow+0x6f8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fa89 	bl	800029c <__adddf3>
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	460f      	mov	r7, r1
 8007d90:	462b      	mov	r3, r5
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7f8 fc33 	bl	8000600 <__aeabi_dmul>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4630      	mov	r0, r6
 8007da0:	4639      	mov	r1, r7
 8007da2:	f7f8 fc2d 	bl	8000600 <__aeabi_dmul>
 8007da6:	4642      	mov	r2, r8
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	464b      	mov	r3, r9
 8007dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007db2:	f7f8 fa73 	bl	800029c <__adddf3>
 8007db6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dba:	f7f8 fc21 	bl	8000600 <__aeabi_dmul>
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	f7f8 fa6b 	bl	800029c <__adddf3>
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	4606      	mov	r6, r0
 8007dca:	460f      	mov	r7, r1
 8007dcc:	464b      	mov	r3, r9
 8007dce:	4640      	mov	r0, r8
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	f7f8 fc15 	bl	8000600 <__aeabi_dmul>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4b68      	ldr	r3, [pc, #416]	; (8007f7c <__ieee754_pow+0x734>)
 8007dda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007dde:	f7f8 fa5d 	bl	800029c <__adddf3>
 8007de2:	4632      	mov	r2, r6
 8007de4:	463b      	mov	r3, r7
 8007de6:	f7f8 fa59 	bl	800029c <__adddf3>
 8007dea:	9802      	ldr	r0, [sp, #8]
 8007dec:	460d      	mov	r5, r1
 8007dee:	4604      	mov	r4, r0
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4640      	mov	r0, r8
 8007df6:	4649      	mov	r1, r9
 8007df8:	f7f8 fc02 	bl	8000600 <__aeabi_dmul>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4680      	mov	r8, r0
 8007e00:	4689      	mov	r9, r1
 8007e02:	4b5e      	ldr	r3, [pc, #376]	; (8007f7c <__ieee754_pow+0x734>)
 8007e04:	4620      	mov	r0, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	f7f8 fa46 	bl	8000298 <__aeabi_dsub>
 8007e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e10:	f7f8 fa42 	bl	8000298 <__aeabi_dsub>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fa3c 	bl	8000298 <__aeabi_dsub>
 8007e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e24:	f7f8 fbec 	bl	8000600 <__aeabi_dmul>
 8007e28:	4622      	mov	r2, r4
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	462b      	mov	r3, r5
 8007e30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e34:	f7f8 fbe4 	bl	8000600 <__aeabi_dmul>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7f8 fa2c 	bl	800029c <__adddf3>
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fa24 	bl	800029c <__adddf3>
 8007e54:	9802      	ldr	r0, [sp, #8]
 8007e56:	a33c      	add	r3, pc, #240	; (adr r3, 8007f48 <__ieee754_pow+0x700>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	460d      	mov	r5, r1
 8007e60:	f7f8 fbce 	bl	8000600 <__aeabi_dmul>
 8007e64:	4642      	mov	r2, r8
 8007e66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7f8 fa12 	bl	8000298 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4630      	mov	r0, r6
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	f7f8 fa0c 	bl	8000298 <__aeabi_dsub>
 8007e80:	a333      	add	r3, pc, #204	; (adr r3, 8007f50 <__ieee754_pow+0x708>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 fbbb 	bl	8000600 <__aeabi_dmul>
 8007e8a:	a333      	add	r3, pc, #204	; (adr r3, 8007f58 <__ieee754_pow+0x710>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	4606      	mov	r6, r0
 8007e92:	460f      	mov	r7, r1
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fbb2 	bl	8000600 <__aeabi_dmul>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 f9fa 	bl	800029c <__adddf3>
 8007ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eaa:	4b35      	ldr	r3, [pc, #212]	; (8007f80 <__ieee754_pow+0x738>)
 8007eac:	4413      	add	r3, r2
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	f7f8 f9f3 	bl	800029c <__adddf3>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	9807      	ldr	r0, [sp, #28]
 8007eba:	460d      	mov	r5, r1
 8007ebc:	f7f8 fb3a 	bl	8000534 <__aeabi_i2d>
 8007ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ec2:	4b30      	ldr	r3, [pc, #192]	; (8007f84 <__ieee754_pow+0x73c>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	4622      	mov	r2, r4
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ed6:	f7f8 f9e1 	bl	800029c <__adddf3>
 8007eda:	4642      	mov	r2, r8
 8007edc:	464b      	mov	r3, r9
 8007ede:	f7f8 f9dd 	bl	800029c <__adddf3>
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	f7f8 f9d9 	bl	800029c <__adddf3>
 8007eea:	9802      	ldr	r0, [sp, #8]
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ef4:	f7f8 f9d0 	bl	8000298 <__aeabi_dsub>
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	f7f8 f9cc 	bl	8000298 <__aeabi_dsub>
 8007f00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f04:	e607      	b.n	8007b16 <__ieee754_pow+0x2ce>
 8007f06:	f04f 0a01 	mov.w	sl, #1
 8007f0a:	e6a5      	b.n	8007c58 <__ieee754_pow+0x410>
 8007f0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007f60 <__ieee754_pow+0x718>
 8007f10:	e613      	b.n	8007b3a <__ieee754_pow+0x2f2>
 8007f12:	bf00      	nop
 8007f14:	f3af 8000 	nop.w
 8007f18:	4a454eef 	.word	0x4a454eef
 8007f1c:	3fca7e28 	.word	0x3fca7e28
 8007f20:	93c9db65 	.word	0x93c9db65
 8007f24:	3fcd864a 	.word	0x3fcd864a
 8007f28:	a91d4101 	.word	0xa91d4101
 8007f2c:	3fd17460 	.word	0x3fd17460
 8007f30:	518f264d 	.word	0x518f264d
 8007f34:	3fd55555 	.word	0x3fd55555
 8007f38:	db6fabff 	.word	0xdb6fabff
 8007f3c:	3fdb6db6 	.word	0x3fdb6db6
 8007f40:	33333303 	.word	0x33333303
 8007f44:	3fe33333 	.word	0x3fe33333
 8007f48:	e0000000 	.word	0xe0000000
 8007f4c:	3feec709 	.word	0x3feec709
 8007f50:	dc3a03fd 	.word	0xdc3a03fd
 8007f54:	3feec709 	.word	0x3feec709
 8007f58:	145b01f5 	.word	0x145b01f5
 8007f5c:	be3e2fe0 	.word	0xbe3e2fe0
 8007f60:	00000000 	.word	0x00000000
 8007f64:	3ff00000 	.word	0x3ff00000
 8007f68:	43400000 	.word	0x43400000
 8007f6c:	0003988e 	.word	0x0003988e
 8007f70:	000bb679 	.word	0x000bb679
 8007f74:	08008948 	.word	0x08008948
 8007f78:	3ff00000 	.word	0x3ff00000
 8007f7c:	40080000 	.word	0x40080000
 8007f80:	08008968 	.word	0x08008968
 8007f84:	08008958 	.word	0x08008958
 8007f88:	a3b6      	add	r3, pc, #728	; (adr r3, 8008264 <__ieee754_pow+0xa1c>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 f983 	bl	800029c <__adddf3>
 8007f96:	4622      	mov	r2, r4
 8007f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	f7f8 f979 	bl	8000298 <__aeabi_dsub>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fae:	f7f8 fdb7 	bl	8000b20 <__aeabi_dcmpgt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f47f adfe 	bne.w	8007bb4 <__ieee754_pow+0x36c>
 8007fb8:	4aa5      	ldr	r2, [pc, #660]	; (8008250 <__ieee754_pow+0xa08>)
 8007fba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	f340 810c 	ble.w	80081dc <__ieee754_pow+0x994>
 8007fc4:	151b      	asrs	r3, r3, #20
 8007fc6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007fca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007fce:	fa4a f303 	asr.w	r3, sl, r3
 8007fd2:	445b      	add	r3, fp
 8007fd4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007fd8:	4e9e      	ldr	r6, [pc, #632]	; (8008254 <__ieee754_pow+0xa0c>)
 8007fda:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007fde:	4116      	asrs	r6, r2
 8007fe0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	ea23 0106 	bic.w	r1, r3, r6
 8007fea:	f1c2 0214 	rsb	r2, r2, #20
 8007fee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ff2:	fa4a fa02 	asr.w	sl, sl, r2
 8007ff6:	f1bb 0f00 	cmp.w	fp, #0
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	bfb8      	it	lt
 8008004:	f1ca 0a00 	rsblt	sl, sl, #0
 8008008:	f7f8 f946 	bl	8000298 <__aeabi_dsub>
 800800c:	e9cd 0100 	strd	r0, r1, [sp]
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008018:	f7f8 f940 	bl	800029c <__adddf3>
 800801c:	2000      	movs	r0, #0
 800801e:	a37a      	add	r3, pc, #488	; (adr r3, 8008208 <__ieee754_pow+0x9c0>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	4604      	mov	r4, r0
 8008026:	460d      	mov	r5, r1
 8008028:	f7f8 faea 	bl	8000600 <__aeabi_dmul>
 800802c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008030:	4606      	mov	r6, r0
 8008032:	460f      	mov	r7, r1
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 f92e 	bl	8000298 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	f7f8 f928 	bl	8000298 <__aeabi_dsub>
 8008048:	a371      	add	r3, pc, #452	; (adr r3, 8008210 <__ieee754_pow+0x9c8>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 fad7 	bl	8000600 <__aeabi_dmul>
 8008052:	a371      	add	r3, pc, #452	; (adr r3, 8008218 <__ieee754_pow+0x9d0>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	4680      	mov	r8, r0
 800805a:	4689      	mov	r9, r1
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	f7f8 face 	bl	8000600 <__aeabi_dmul>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4640      	mov	r0, r8
 800806a:	4649      	mov	r1, r9
 800806c:	f7f8 f916 	bl	800029c <__adddf3>
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 f90e 	bl	800029c <__adddf3>
 8008080:	4632      	mov	r2, r6
 8008082:	463b      	mov	r3, r7
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	f7f8 f906 	bl	8000298 <__aeabi_dsub>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4620      	mov	r0, r4
 8008092:	4629      	mov	r1, r5
 8008094:	f7f8 f900 	bl	8000298 <__aeabi_dsub>
 8008098:	4642      	mov	r2, r8
 800809a:	4606      	mov	r6, r0
 800809c:	460f      	mov	r7, r1
 800809e:	464b      	mov	r3, r9
 80080a0:	4640      	mov	r0, r8
 80080a2:	4649      	mov	r1, r9
 80080a4:	f7f8 faac 	bl	8000600 <__aeabi_dmul>
 80080a8:	a35d      	add	r3, pc, #372	; (adr r3, 8008220 <__ieee754_pow+0x9d8>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	4604      	mov	r4, r0
 80080b0:	460d      	mov	r5, r1
 80080b2:	f7f8 faa5 	bl	8000600 <__aeabi_dmul>
 80080b6:	a35c      	add	r3, pc, #368	; (adr r3, 8008228 <__ieee754_pow+0x9e0>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 f8ec 	bl	8000298 <__aeabi_dsub>
 80080c0:	4622      	mov	r2, r4
 80080c2:	462b      	mov	r3, r5
 80080c4:	f7f8 fa9c 	bl	8000600 <__aeabi_dmul>
 80080c8:	a359      	add	r3, pc, #356	; (adr r3, 8008230 <__ieee754_pow+0x9e8>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 f8e5 	bl	800029c <__adddf3>
 80080d2:	4622      	mov	r2, r4
 80080d4:	462b      	mov	r3, r5
 80080d6:	f7f8 fa93 	bl	8000600 <__aeabi_dmul>
 80080da:	a357      	add	r3, pc, #348	; (adr r3, 8008238 <__ieee754_pow+0x9f0>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 f8da 	bl	8000298 <__aeabi_dsub>
 80080e4:	4622      	mov	r2, r4
 80080e6:	462b      	mov	r3, r5
 80080e8:	f7f8 fa8a 	bl	8000600 <__aeabi_dmul>
 80080ec:	a354      	add	r3, pc, #336	; (adr r3, 8008240 <__ieee754_pow+0x9f8>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f7f8 f8d3 	bl	800029c <__adddf3>
 80080f6:	4622      	mov	r2, r4
 80080f8:	462b      	mov	r3, r5
 80080fa:	f7f8 fa81 	bl	8000600 <__aeabi_dmul>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4640      	mov	r0, r8
 8008104:	4649      	mov	r1, r9
 8008106:	f7f8 f8c7 	bl	8000298 <__aeabi_dsub>
 800810a:	4604      	mov	r4, r0
 800810c:	460d      	mov	r5, r1
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4640      	mov	r0, r8
 8008114:	4649      	mov	r1, r9
 8008116:	f7f8 fa73 	bl	8000600 <__aeabi_dmul>
 800811a:	2200      	movs	r2, #0
 800811c:	e9cd 0100 	strd	r0, r1, [sp]
 8008120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008124:	4620      	mov	r0, r4
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 f8b6 	bl	8000298 <__aeabi_dsub>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008134:	f7f8 fb8e 	bl	8000854 <__aeabi_ddiv>
 8008138:	4632      	mov	r2, r6
 800813a:	4604      	mov	r4, r0
 800813c:	460d      	mov	r5, r1
 800813e:	463b      	mov	r3, r7
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 fa5c 	bl	8000600 <__aeabi_dmul>
 8008148:	4632      	mov	r2, r6
 800814a:	463b      	mov	r3, r7
 800814c:	f7f8 f8a6 	bl	800029c <__adddf3>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4620      	mov	r0, r4
 8008156:	4629      	mov	r1, r5
 8008158:	f7f8 f89e 	bl	8000298 <__aeabi_dsub>
 800815c:	4642      	mov	r2, r8
 800815e:	464b      	mov	r3, r9
 8008160:	f7f8 f89a 	bl	8000298 <__aeabi_dsub>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	2000      	movs	r0, #0
 800816a:	493b      	ldr	r1, [pc, #236]	; (8008258 <__ieee754_pow+0xa10>)
 800816c:	f7f8 f894 	bl	8000298 <__aeabi_dsub>
 8008170:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008174:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	da31      	bge.n	80081e2 <__ieee754_pow+0x99a>
 800817e:	4650      	mov	r0, sl
 8008180:	ec43 2b10 	vmov	d0, r2, r3
 8008184:	f000 f9bc 	bl	8008500 <scalbn>
 8008188:	ec51 0b10 	vmov	r0, r1, d0
 800818c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008190:	f7ff bbf1 	b.w	8007976 <__ieee754_pow+0x12e>
 8008194:	4b31      	ldr	r3, [pc, #196]	; (800825c <__ieee754_pow+0xa14>)
 8008196:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800819a:	429e      	cmp	r6, r3
 800819c:	f77f af0c 	ble.w	8007fb8 <__ieee754_pow+0x770>
 80081a0:	4b2f      	ldr	r3, [pc, #188]	; (8008260 <__ieee754_pow+0xa18>)
 80081a2:	440b      	add	r3, r1
 80081a4:	4303      	orrs	r3, r0
 80081a6:	d00b      	beq.n	80081c0 <__ieee754_pow+0x978>
 80081a8:	a327      	add	r3, pc, #156	; (adr r3, 8008248 <__ieee754_pow+0xa00>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b2:	f7f8 fa25 	bl	8000600 <__aeabi_dmul>
 80081b6:	a324      	add	r3, pc, #144	; (adr r3, 8008248 <__ieee754_pow+0xa00>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7ff bbdb 	b.w	8007976 <__ieee754_pow+0x12e>
 80081c0:	4622      	mov	r2, r4
 80081c2:	462b      	mov	r3, r5
 80081c4:	f7f8 f868 	bl	8000298 <__aeabi_dsub>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4640      	mov	r0, r8
 80081ce:	4649      	mov	r1, r9
 80081d0:	f7f8 fc92 	bl	8000af8 <__aeabi_dcmple>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f43f aeef 	beq.w	8007fb8 <__ieee754_pow+0x770>
 80081da:	e7e5      	b.n	80081a8 <__ieee754_pow+0x960>
 80081dc:	f04f 0a00 	mov.w	sl, #0
 80081e0:	e716      	b.n	8008010 <__ieee754_pow+0x7c8>
 80081e2:	4621      	mov	r1, r4
 80081e4:	e7d2      	b.n	800818c <__ieee754_pow+0x944>
 80081e6:	2000      	movs	r0, #0
 80081e8:	491b      	ldr	r1, [pc, #108]	; (8008258 <__ieee754_pow+0xa10>)
 80081ea:	f7ff bb8d 	b.w	8007908 <__ieee754_pow+0xc0>
 80081ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f2:	f7ff bb89 	b.w	8007908 <__ieee754_pow+0xc0>
 80081f6:	4630      	mov	r0, r6
 80081f8:	4639      	mov	r1, r7
 80081fa:	f7ff bb85 	b.w	8007908 <__ieee754_pow+0xc0>
 80081fe:	4693      	mov	fp, r2
 8008200:	f7ff bb96 	b.w	8007930 <__ieee754_pow+0xe8>
 8008204:	f3af 8000 	nop.w
 8008208:	00000000 	.word	0x00000000
 800820c:	3fe62e43 	.word	0x3fe62e43
 8008210:	fefa39ef 	.word	0xfefa39ef
 8008214:	3fe62e42 	.word	0x3fe62e42
 8008218:	0ca86c39 	.word	0x0ca86c39
 800821c:	be205c61 	.word	0xbe205c61
 8008220:	72bea4d0 	.word	0x72bea4d0
 8008224:	3e663769 	.word	0x3e663769
 8008228:	c5d26bf1 	.word	0xc5d26bf1
 800822c:	3ebbbd41 	.word	0x3ebbbd41
 8008230:	af25de2c 	.word	0xaf25de2c
 8008234:	3f11566a 	.word	0x3f11566a
 8008238:	16bebd93 	.word	0x16bebd93
 800823c:	3f66c16c 	.word	0x3f66c16c
 8008240:	5555553e 	.word	0x5555553e
 8008244:	3fc55555 	.word	0x3fc55555
 8008248:	c2f8f359 	.word	0xc2f8f359
 800824c:	01a56e1f 	.word	0x01a56e1f
 8008250:	3fe00000 	.word	0x3fe00000
 8008254:	000fffff 	.word	0x000fffff
 8008258:	3ff00000 	.word	0x3ff00000
 800825c:	4090cbff 	.word	0x4090cbff
 8008260:	3f6f3400 	.word	0x3f6f3400
 8008264:	652b82fe 	.word	0x652b82fe
 8008268:	3c971547 	.word	0x3c971547

0800826c <__ieee754_sqrt>:
 800826c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008270:	ec55 4b10 	vmov	r4, r5, d0
 8008274:	4e54      	ldr	r6, [pc, #336]	; (80083c8 <__ieee754_sqrt+0x15c>)
 8008276:	43ae      	bics	r6, r5
 8008278:	ee10 0a10 	vmov	r0, s0
 800827c:	462b      	mov	r3, r5
 800827e:	462a      	mov	r2, r5
 8008280:	4621      	mov	r1, r4
 8008282:	d113      	bne.n	80082ac <__ieee754_sqrt+0x40>
 8008284:	ee10 2a10 	vmov	r2, s0
 8008288:	462b      	mov	r3, r5
 800828a:	ee10 0a10 	vmov	r0, s0
 800828e:	4629      	mov	r1, r5
 8008290:	f7f8 f9b6 	bl	8000600 <__aeabi_dmul>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	f7f7 fffe 	bl	800029c <__adddf3>
 80082a0:	4604      	mov	r4, r0
 80082a2:	460d      	mov	r5, r1
 80082a4:	ec45 4b10 	vmov	d0, r4, r5
 80082a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ac:	2d00      	cmp	r5, #0
 80082ae:	dc10      	bgt.n	80082d2 <__ieee754_sqrt+0x66>
 80082b0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082b4:	4330      	orrs	r0, r6
 80082b6:	d0f5      	beq.n	80082a4 <__ieee754_sqrt+0x38>
 80082b8:	b15d      	cbz	r5, 80082d2 <__ieee754_sqrt+0x66>
 80082ba:	ee10 2a10 	vmov	r2, s0
 80082be:	462b      	mov	r3, r5
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	f7f7 ffe8 	bl	8000298 <__aeabi_dsub>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	f7f8 fac2 	bl	8000854 <__aeabi_ddiv>
 80082d0:	e7e6      	b.n	80082a0 <__ieee754_sqrt+0x34>
 80082d2:	151b      	asrs	r3, r3, #20
 80082d4:	d10c      	bne.n	80082f0 <__ieee754_sqrt+0x84>
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d06d      	beq.n	80083b6 <__ieee754_sqrt+0x14a>
 80082da:	2000      	movs	r0, #0
 80082dc:	02d6      	lsls	r6, r2, #11
 80082de:	d56e      	bpl.n	80083be <__ieee754_sqrt+0x152>
 80082e0:	1e44      	subs	r4, r0, #1
 80082e2:	1b1b      	subs	r3, r3, r4
 80082e4:	f1c0 0420 	rsb	r4, r0, #32
 80082e8:	fa21 f404 	lsr.w	r4, r1, r4
 80082ec:	4322      	orrs	r2, r4
 80082ee:	4081      	lsls	r1, r0
 80082f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082f4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80082f8:	07dd      	lsls	r5, r3, #31
 80082fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80082fe:	bf42      	ittt	mi
 8008300:	0052      	lslmi	r2, r2, #1
 8008302:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8008306:	0049      	lslmi	r1, r1, #1
 8008308:	1058      	asrs	r0, r3, #1
 800830a:	2500      	movs	r5, #0
 800830c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8008310:	441a      	add	r2, r3
 8008312:	0049      	lsls	r1, r1, #1
 8008314:	2316      	movs	r3, #22
 8008316:	462c      	mov	r4, r5
 8008318:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800831c:	19a7      	adds	r7, r4, r6
 800831e:	4297      	cmp	r7, r2
 8008320:	bfde      	ittt	le
 8008322:	1bd2      	suble	r2, r2, r7
 8008324:	19bc      	addle	r4, r7, r6
 8008326:	19ad      	addle	r5, r5, r6
 8008328:	0052      	lsls	r2, r2, #1
 800832a:	3b01      	subs	r3, #1
 800832c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008330:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008334:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008338:	d1f0      	bne.n	800831c <__ieee754_sqrt+0xb0>
 800833a:	f04f 0e20 	mov.w	lr, #32
 800833e:	469c      	mov	ip, r3
 8008340:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008344:	42a2      	cmp	r2, r4
 8008346:	eb06 070c 	add.w	r7, r6, ip
 800834a:	dc02      	bgt.n	8008352 <__ieee754_sqrt+0xe6>
 800834c:	d112      	bne.n	8008374 <__ieee754_sqrt+0x108>
 800834e:	428f      	cmp	r7, r1
 8008350:	d810      	bhi.n	8008374 <__ieee754_sqrt+0x108>
 8008352:	2f00      	cmp	r7, #0
 8008354:	eb07 0c06 	add.w	ip, r7, r6
 8008358:	da34      	bge.n	80083c4 <__ieee754_sqrt+0x158>
 800835a:	f1bc 0f00 	cmp.w	ip, #0
 800835e:	db31      	blt.n	80083c4 <__ieee754_sqrt+0x158>
 8008360:	f104 0801 	add.w	r8, r4, #1
 8008364:	1b12      	subs	r2, r2, r4
 8008366:	428f      	cmp	r7, r1
 8008368:	bf88      	it	hi
 800836a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800836e:	1bc9      	subs	r1, r1, r7
 8008370:	4433      	add	r3, r6
 8008372:	4644      	mov	r4, r8
 8008374:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8008378:	f1be 0e01 	subs.w	lr, lr, #1
 800837c:	443a      	add	r2, r7
 800837e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008382:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008386:	d1dd      	bne.n	8008344 <__ieee754_sqrt+0xd8>
 8008388:	430a      	orrs	r2, r1
 800838a:	d006      	beq.n	800839a <__ieee754_sqrt+0x12e>
 800838c:	1c5c      	adds	r4, r3, #1
 800838e:	bf13      	iteet	ne
 8008390:	3301      	addne	r3, #1
 8008392:	3501      	addeq	r5, #1
 8008394:	4673      	moveq	r3, lr
 8008396:	f023 0301 	bicne.w	r3, r3, #1
 800839a:	106a      	asrs	r2, r5, #1
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	07e9      	lsls	r1, r5, #31
 80083a0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80083a4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80083a8:	bf48      	it	mi
 80083aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80083ae:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80083b2:	461c      	mov	r4, r3
 80083b4:	e776      	b.n	80082a4 <__ieee754_sqrt+0x38>
 80083b6:	0aca      	lsrs	r2, r1, #11
 80083b8:	3b15      	subs	r3, #21
 80083ba:	0549      	lsls	r1, r1, #21
 80083bc:	e78b      	b.n	80082d6 <__ieee754_sqrt+0x6a>
 80083be:	0052      	lsls	r2, r2, #1
 80083c0:	3001      	adds	r0, #1
 80083c2:	e78b      	b.n	80082dc <__ieee754_sqrt+0x70>
 80083c4:	46a0      	mov	r8, r4
 80083c6:	e7cd      	b.n	8008364 <__ieee754_sqrt+0xf8>
 80083c8:	7ff00000 	.word	0x7ff00000

080083cc <finite>:
 80083cc:	ee10 3a90 	vmov	r3, s1
 80083d0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80083d4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80083d8:	0fc0      	lsrs	r0, r0, #31
 80083da:	4770      	bx	lr

080083dc <matherr>:
 80083dc:	2000      	movs	r0, #0
 80083de:	4770      	bx	lr

080083e0 <nan>:
 80083e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80083e8 <nan+0x8>
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	00000000 	.word	0x00000000
 80083ec:	7ff80000 	.word	0x7ff80000

080083f0 <rint>:
 80083f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f2:	ec51 0b10 	vmov	r0, r1, d0
 80083f6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80083fa:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80083fe:	2e13      	cmp	r6, #19
 8008400:	ee10 7a10 	vmov	r7, s0
 8008404:	460b      	mov	r3, r1
 8008406:	4602      	mov	r2, r0
 8008408:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800840c:	dc58      	bgt.n	80084c0 <rint+0xd0>
 800840e:	2e00      	cmp	r6, #0
 8008410:	da2b      	bge.n	800846a <rint+0x7a>
 8008412:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008416:	4302      	orrs	r2, r0
 8008418:	d023      	beq.n	8008462 <rint+0x72>
 800841a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800841e:	4302      	orrs	r2, r0
 8008420:	4251      	negs	r1, r2
 8008422:	4311      	orrs	r1, r2
 8008424:	0b09      	lsrs	r1, r1, #12
 8008426:	0c5b      	lsrs	r3, r3, #17
 8008428:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800842c:	045b      	lsls	r3, r3, #17
 800842e:	ea41 0703 	orr.w	r7, r1, r3
 8008432:	4b31      	ldr	r3, [pc, #196]	; (80084f8 <rint+0x108>)
 8008434:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008438:	4639      	mov	r1, r7
 800843a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800843e:	ee10 0a10 	vmov	r0, s0
 8008442:	4632      	mov	r2, r6
 8008444:	463b      	mov	r3, r7
 8008446:	f7f7 ff29 	bl	800029c <__adddf3>
 800844a:	e9cd 0100 	strd	r0, r1, [sp]
 800844e:	463b      	mov	r3, r7
 8008450:	4632      	mov	r2, r6
 8008452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008456:	f7f7 ff1f 	bl	8000298 <__aeabi_dsub>
 800845a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800845e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8008462:	ec41 0b10 	vmov	d0, r0, r1
 8008466:	b003      	add	sp, #12
 8008468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846a:	4c24      	ldr	r4, [pc, #144]	; (80084fc <rint+0x10c>)
 800846c:	4134      	asrs	r4, r6
 800846e:	ea01 0704 	and.w	r7, r1, r4
 8008472:	4307      	orrs	r7, r0
 8008474:	d0f5      	beq.n	8008462 <rint+0x72>
 8008476:	0861      	lsrs	r1, r4, #1
 8008478:	ea03 0001 	and.w	r0, r3, r1
 800847c:	4302      	orrs	r2, r0
 800847e:	d00b      	beq.n	8008498 <rint+0xa8>
 8008480:	ea23 0101 	bic.w	r1, r3, r1
 8008484:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008488:	2e13      	cmp	r6, #19
 800848a:	fa43 f306 	asr.w	r3, r3, r6
 800848e:	bf0c      	ite	eq
 8008490:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8008494:	2200      	movne	r2, #0
 8008496:	430b      	orrs	r3, r1
 8008498:	4619      	mov	r1, r3
 800849a:	4b17      	ldr	r3, [pc, #92]	; (80084f8 <rint+0x108>)
 800849c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80084a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084a4:	4610      	mov	r0, r2
 80084a6:	462b      	mov	r3, r5
 80084a8:	4622      	mov	r2, r4
 80084aa:	f7f7 fef7 	bl	800029c <__adddf3>
 80084ae:	e9cd 0100 	strd	r0, r1, [sp]
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ba:	f7f7 feed 	bl	8000298 <__aeabi_dsub>
 80084be:	e7d0      	b.n	8008462 <rint+0x72>
 80084c0:	2e33      	cmp	r6, #51	; 0x33
 80084c2:	dd08      	ble.n	80084d6 <rint+0xe6>
 80084c4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80084c8:	d1cb      	bne.n	8008462 <rint+0x72>
 80084ca:	ee10 2a10 	vmov	r2, s0
 80084ce:	460b      	mov	r3, r1
 80084d0:	f7f7 fee4 	bl	800029c <__adddf3>
 80084d4:	e7c5      	b.n	8008462 <rint+0x72>
 80084d6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80084da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084de:	40f4      	lsrs	r4, r6
 80084e0:	4220      	tst	r0, r4
 80084e2:	d0be      	beq.n	8008462 <rint+0x72>
 80084e4:	0861      	lsrs	r1, r4, #1
 80084e6:	420f      	tst	r7, r1
 80084e8:	bf1f      	itttt	ne
 80084ea:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80084ee:	ea27 0101 	bicne.w	r1, r7, r1
 80084f2:	4132      	asrne	r2, r6
 80084f4:	430a      	orrne	r2, r1
 80084f6:	e7cf      	b.n	8008498 <rint+0xa8>
 80084f8:	08008978 	.word	0x08008978
 80084fc:	000fffff 	.word	0x000fffff

08008500 <scalbn>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	ec55 4b10 	vmov	r4, r5, d0
 8008506:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800850a:	4606      	mov	r6, r0
 800850c:	462b      	mov	r3, r5
 800850e:	b9b2      	cbnz	r2, 800853e <scalbn+0x3e>
 8008510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008514:	4323      	orrs	r3, r4
 8008516:	d03c      	beq.n	8008592 <scalbn+0x92>
 8008518:	2200      	movs	r2, #0
 800851a:	4b33      	ldr	r3, [pc, #204]	; (80085e8 <scalbn+0xe8>)
 800851c:	4629      	mov	r1, r5
 800851e:	ee10 0a10 	vmov	r0, s0
 8008522:	f7f8 f86d 	bl	8000600 <__aeabi_dmul>
 8008526:	4a31      	ldr	r2, [pc, #196]	; (80085ec <scalbn+0xec>)
 8008528:	4296      	cmp	r6, r2
 800852a:	4604      	mov	r4, r0
 800852c:	460d      	mov	r5, r1
 800852e:	460b      	mov	r3, r1
 8008530:	da13      	bge.n	800855a <scalbn+0x5a>
 8008532:	a329      	add	r3, pc, #164	; (adr r3, 80085d8 <scalbn+0xd8>)
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f7f8 f862 	bl	8000600 <__aeabi_dmul>
 800853c:	e00a      	b.n	8008554 <scalbn+0x54>
 800853e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008542:	428a      	cmp	r2, r1
 8008544:	d10c      	bne.n	8008560 <scalbn+0x60>
 8008546:	ee10 2a10 	vmov	r2, s0
 800854a:	462b      	mov	r3, r5
 800854c:	4620      	mov	r0, r4
 800854e:	4629      	mov	r1, r5
 8008550:	f7f7 fea4 	bl	800029c <__adddf3>
 8008554:	4604      	mov	r4, r0
 8008556:	460d      	mov	r5, r1
 8008558:	e01b      	b.n	8008592 <scalbn+0x92>
 800855a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800855e:	3a36      	subs	r2, #54	; 0x36
 8008560:	4432      	add	r2, r6
 8008562:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008566:	428a      	cmp	r2, r1
 8008568:	dd0b      	ble.n	8008582 <scalbn+0x82>
 800856a:	ec45 4b11 	vmov	d1, r4, r5
 800856e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80085e0 <scalbn+0xe0>
 8008572:	f000 f83f 	bl	80085f4 <copysign>
 8008576:	a31a      	add	r3, pc, #104	; (adr r3, 80085e0 <scalbn+0xe0>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	ec51 0b10 	vmov	r0, r1, d0
 8008580:	e7da      	b.n	8008538 <scalbn+0x38>
 8008582:	2a00      	cmp	r2, #0
 8008584:	dd08      	ble.n	8008598 <scalbn+0x98>
 8008586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800858a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800858e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008592:	ec45 4b10 	vmov	d0, r4, r5
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800859c:	da0d      	bge.n	80085ba <scalbn+0xba>
 800859e:	f24c 3350 	movw	r3, #50000	; 0xc350
 80085a2:	429e      	cmp	r6, r3
 80085a4:	ec45 4b11 	vmov	d1, r4, r5
 80085a8:	dce1      	bgt.n	800856e <scalbn+0x6e>
 80085aa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80085d8 <scalbn+0xd8>
 80085ae:	f000 f821 	bl	80085f4 <copysign>
 80085b2:	a309      	add	r3, pc, #36	; (adr r3, 80085d8 <scalbn+0xd8>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	e7e0      	b.n	800857c <scalbn+0x7c>
 80085ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085be:	3236      	adds	r2, #54	; 0x36
 80085c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085c8:	4620      	mov	r0, r4
 80085ca:	4629      	mov	r1, r5
 80085cc:	2200      	movs	r2, #0
 80085ce:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <scalbn+0xf0>)
 80085d0:	e7b2      	b.n	8008538 <scalbn+0x38>
 80085d2:	bf00      	nop
 80085d4:	f3af 8000 	nop.w
 80085d8:	c2f8f359 	.word	0xc2f8f359
 80085dc:	01a56e1f 	.word	0x01a56e1f
 80085e0:	8800759c 	.word	0x8800759c
 80085e4:	7e37e43c 	.word	0x7e37e43c
 80085e8:	43500000 	.word	0x43500000
 80085ec:	ffff3cb0 	.word	0xffff3cb0
 80085f0:	3c900000 	.word	0x3c900000

080085f4 <copysign>:
 80085f4:	ec53 2b10 	vmov	r2, r3, d0
 80085f8:	ee11 0a90 	vmov	r0, s3
 80085fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008600:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008604:	ea41 0300 	orr.w	r3, r1, r0
 8008608:	ec43 2b10 	vmov	d0, r2, r3
 800860c:	4770      	bx	lr
	...

08008610 <_init>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr

0800861c <_fini>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr
